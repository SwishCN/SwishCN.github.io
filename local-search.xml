<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Java绘图软件</title>
    <link href="/2021/05/19/Java%E7%BB%98%E5%9B%BE%E8%BD%AF%E4%BB%B6/"/>
    <url>/2021/05/19/Java%E7%BB%98%E5%9B%BE%E8%BD%AF%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<p>总共有两个类<br>DrawPixel.class<br>DrawMouse.class</p><p>下面先解释“自然”、“谢尔宾斯基三角形”、“谢尔宾斯基地毯”功能</p><p>自然</p><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs 自然">1.平面上随机选A,B,C三个点。再随机选一个点，记为P。<br>2.有一个三面色字，每丢一次，则选中ABC三个中一点。<br>开始游戏：<br>重复丢色子<br>1.如果选中A，则取A和P的中点P1，画黑。第二次开始再选中A，则取A和P1的中点为新的P1，画黑。<br>2.如果选中B，则取B和P的中点P2，画黑。第二次开始再选中B，则取B和P2的中点为新的P2，画黑。<br>3.如果选中C，则取C和P的中点P3，画黑。第二次开始再选中C，则取C和P3的中点为新的P3，画黑。<br>一直重复，每点一下鼠标，丢100次色子<br></code></pre></div></td></tr></table></figure><p><img src="/Users/swish/Desktop/MyBlog/source/_posts/%E6%88%AA%E5%B1%8F2021-07-11%20%E4%B8%8B%E5%8D%883.49.40.png" alt="截屏2021-07-11 下午3.49.40"></p><p>谢尔宾斯基三角形</p><p><img src="/Users/swish/Desktop/MyBlog/source/_posts/%E6%88%AA%E5%B1%8F2021-07-11%20%E4%B8%8B%E5%8D%883.52.12.png" alt="截屏2021-07-11 下午3.52.12"></p><p>谢尔宾斯基地毯</p><p><img src="/Users/swish/Desktop/MyBlog/source/_posts/%E6%88%AA%E5%B1%8F2021-07-11%20%E4%B8%8B%E5%8D%883.54.46.png" alt="截屏2021-07-11 下午3.54.46"></p><p>接着呈上代码</p><p>DrawPixel.class</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wh.drawPixel0519;<br><br><span class="hljs-keyword">import</span> java.awt.*;<br><br><span class="hljs-keyword">import</span> javax.swing.*;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Java绘图软件</span><br><span class="hljs-comment"> * 1.显示美颜相机的界面（功能选择）：java.awt java.swing</span><br><span class="hljs-comment"> * 2.处理图像效果，显示在界面（画笔/画布）</span><br><span class="hljs-comment"> * 3.事件监听器（设计界面程序的交互功能）</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DrawPixel</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        DrawPixel dp = <span class="hljs-keyword">new</span> DrawPixel();<br>        dp.initUI();<br>    &#125;<br><br>    <span class="hljs-comment">//1.显示界面效果</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">initUI</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">//窗体组件</span><br>        JFrame jf = <span class="hljs-keyword">new</span> JFrame();<br>        jf.setSize(<span class="hljs-number">800</span>, <span class="hljs-number">800</span>);<br>        jf.setTitle(<span class="hljs-string">&quot;绘图软件&quot;</span>);<br>        <span class="hljs-comment">//设置居中显示</span><br>        jf.setLocationRelativeTo(<span class="hljs-keyword">null</span>);<br>        <span class="hljs-comment">//设置进程退出的方法，若不设置点右上角X不会关闭程序</span><br>        jf.setDefaultCloseOperation(<span class="hljs-number">3</span>);<br>        <span class="hljs-comment">//流式布局管理器</span><br>        FlowLayout flow = <span class="hljs-keyword">new</span> FlowLayout();<br>        jf.setLayout(flow);<br>        <span class="hljs-comment">//设置按钮并添加</span><br>        JButton jbu1 = <span class="hljs-keyword">new</span> JButton(<span class="hljs-string">&quot;直线&quot;</span>);<br>        jf.add(jbu1);<br>        JButton jbu2 = <span class="hljs-keyword">new</span> JButton(<span class="hljs-string">&quot;矩形&quot;</span>);<br>        jf.add(jbu2);<br>        JButton jbu3 = <span class="hljs-keyword">new</span> JButton(<span class="hljs-string">&quot;椭圆&quot;</span>);<br>        jf.add(jbu3);<br>        JButton jbu4 = <span class="hljs-keyword">new</span> JButton(<span class="hljs-string">&quot;铅笔&quot;</span>);<br>        jf.add(jbu4);<br>        JButton jbu5 = <span class="hljs-keyword">new</span> JButton(<span class="hljs-string">&quot;自然&quot;</span>);<br>        jf.add(jbu5);<br>        JButton jbu6 = <span class="hljs-keyword">new</span> JButton(<span class="hljs-string">&quot;谢尔宾斯基三角形&quot;</span>);<br>        jf.add(jbu6);<br>        JButton jbu7 = <span class="hljs-keyword">new</span> JButton(<span class="hljs-string">&quot;谢尔宾斯基地毯&quot;</span>);<br>        jf.add(jbu7);<br>        JButton jbu8 = <span class="hljs-keyword">new</span> JButton(<span class="hljs-string">&quot;清空&quot;</span>);<br>        jf.add(jbu8);<br>        <span class="hljs-comment">//设置可见</span><br>        jf.setVisible(<span class="hljs-keyword">true</span>);<br>        <span class="hljs-comment">//获取画笔：图像显示在哪个组件上，画笔就该从该组件上获取</span><br>        <span class="hljs-comment">//从窗体上获取画笔，一定要在窗体显示可见之后</span><br>        Graphics g = jf.getGraphics();<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">         事件监听器</span><br><span class="hljs-comment">         a.事件源：当前动作所发生的组件</span><br><span class="hljs-comment">         b.确定监听器方法：鼠标监听器方法</span><br><span class="hljs-comment">         c.绑定事件处理类</span><br><span class="hljs-comment">         */</span><br>        DrawMouse mouse = <span class="hljs-keyword">new</span> DrawMouse();<br>        <span class="hljs-comment">//匿名内部类</span><br>        <span class="hljs-comment">//给窗体添加鼠标监听器方法</span><br>        jf.addMouseListener(mouse);<br>        <span class="hljs-comment">//拖动监听器</span><br>        jf.addMouseMotionListener(mouse);<br>        <span class="hljs-comment">//给按钮添加动作监听器</span><br>        jbu1.addActionListener(mouse);<br>        jbu2.addActionListener(mouse);<br>        jbu3.addActionListener(mouse);<br>        jbu4.addActionListener(mouse);<br>        jbu5.addActionListener(mouse);<br>        jbu6.addActionListener(mouse);<br>        jbu7.addActionListener(mouse);<br>        jbu8.addActionListener(mouse);<br>        <span class="hljs-comment">//把画笔对象传递给DrawMouse类</span><br>        mouse.g = g;<br>        <span class="hljs-comment">//把窗体对象传递给DrawMouse类</span><br>        mouse.jf = jf;<br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure><p>DrawMouse.class</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wh.drawPixel0519;<br><br><span class="hljs-keyword">import</span> java.awt.Graphics;<br><br><span class="hljs-keyword">import</span> java.awt.event.*;<br><br><span class="hljs-keyword">import</span> java.util.Random;<br><br><span class="hljs-keyword">import</span> javax.swing.*;<br><br><span class="hljs-comment">//事件处理类</span><br><span class="hljs-comment">//实现接口一定要重写接口中所有的抽象方法</span><br><span class="hljs-comment">//实现(继承)接口：public class 子类 implements 接口, 接口 &#123;&#125;</span><br><span class="hljs-comment">//MouserListener中需要重写mouseClicked、mousePressed、mouseReleased、mouseEntered、mouseExited抽象方法</span><br><span class="hljs-comment">//ActionListener中需要重写actionPerformed抽象方法</span><br><span class="hljs-comment">//MouseMotionListener需要重写mouseDragged、mouseMoved抽象方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DrawMouse</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">MouseListener</span>, <span class="hljs-title">ActionListener</span>, <span class="hljs-title">MouseMotionListener</span> </span>&#123;<br>    <span class="hljs-comment">//保存传递过来的画笔对象</span><br>    <span class="hljs-keyword">public</span> Graphics g;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> x1, y1, x2, y2;<br>    <span class="hljs-keyword">public</span> String name;<br>    <span class="hljs-keyword">public</span> JFrame jf;<br>    <span class="hljs-keyword">int</span> n = <span class="hljs-number">10</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">actionPerformed</span><span class="hljs-params">(ActionEvent e)</span> </span>&#123;<br>        <span class="hljs-comment">//获取当前的事件源：e.getSource() == jbu</span><br>        <span class="hljs-comment">//获取当前事件源上的内容</span><br>        name = e.getActionCommand();<br>        System.out.println(<span class="hljs-string">&quot;点击按钮：&quot;</span> + name);<br>        <span class="hljs-keyword">if</span> (name == <span class="hljs-string">&quot;清空&quot;</span>) &#123;<br>            jf.repaint();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//自然</span><br>    Random rand = <span class="hljs-keyword">new</span> Random();<br>    <span class="hljs-keyword">int</span> ax = rand.nextInt(<span class="hljs-number">801</span>);<br>    <span class="hljs-keyword">int</span> ay = rand.nextInt(<span class="hljs-number">801</span>);<br>    <span class="hljs-keyword">int</span> bx = rand.nextInt(<span class="hljs-number">801</span>);<br>    <span class="hljs-keyword">int</span> by = rand.nextInt(<span class="hljs-number">801</span>);<br>    <span class="hljs-keyword">int</span> cx = rand.nextInt(<span class="hljs-number">801</span>);<br>    <span class="hljs-keyword">int</span> cy = rand.nextInt(<span class="hljs-number">801</span>);<br>    <span class="hljs-keyword">int</span> px = rand.nextInt(<span class="hljs-number">801</span>);<br>    <span class="hljs-keyword">int</span> py = rand.nextInt(<span class="hljs-number">801</span>);<br>    <span class="hljs-keyword">int</span> ran;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">mouseClicked</span><span class="hljs-params">(MouseEvent e)</span> </span>&#123;<br><br>        <span class="hljs-keyword">if</span> (name == <span class="hljs-string">&quot;自然&quot;</span>) &#123;<br><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>                ran = rand.nextInt(<span class="hljs-number">3</span>);<br><br>                <span class="hljs-keyword">switch</span> (ran) &#123;<br>                    <span class="hljs-comment">//A</span><br>                    <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br>                        px = (ax + px) / <span class="hljs-number">2</span>;<br>                        py = (ay + py) / <span class="hljs-number">2</span>;<br>                        g.drawLine(px, py, px, py);<br>                        <span class="hljs-keyword">break</span>;<br>                    <span class="hljs-comment">//B</span><br>                    <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>                        px = (bx + px) / <span class="hljs-number">2</span>;<br>                        py = (by + py) / <span class="hljs-number">2</span>;<br>                        g.drawLine(px, py, px, py);<br>                        <span class="hljs-keyword">break</span>;<br>                    <span class="hljs-comment">//C</span><br>                    <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>                        px = (cx + px) / <span class="hljs-number">2</span>;<br>                        py = (cy + py) / <span class="hljs-number">2</span>;<br>                        g.drawLine(px, py, px, py);<br>                        <span class="hljs-keyword">break</span>;<br>                &#125;<br><br>            &#125;<br><br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (name == <span class="hljs-string">&quot;谢尔宾斯基三角形&quot;</span>) &#123;<br>            drawTriangle(g,<span class="hljs-number">100</span>, (<span class="hljs-keyword">int</span>)(<span class="hljs-number">400</span> + Math.sqrt(<span class="hljs-number">3</span>) * <span class="hljs-number">150</span>), <span class="hljs-number">600</span>);<br>            sierpinskiTriangle(g,<span class="hljs-number">100</span>, (<span class="hljs-keyword">int</span>)(<span class="hljs-number">400</span> + Math.sqrt(<span class="hljs-number">3</span>) * <span class="hljs-number">150</span>), <span class="hljs-number">600</span>, <span class="hljs-number">10</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (name == <span class="hljs-string">&quot;谢尔宾斯基地毯&quot;</span>) &#123;<br>            g.drawRect(<span class="hljs-number">100</span>, <span class="hljs-number">100</span>, <span class="hljs-number">600</span>, <span class="hljs-number">600</span>);<br>            sierpinskiCarpet(g, <span class="hljs-number">100</span>, <span class="hljs-number">100</span>, <span class="hljs-number">600</span>, <span class="hljs-number">5</span>);<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">mousePressed</span><span class="hljs-params">(MouseEvent e)</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;按下&quot;</span>);<br>        <span class="hljs-comment">//获取当前坐标</span><br>        x1 = e.getX();<br>        y1 = e.getY();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">mouseReleased</span><span class="hljs-params">(MouseEvent e)</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;释放&quot;</span>);<br>        <span class="hljs-comment">//获取当前坐标</span><br>        <span class="hljs-keyword">int</span> x2 = e.getX();<br>        <span class="hljs-keyword">int</span> y2 = e.getY();<br><br>        <span class="hljs-keyword">switch</span> (name) &#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;直线&quot;</span>:<br>                g.drawLine(x1, y1, x2, y2);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;矩形&quot;</span>:<br><br>                <span class="hljs-keyword">if</span> (x2 &gt; x1 &amp;&amp; y2 &gt; y1) &#123;<br>                    g.drawRect(x1, y1, x2 - x1, y2 - y1);<br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (x2 &gt; x1 &amp;&amp; y2 &lt; y1) &#123;<br>                    g.drawRect(x1, y2, x2 - x1, y1 - y2);<br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (x2 &lt; x1 &amp;&amp; y2 &gt; y1) &#123;<br>                    g.drawRect(x2, y1, x1 - x2, y2 - y1);<br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (x2 &lt; x1 &amp;&amp; y2 &lt; y1) &#123;<br>                    g.drawRect(x2, y2, x1 - x2, y1 - y2);<br>                &#125;<br><br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;椭圆&quot;</span>:<br><br>                <span class="hljs-keyword">if</span> (x2 &gt; x1 &amp;&amp; y2 &gt; y1) &#123;<br>                    g.drawOval(x1, y1, x2 - x1, y2 - y1);<br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (x2 &gt; x1 &amp;&amp; y2 &lt; y1) &#123;<br>                    g.drawOval(x1, y2, x2 - x1, y1 - y2);<br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (x2 &lt; x1 &amp;&amp; y2 &gt; y1) &#123;<br>                    g.drawOval(x2, y1, x1 - x2, y2 - y1);<br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (x2 &lt; x1 &amp;&amp; y2 &lt; y1) &#123;<br>                    g.drawOval(x2, y2, x1 - x2, y1 - y2);<br>                &#125;<br><br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">default</span>:<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">mouseEntered</span><span class="hljs-params">(MouseEvent e)</span> </span>&#123;<br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">mouseExited</span><span class="hljs-params">(MouseEvent e)</span> </span>&#123;<br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">mouseDragged</span><span class="hljs-params">(MouseEvent e)</span> </span>&#123;<br><br>        <span class="hljs-comment">//一段曲线可以被分解为许多小段的直线连接在一起，因此，我们画曲线的方法就是画出线段并不断替换它的末端坐标</span><br>        <span class="hljs-keyword">if</span> (name == <span class="hljs-string">&quot;铅笔&quot;</span>) &#123;<br>            x2 = e.getX();<br>            y2 = e.getY();<br>            g.drawLine(x1, y1, x2 ,y2);<br>            x1 = x2;<br>            y1 = y2;<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">mouseMoved</span><span class="hljs-params">(MouseEvent e)</span> </span>&#123;<br><br>    &#125;<br><br>    <span class="hljs-comment">//画最大的等边三角形，(x,y)为左下角顶点，d为边长</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">drawTriangle</span><span class="hljs-params">(Graphics g, <span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y, <span class="hljs-keyword">int</span> d)</span> </span>&#123;<br>        g.drawLine(x, y, x + d, y);<br>        g.drawLine(x + d, y, x + d / <span class="hljs-number">2</span>, (<span class="hljs-keyword">int</span>)(y - Math.sqrt(<span class="hljs-number">3</span>) * d / <span class="hljs-number">2</span>));<br>        g.drawLine(x + d / <span class="hljs-number">2</span>, (<span class="hljs-keyword">int</span>)(y - Math.sqrt(<span class="hljs-number">3</span>) * d / <span class="hljs-number">2</span>), x, y);<br>    &#125;<br><br>    <span class="hljs-comment">//谢尔宾斯基三角形</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sierpinskiTriangle</span><span class="hljs-params">(Graphics g, <span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y, <span class="hljs-keyword">int</span> d, <span class="hljs-keyword">int</span> n)</span> </span>&#123;<br>        n--;<br>        d = d &gt;&gt; <span class="hljs-number">1</span>;<br>        x = x + d;<br>        <span class="hljs-comment">//画倒三角</span><br>        g.drawLine(x, y, x + (d &gt;&gt; <span class="hljs-number">1</span>), (<span class="hljs-keyword">int</span>)(y - Math.sqrt(<span class="hljs-number">3</span>) * d / <span class="hljs-number">2</span>));<br>        g.drawLine(x + (d &gt;&gt; <span class="hljs-number">1</span>), (<span class="hljs-keyword">int</span>)(y - Math.sqrt(<span class="hljs-number">3</span>) * d / <span class="hljs-number">2</span>), x - (d &gt;&gt; <span class="hljs-number">1</span>), (<span class="hljs-keyword">int</span>)(y - Math.sqrt(<span class="hljs-number">3</span>) * d / <span class="hljs-number">2</span>));<br>        g.drawLine(x - (d &gt;&gt; <span class="hljs-number">1</span>), (<span class="hljs-keyword">int</span>)(y - Math.sqrt(<span class="hljs-number">3</span>) * d / <span class="hljs-number">2</span>), x, y);<br><br>        <span class="hljs-keyword">if</span> (n &lt;= <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        <span class="hljs-comment">//递归画倒小三角</span><br>        sierpinskiTriangle(g, x, y, d, n);<br>        sierpinskiTriangle(g, x - d, y, d, n);<br>        sierpinskiTriangle(g, x - (d &gt;&gt; <span class="hljs-number">1</span>), (<span class="hljs-keyword">int</span>)(y - Math.sqrt(<span class="hljs-number">3</span>) * d / <span class="hljs-number">2</span>), d, n);<br>    &#125;<br><br>    <span class="hljs-comment">//谢尔宾斯基地毯</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sierpinskiCarpet</span><span class="hljs-params">(Graphics g, <span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y, <span class="hljs-keyword">int</span> d, <span class="hljs-keyword">int</span> n)</span> </span>&#123;<br><br>        <span class="hljs-keyword">if</span> (n &lt;= <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        n--;<br>        g.fillRect(x + d / <span class="hljs-number">3</span>, y + d / <span class="hljs-number">3</span>, d / <span class="hljs-number">3</span>, d / <span class="hljs-number">3</span>);<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++) &#123;<br><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">3</span>; j++) &#123;<br>                sierpinskiCarpet(g, x + j * d / <span class="hljs-number">3</span>, y + i * d / <span class="hljs-number">3</span>, d / <span class="hljs-number">3</span>, n);<br>            &#125;<br><br>        &#125;<br><br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java项目</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>项目</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>牛客网华为机试HJ12.字符串反转</title>
    <link href="/2021/04/23/%E5%8D%8E%E4%B8%BA%E6%9C%BA%E8%AF%95HJ12/"/>
    <url>/2021/04/23/%E5%8D%8E%E4%B8%BA%E6%9C%BA%E8%AF%95HJ12/</url>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * HJ12.字符串反转</span><br><span class="hljs-comment"> * 接受一个只包含小写字母的字符串，然后输出该字符串反转后的字符串。（字符串长度不超过1000）</span><br><span class="hljs-comment"> * 输入描述:</span><br><span class="hljs-comment"> * 输入一行，为一个只包含小写字母的字符串。</span><br><span class="hljs-comment"> * 输出描述:</span><br><span class="hljs-comment"> * 输出该字符串反转后的字符串。</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 示例1</span><br><span class="hljs-comment"> * 输入</span><br><span class="hljs-comment"> * abcd</span><br><span class="hljs-comment"> * 输出</span><br><span class="hljs-comment"> * dcba</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NCHJ12</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Scanner scan = <span class="hljs-keyword">new</span> Scanner(System.in);<br>        StringBuilder str = <span class="hljs-keyword">new</span> StringBuilder(scan.next());<br>        System.out.print(str.reverse());<br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>牛客网华为机试题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>牛客网</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>牛客网华为机试HJ15.求int型数据在内存中存储时1的个数</title>
    <link href="/2021/04/23/%E5%8D%8E%E4%B8%BA%E6%9C%BA%E8%AF%95HJ15/"/>
    <url>/2021/04/23/%E5%8D%8E%E4%B8%BA%E6%9C%BA%E8%AF%95HJ15/</url>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * HJ15.求int型数据在内存中存储时1的个数</span><br><span class="hljs-comment"> * 输入一个int型的正整数，计算出该int型数据在内存中存储时1的个数。</span><br><span class="hljs-comment"> * 输入描述:</span><br><span class="hljs-comment"> *  输入一个整数（int类型）</span><br><span class="hljs-comment"> * 输出描述:</span><br><span class="hljs-comment"> *  这个数转换成2进制后，输出1的个数</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 示例1</span><br><span class="hljs-comment"> * 输入</span><br><span class="hljs-comment"> * 5</span><br><span class="hljs-comment"> * 输出</span><br><span class="hljs-comment"> * 2</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NCHJ15</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] agrs)</span> </span>&#123;<br>        Scanner scan = <span class="hljs-keyword">new</span> Scanner(System.in);<br>        <span class="hljs-keyword">int</span> n = scan.nextInt();<br>        <span class="hljs-keyword">int</span> count = <span class="hljs-number">0</span>;<br><br>        <span class="hljs-keyword">while</span> (n != <span class="hljs-number">0</span>) &#123;<br>            n = n &amp; (n - <span class="hljs-number">1</span>);<br>            count++;<br>        &#125;<br><br>        System.out.print(count);<br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>牛客网华为机试题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>牛客网</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>牛客网华为机试HJ11.数字颠倒</title>
    <link href="/2021/04/23/%E5%8D%8E%E4%B8%BA%E6%9C%BA%E8%AF%95HJ11/"/>
    <url>/2021/04/23/%E5%8D%8E%E4%B8%BA%E6%9C%BA%E8%AF%95HJ11/</url>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * HJ11.数字颠倒</span><br><span class="hljs-comment"> * 输入一个整数，将这个整数以字符串的形式逆序输出</span><br><span class="hljs-comment"> * 程序不考虑负数的情况，若数字含有0，则逆序形式也含有0，如输入为100，则输出为001</span><br><span class="hljs-comment"> * 输入描述:</span><br><span class="hljs-comment"> * 输入一个int整数</span><br><span class="hljs-comment"> * 输出描述:</span><br><span class="hljs-comment"> * 将这个整数以字符串的形式逆序输出</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 示例1</span><br><span class="hljs-comment"> * 输入</span><br><span class="hljs-comment"> * 1516000</span><br><span class="hljs-comment"> * 输出</span><br><span class="hljs-comment"> * 0006151</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NCHJ11</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Scanner scan = <span class="hljs-keyword">new</span> Scanner(System.in);<br>        StringBuilder num = <span class="hljs-keyword">new</span> StringBuilder(scan.next());<br>        System.out.print(num.reverse());<br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>牛客网华为机试题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>牛客网</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>牛客网华为机试HJ5.进制转换</title>
    <link href="/2021/04/23/%E5%8D%8E%E4%B8%BA%E6%9C%BA%E8%AF%95HJ5/"/>
    <url>/2021/04/23/%E5%8D%8E%E4%B8%BA%E6%9C%BA%E8%AF%95HJ5/</url>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">**<br> * HJ5.进制转换<br> * 写出一个程序，接受一个十六进制的数，输出该数值的十进制表示。<br> * 输入描述:<br> * 输入一个十六进制的数值字符串。<br> * 注意：一个用例会同时有多组输入数据，请参考帖子https:<span class="hljs-comment">//www.nowcoder.com/discuss/276处理多组输入的问题。</span><br> * 输出描述:<br> * 输出该数值的十进制字符串。不同组的测试用例用\n隔开。<br> *<br> * 示例<span class="hljs-number">1</span><br> * 输入<br> * <span class="hljs-number">0xA</span><br> * <span class="hljs-number">0xAA</span><br> * 输出<br> * <span class="hljs-number">10</span><br> * <span class="hljs-number">170</span><br> */<br><span class="hljs-keyword">import</span> java.util.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NCHJ5</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Scanner scan = <span class="hljs-keyword">new</span> Scanner(System.in);<br>        <span class="hljs-keyword">while</span> (scan.hasNext()) &#123;<br>            String num = scan.next();<br>            System.out.println(Integer.decode(num));<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>牛客网华为机试题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>牛客网</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>牛客网华为机试HJ6.质数因子</title>
    <link href="/2021/04/23/%E5%8D%8E%E4%B8%BA%E6%9C%BA%E8%AF%95HJ6/"/>
    <url>/2021/04/23/%E5%8D%8E%E4%B8%BA%E6%9C%BA%E8%AF%95HJ6/</url>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * HJ6.质数因子</span><br><span class="hljs-comment"> * 功能:输入一个正整数，按照从小到大的顺序输出它的所有质因子（重复的也要列举）（如180的质因子为2 2 3 3 5 ）</span><br><span class="hljs-comment"> * 最后一个数后面也要有空格</span><br><span class="hljs-comment"> * 输入描述:</span><br><span class="hljs-comment"> * 输入一个long型整数</span><br><span class="hljs-comment"> * 输出描述:</span><br><span class="hljs-comment"> * 按照从小到大的顺序输出它的所有质数的因子，以空格隔开。最后一个数后面也要有空格。</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 示例1</span><br><span class="hljs-comment"> * 输入</span><br><span class="hljs-comment"> * 180</span><br><span class="hljs-comment"> * 输出</span><br><span class="hljs-comment"> * 2 2 3 3 5</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NCHJ6</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Scanner scan = <span class="hljs-keyword">new</span> Scanner(System.in);<br>        <span class="hljs-keyword">long</span> num = scan.nextLong();<br>        <span class="hljs-keyword">long</span> k = (<span class="hljs-keyword">long</span>)Math.sqrt(num);<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">long</span> i = <span class="hljs-number">2</span>; i &lt;= k; i++) &#123;<br><br>            <span class="hljs-keyword">while</span> (num % i == <span class="hljs-number">0</span>) &#123;<br>                System.out.print(i + <span class="hljs-string">&quot; &quot;</span>);<br>                num = num / i;<br>            &#125;<br><br>        &#125;<br><br>        System.out.print(num == <span class="hljs-number">1</span> ? <span class="hljs-string">&quot;&quot;</span> : num + <span class="hljs-string">&quot; &quot;</span>);<br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>牛客网华为机试题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>牛客网</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>牛客网华为机试HJ7.取近似值</title>
    <link href="/2021/04/23/%E5%8D%8E%E4%B8%BA%E6%9C%BA%E8%AF%95HJ7/"/>
    <url>/2021/04/23/%E5%8D%8E%E4%B8%BA%E6%9C%BA%E8%AF%95HJ7/</url>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * HJ7.取近似值</span><br><span class="hljs-comment"> * 写出一个程序，接受一个正浮点数值，输出该数值的近似整数值。</span><br><span class="hljs-comment"> * 如果小数点后数值大于等于5,向上取整；小于5，则向下取整。</span><br><span class="hljs-comment"> * 输入描述:</span><br><span class="hljs-comment"> * 输入一个正浮点数值</span><br><span class="hljs-comment"> * 输出描述:</span><br><span class="hljs-comment"> * 输出该数值的近似整数值</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 示例1</span><br><span class="hljs-comment"> * 输入</span><br><span class="hljs-comment"> * 5.5</span><br><span class="hljs-comment"> * 输出</span><br><span class="hljs-comment"> * 6</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NCHJ7</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Scanner scan = <span class="hljs-keyword">new</span> Scanner(System.in);<br>        <span class="hljs-keyword">double</span> num = scan.nextDouble();<br>        System.out.println((<span class="hljs-keyword">int</span>)(num - Math.floor(num) &gt;= <span class="hljs-number">0.5</span> ? Math.ceil(num) : Math.floor(num)));<br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>牛客网华为机试题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>牛客网</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>牛客网华为机试HJ84.统计大写字母个数</title>
    <link href="/2021/04/23/%E5%8D%8E%E4%B8%BA%E6%9C%BA%E8%AF%95HJ84/"/>
    <url>/2021/04/23/%E5%8D%8E%E4%B8%BA%E6%9C%BA%E8%AF%95HJ84/</url>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * HJ84.统计大写字母个数</span><br><span class="hljs-comment"> * 找出给定字符串中大写字符(即&#x27;A&#x27;-&#x27;Z&#x27;)的个数。</span><br><span class="hljs-comment"> * 输入描述:</span><br><span class="hljs-comment"> * 本题含有多组样例输入</span><br><span class="hljs-comment"> * 对于每组样例，输入一行，代表待统计的字符串</span><br><span class="hljs-comment"> * 输出描述:</span><br><span class="hljs-comment"> * 对于每组样例，输出一个整数，代表字符串中大写字母的个数</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 示例1</span><br><span class="hljs-comment"> * 输入</span><br><span class="hljs-comment"> * add123#$%#%#O</span><br><span class="hljs-comment"> * 150175017(&amp;^%&amp;$vabovbao</span><br><span class="hljs-comment"> * 输出</span><br><span class="hljs-comment"> * 1</span><br><span class="hljs-comment"> * 0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NCHJ84</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Scanner scan = <span class="hljs-keyword">new</span> Scanner(System.in);<br><br>        <span class="hljs-keyword">while</span> (scan.hasNext()) &#123;<br>            String str = scan.nextLine();<br>            <span class="hljs-keyword">int</span> c = <span class="hljs-number">0</span>;<br><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i= <span class="hljs-number">0</span>; i &lt; str.length(); i++) &#123;<br><br>                <span class="hljs-keyword">if</span> (Character.isUpperCase(str.charAt(i))) &#123;<br>                    c++;<br>                &#125;<br><br>            &#125;<br><br>            System.out.println(c);<br>        &#125;<br><br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>牛客网华为机试题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>牛客网</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>牛客网华为机试HJ62.查找输入整数二进制中1的个数</title>
    <link href="/2021/04/23/%E5%8D%8E%E4%B8%BA%E6%9C%BA%E8%AF%95HJ62/"/>
    <url>/2021/04/23/%E5%8D%8E%E4%B8%BA%E6%9C%BA%E8%AF%95HJ62/</url>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * HJ62.查找输入整数二进制中1的个数</span><br><span class="hljs-comment"> * 输入一个正整数，计算它在二进制下的1的个数。</span><br><span class="hljs-comment"> * 注意多组输入输出！！！！！！</span><br><span class="hljs-comment"> * 输入描述:</span><br><span class="hljs-comment"> * 输入一个整数</span><br><span class="hljs-comment"> * 输出描述:</span><br><span class="hljs-comment"> * 计算整数二进制中1的个数</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 示例1</span><br><span class="hljs-comment"> * 输入</span><br><span class="hljs-comment"> * 5</span><br><span class="hljs-comment"> * 输出</span><br><span class="hljs-comment"> * 2</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 说明</span><br><span class="hljs-comment"> * 5的二进制表示是101，有2个1</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NCHJ62</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] agrs)</span> </span>&#123;<br>        Scanner scan = <span class="hljs-keyword">new</span> Scanner(System.in);<br>        <span class="hljs-keyword">while</span> (scan.hasNext()) &#123;<br>            <span class="hljs-keyword">int</span> n = scan.nextInt();<br>            <span class="hljs-keyword">int</span> count = <span class="hljs-number">0</span>;<br><br>            <span class="hljs-keyword">while</span> (n != <span class="hljs-number">0</span>) &#123;<br>                n = n &amp; (n - <span class="hljs-number">1</span>);<br>                count++;<br>            &#125;<br><br>            System.out.println(count);<br>        &#125;<br><br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>牛客网华为机试题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>牛客网</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>牛客网华为机试HJ76.尼科彻斯定理</title>
    <link href="/2021/04/23/%E5%8D%8E%E4%B8%BA%E6%9C%BA%E8%AF%95HJ76/"/>
    <url>/2021/04/23/%E5%8D%8E%E4%B8%BA%E6%9C%BA%E8%AF%95HJ76/</url>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * HJ76.尼科彻斯定理</span><br><span class="hljs-comment"> * 验证尼科彻斯定理，即：任何一个整数m的立方都可以写成m个连续奇数之和。</span><br><span class="hljs-comment"> * 例如：</span><br><span class="hljs-comment"> * 1^3=1</span><br><span class="hljs-comment"> * 2^3=3+5</span><br><span class="hljs-comment"> * 3^3=7+9+11</span><br><span class="hljs-comment"> * 4^3=13+15+17+19</span><br><span class="hljs-comment"> * 输入一个正整数m（m≤100），将m的立方写成m个连续奇数之和的形式输出。</span><br><span class="hljs-comment"> * 本题含有多组输入数据。</span><br><span class="hljs-comment"> * 输入描述:</span><br><span class="hljs-comment"> * 输入一个int整数</span><br><span class="hljs-comment"> * 输出描述:</span><br><span class="hljs-comment"> * 输出分解后的string</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 示例1</span><br><span class="hljs-comment"> * 输入</span><br><span class="hljs-comment"> * 6</span><br><span class="hljs-comment"> * 输出</span><br><span class="hljs-comment"> * 31+33+35+37+39+41</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NCHJ76</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Scanner scan = <span class="hljs-keyword">new</span> Scanner(System.in);<br><br>        <span class="hljs-keyword">while</span> (scan.hasNext()) &#123;<br>            <span class="hljs-keyword">int</span> m = scan.nextInt();<br>            <span class="hljs-keyword">int</span> first = (<span class="hljs-keyword">int</span>)Math.pow(m,<span class="hljs-number">2</span>) - m + <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;<br><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; m - <span class="hljs-number">1</span>; i = i + <span class="hljs-number">2</span>, j++) &#123;<br>                System.out.print(first + i + <span class="hljs-string">&quot;+&quot;</span>);<br>            &#125;<br><br>            System.out.println(first + i);<br>        &#125;<br><br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>牛客网华为机试题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>牛客网</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>牛客网华为机试HJ1.字符串最后一个单词的长度</title>
    <link href="/2021/04/22/%E5%8D%8E%E4%B8%BA%E6%9C%BA%E8%AF%95HJ1/"/>
    <url>/2021/04/22/%E5%8D%8E%E4%B8%BA%E6%9C%BA%E8%AF%95HJ1/</url>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * HJ1.字符串最后一个单词的长度</span><br><span class="hljs-comment"> * 计算字符串最后一个单词的长度，单词以空格隔开。</span><br><span class="hljs-comment"> * 输入描述:</span><br><span class="hljs-comment"> * 输入一行，代表要计算的字符串，非空，长度小于5000。</span><br><span class="hljs-comment"> * 输出描述:</span><br><span class="hljs-comment"> * 输出一个整数，表示输入字符串最后一个单词的长度。</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 示例1</span><br><span class="hljs-comment"> * 输入</span><br><span class="hljs-comment"> * hello nowcoder</span><br><span class="hljs-comment"> * 输出</span><br><span class="hljs-comment"> * 8</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Scanner scan = <span class="hljs-keyword">new</span> Scanner(System.in);<br>        String oldStr = scan.nextLine();<br>        String[] newStrArray = oldStr.split(<span class="hljs-string">&quot; &quot;</span>);<br>        System.out.print(newStrArray[newStrArray.length - <span class="hljs-number">1</span>].length());<br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>牛客网华为机试题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>牛客网</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>牛客网华为机试HJ2.计算字符个数</title>
    <link href="/2021/04/22/%E5%8D%8E%E4%B8%BA%E6%9C%BA%E8%AF%95HJ2/"/>
    <url>/2021/04/22/%E5%8D%8E%E4%B8%BA%E6%9C%BA%E8%AF%95HJ2/</url>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * HJ2.计算字符个数</span><br><span class="hljs-comment"> * 写出一个程序，接受一个由字母、数字和空格组成的字符串，和一个字母，</span><br><span class="hljs-comment"> * 然后输出输入字符串中该字母的出现次数。不区分大小写。</span><br><span class="hljs-comment"> * 输入描述:</span><br><span class="hljs-comment"> * 第一行输入一个由字母和数字以及空格组成的字符串，第二行输入一个字母。</span><br><span class="hljs-comment"> * 输出描述:</span><br><span class="hljs-comment"> * 输出输入字符串中含有该字符的个数。</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 示例1</span><br><span class="hljs-comment"> * 输入</span><br><span class="hljs-comment"> * ABCabc</span><br><span class="hljs-comment"> * A</span><br><span class="hljs-comment"> * 输出</span><br><span class="hljs-comment"> * 2</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NCHJ2</span></span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] agrs)</span> </span>&#123;<br>        Scanner scan = <span class="hljs-keyword">new</span> Scanner(System.in);<br>        String str = scan.nextLine().toLowerCase();<br>        String c = scan.next().toLowerCase();<br>        System.out.print(str.length() - str.replaceAll(c, <span class="hljs-string">&quot;&quot;</span>).length());<br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>牛客网华为机试题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>牛客网</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>牛客网华为机试HJ3.明明的随机数</title>
    <link href="/2021/04/22/%E5%8D%8E%E4%B8%BA%E6%9C%BA%E8%AF%95HJ3/"/>
    <url>/2021/04/22/%E5%8D%8E%E4%B8%BA%E6%9C%BA%E8%AF%95HJ3/</url>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * HJ3.明明的随机数</span><br><span class="hljs-comment"> * 明明想在学校中请一些同学一起做一项问卷调查，为了实验的客观性，</span><br><span class="hljs-comment"> * 他先用计算机生成了N个1到1000之间的随机整数（N≤1000），</span><br><span class="hljs-comment"> * 对于其中重复的数字，只保留一个，把其余相同的数去掉，不同的数对应着不同的学生的学号。</span><br><span class="hljs-comment"> * 然后再把这些数从小到大排序，按照排好的顺序去找同学做调查。</span><br><span class="hljs-comment"> * 请你协助明明完成“去重”与“排序”的工作</span><br><span class="hljs-comment"> * (同一个测试用例里可能会有多组数据(用于不同的调查)，希望大家能正确处理)。</span><br><span class="hljs-comment"> * 注：测试用例保证输入参数的正确性，答题者无需验证。测试用例不止一组。</span><br><span class="hljs-comment"> * 当没有新的输入时，说明输入结束。</span><br><span class="hljs-comment"> * 输入描述:</span><br><span class="hljs-comment"> * 注意：输入可能有多组数据(用于不同的调查)。</span><br><span class="hljs-comment"> * 每组数据都包括多行，第一行先输入随机整数的个数N，接下来的N行再输入相应个数的整数。</span><br><span class="hljs-comment"> * 具体格式请看下面的&quot;示例&quot;。</span><br><span class="hljs-comment"> * 输出描述:</span><br><span class="hljs-comment"> * 返回多行，处理后的结果</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 示例1</span><br><span class="hljs-comment"> * 输入</span><br><span class="hljs-comment"> * 3</span><br><span class="hljs-comment"> * 2</span><br><span class="hljs-comment"> * 2</span><br><span class="hljs-comment"> * 1</span><br><span class="hljs-comment"> * 11</span><br><span class="hljs-comment"> * 10</span><br><span class="hljs-comment"> * 20</span><br><span class="hljs-comment"> * 40</span><br><span class="hljs-comment"> * 32</span><br><span class="hljs-comment"> * 67</span><br><span class="hljs-comment"> * 40</span><br><span class="hljs-comment"> * 20</span><br><span class="hljs-comment"> * 89</span><br><span class="hljs-comment"> * 300</span><br><span class="hljs-comment"> * 400</span><br><span class="hljs-comment"> * 15</span><br><span class="hljs-comment"> * 输出</span><br><span class="hljs-comment"> * 1</span><br><span class="hljs-comment"> * 2</span><br><span class="hljs-comment"> * 10</span><br><span class="hljs-comment"> * 15</span><br><span class="hljs-comment"> * 20</span><br><span class="hljs-comment"> * 32</span><br><span class="hljs-comment"> * 40</span><br><span class="hljs-comment"> * 67</span><br><span class="hljs-comment"> * 89</span><br><span class="hljs-comment"> * 300</span><br><span class="hljs-comment"> * 400</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 说明</span><br><span class="hljs-comment"> * 样例输入解释：</span><br><span class="hljs-comment"> * 样例有两组测试</span><br><span class="hljs-comment"> * 第一组是3个数字，分别是：2，2，1。</span><br><span class="hljs-comment"> * 第二组是11个数字，分别是：10，20，40，32，67，40，20，89，300，400，15。</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">import</span> java.util.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NCHJ3</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Scanner scan = <span class="hljs-keyword">new</span> Scanner(System.in);<br><br>        <span class="hljs-keyword">while</span> (scan.hasNext()) &#123;<br>            <span class="hljs-keyword">int</span> n = scan.nextInt();<br>            TreeSet set = <span class="hljs-keyword">new</span> TreeSet();<br><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>                set.add(scan.nextInt());<br>            &#125;<br><br>            Iterator iterator = set.iterator();<br>            <span class="hljs-keyword">while</span> (iterator.hasNext()) &#123;<br>                System.out.println(iterator.next());<br>            &#125;<br><br>        &#125;<br><br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>牛客网华为机试题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>牛客网</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>牛客网华为机试HJ4.字符串分隔</title>
    <link href="/2021/04/22/%E5%8D%8E%E4%B8%BA%E6%9C%BA%E8%AF%95HJ4/"/>
    <url>/2021/04/22/%E5%8D%8E%E4%B8%BA%E6%9C%BA%E8%AF%95HJ4/</url>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * HJ4.字符串分隔</span><br><span class="hljs-comment"> * •连续输入字符串，请按长度为8拆分每个字符串后输出到新的字符串数组；</span><br><span class="hljs-comment"> * •长度不是8整数倍的字符串请在后面补数字0，空字符串不处理。</span><br><span class="hljs-comment"> * 输入描述:</span><br><span class="hljs-comment"> * 连续输入字符串(输入多次,每个字符串长度小于100)</span><br><span class="hljs-comment"> * 输出描述:</span><br><span class="hljs-comment"> * 输出到长度为8的新字符串数组</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 示例1</span><br><span class="hljs-comment"> * 输入</span><br><span class="hljs-comment"> * abc</span><br><span class="hljs-comment"> * 123456789</span><br><span class="hljs-comment"> * 输出</span><br><span class="hljs-comment"> * abc00000</span><br><span class="hljs-comment"> * 12345678</span><br><span class="hljs-comment"> * 90000000</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">import</span> java.util.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NCHJ4</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Scanner scan = <span class="hljs-keyword">new</span> Scanner(System.in);<br><br>        <span class="hljs-keyword">while</span> (scan.hasNext()) &#123;<br>            StringBuilder str = <span class="hljs-keyword">new</span> StringBuilder(scan.nextLine());<br><br>            <span class="hljs-keyword">if</span> (str.length() % <span class="hljs-number">8</span> != <span class="hljs-number">0</span>) &#123;<br>                str.append(<span class="hljs-string">&quot;00000000&quot;</span>);<br>            &#125;<br><br>            <span class="hljs-keyword">while</span> (str.length() &gt;= <span class="hljs-number">8</span>) &#123;<br>                System.out.println(str.substring(<span class="hljs-number">0</span>, <span class="hljs-number">8</span>));<br>                str.delete(<span class="hljs-number">0</span>, <span class="hljs-number">8</span>);<br>            &#125;<br><br>        &#125;<br><br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>牛客网华为机试题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>牛客网</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode剑指Offer27.二叉树的镜像</title>
    <link href="/2021/04/18/%E5%89%91%E6%8C%87Offer27/"/>
    <url>/2021/04/18/%E5%89%91%E6%8C%87Offer27/</url>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 剑指 Offer 27. 二叉树的镜像</span><br><span class="hljs-comment"> * 请完成一个函数，输入一个二叉树，该函数输出它的镜像。</span><br><span class="hljs-comment"> * 例如输入：</span><br><span class="hljs-comment"> *      4</span><br><span class="hljs-comment"> *    /  \</span><br><span class="hljs-comment"> *   2    7</span><br><span class="hljs-comment"> *  / \  / \</span><br><span class="hljs-comment"> * 1  3 6  9</span><br><span class="hljs-comment"> * 镜像输出：</span><br><span class="hljs-comment"> *      4</span><br><span class="hljs-comment"> *    /  \</span><br><span class="hljs-comment"> *   7    2</span><br><span class="hljs-comment"> *  / \  / \</span><br><span class="hljs-comment"> * 9  6 3   1</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 示例 1：</span><br><span class="hljs-comment"> * 输入：root = [4,2,7,1,3,6,9]</span><br><span class="hljs-comment"> * 输出：[4,7,2,9,6,3,1]</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 限制：</span><br><span class="hljs-comment"> * 0 &lt;= 节点个数 &lt;= 1000</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 思路：</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for a binary tree node.</span><br><span class="hljs-comment"> * public class TreeNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     TreeNode left;</span><br><span class="hljs-comment"> *     TreeNode right;</span><br><span class="hljs-comment"> *     TreeNode(int x) &#123; val = x; &#125;</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> TreeNode <span class="hljs-title">mirrorTree</span><span class="hljs-params">(TreeNode root)</span> </span>&#123;<br><br>        <span class="hljs-keyword">if</span> (TreeNode == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        &#125;<br><br>        TreeNode tmp = root.left;<br>        root.left = mirrorTree(root.right);<br>        root.right = mirrorTree(tmp);<br>        <span class="hljs-keyword">return</span> root;<br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>LeetCode剑指Offer题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>LeetCode</tag>
      
      <tag>剑指Offer</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode剑指Offer26.树的子结构</title>
    <link href="/2021/04/17/%E5%89%91%E6%8C%87Offer26/"/>
    <url>/2021/04/17/%E5%89%91%E6%8C%87Offer26/</url>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 剑指 Offer 26. 树的子结构</span><br><span class="hljs-comment"> * 输入两棵二叉树A和B，判断B是不是A的子结构。(约定空树不是任意一个树的子结构)</span><br><span class="hljs-comment"> * B是A的子结构， 即 A中有出现和B相同的结构和节点值。</span><br><span class="hljs-comment"> * 例如:</span><br><span class="hljs-comment"> * 给定的树 A:</span><br><span class="hljs-comment"> *     3</span><br><span class="hljs-comment"> *    / \</span><br><span class="hljs-comment"> *   4   5</span><br><span class="hljs-comment"> *  / \</span><br><span class="hljs-comment"> * 1   2</span><br><span class="hljs-comment"> * 给定的树 B：</span><br><span class="hljs-comment"> *   4</span><br><span class="hljs-comment"> *  /</span><br><span class="hljs-comment"> * 1</span><br><span class="hljs-comment"> * 返回 true，因为 B 与 A 的一个子树拥有相同的结构和节点值。</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 示例 1：</span><br><span class="hljs-comment"> * 输入：A = [1,2,3], B = [3,1]</span><br><span class="hljs-comment"> * 输出：false</span><br><span class="hljs-comment"> * 示例 2：</span><br><span class="hljs-comment"> * 输入：A = [3,4,5,1,2], B = [4,1]</span><br><span class="hljs-comment"> * 输出：true</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 限制：</span><br><span class="hljs-comment"> * 0 &lt;= 节点个数 &lt;= 10000</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 思路：https://leetcode-cn.com/problems/shu-de-zi-jie-gou-lcof/solution/mian-shi-ti-26-shu-de-zi-jie-gou-xian-xu-bian-li-p/</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for a binary tree node.</span><br><span class="hljs-comment"> * public class TreeNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     TreeNode left;</span><br><span class="hljs-comment"> *     TreeNode right;</span><br><span class="hljs-comment"> *     TreeNode(int x) &#123; val = x; &#125;</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isSubStructure</span><span class="hljs-params">(TreeNode A, TreeNode B)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> (A != <span class="hljs-keyword">null</span> &amp;&amp; B != <span class="hljs-keyword">null</span>)<br>                &amp;&amp; (recur(A, B) || isSubStructure(A.left, B) || isSubStructure(A.right, B));<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">recur</span><span class="hljs-params">(TreeNode A, TreeNode B)</span> </span>&#123;<br><br>        <span class="hljs-keyword">if</span> (B == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (A == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (A.val != B.val) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> recur(A.left, B.left) &amp;&amp; recur(A.right, B.right);<br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>LeetCode剑指Offer题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>LeetCode</tag>
      
      <tag>剑指Offer</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode剑指Offer25.合并两个排序的链表</title>
    <link href="/2021/04/16/%E5%89%91%E6%8C%87Offer25/"/>
    <url>/2021/04/16/%E5%89%91%E6%8C%87Offer25/</url>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 剑指 Offer 25. 合并两个排序的链表</span><br><span class="hljs-comment"> * 输入两个递增排序的链表，合并这两个链表并使新链表中的节点仍然是递增排序的。</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 示例1：</span><br><span class="hljs-comment"> * 输入：1-&gt;2-&gt;4, 1-&gt;3-&gt;4</span><br><span class="hljs-comment"> * 输出：1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 限制：</span><br><span class="hljs-comment"> * 0 &lt;= 链表长度 &lt;= 1000</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> * public class ListNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     ListNode next;</span><br><span class="hljs-comment"> *     ListNode(int x) &#123; val = x; &#125;</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title">mergeTwoLists</span><span class="hljs-params">(ListNode l1, ListNode l2)</span> </span>&#123;<br>        ListNode res = <span class="hljs-keyword">new</span> ListNode(<span class="hljs-number">0</span>);<br>        ListNode cur = res;<br><br>        <span class="hljs-keyword">while</span> (l1 != <span class="hljs-keyword">null</span> &amp;&amp; l2 != <span class="hljs-keyword">null</span>) &#123;<br><br>            <span class="hljs-keyword">if</span> (l1.val &lt; l2.val) &#123;<br>                cur.next = l1;<br>                l1 = l1.next;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                cur.next = l2;<br>                l2 = l2.next;<br>            &#125;<br><br>            cur = cur.next;<br>        &#125;<br><br>        cur.next = l1 == <span class="hljs-keyword">null</span> ? l2 : l1;<br>        <span class="hljs-keyword">return</span> res.next;<br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>LeetCode剑指Offer题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>LeetCode</tag>
      
      <tag>剑指Offer</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode剑指Offer24.反转链表</title>
    <link href="/2021/04/15/%E5%89%91%E6%8C%87Offer24/"/>
    <url>/2021/04/15/%E5%89%91%E6%8C%87Offer24/</url>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 剑指 Offer 24. 反转链表</span><br><span class="hljs-comment"> * 定义一个函数，输入一个链表的头节点，</span><br><span class="hljs-comment"> * 反转该链表并输出反转后链表的头节点。</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 示例:</span><br><span class="hljs-comment"> * 输入: 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL</span><br><span class="hljs-comment"> * 输出: 5-&gt;4-&gt;3-&gt;2-&gt;1-&gt;NULL</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 限制：</span><br><span class="hljs-comment"> * 0 &lt;= 节点个数 &lt;= 5000</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 思路：https://leetcode-cn.com/problems/fan-zhuan-lian-biao-lcof/solution/jian-zhi-offer-24-fan-zhuan-lian-biao-die-dai-di-2/</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> * public class ListNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     ListNode next;</span><br><span class="hljs-comment"> *     ListNode(int x) &#123; val = x; &#125;</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title">reverseList</span><span class="hljs-params">(ListNode head)</span> </span>&#123;<br>        ListNode cur = head, pre = <span class="hljs-keyword">null</span>;<br><br>        <span class="hljs-keyword">while</span>(cur != <span class="hljs-keyword">null</span>) &#123;<br>            ListNode tmp = cur.next; <span class="hljs-comment">// 暂存后继节点 cur.next</span><br>            cur.next = pre;          <span class="hljs-comment">// 修改 next 引用指向</span><br>            pre = cur;               <span class="hljs-comment">// pre 暂存 cur</span><br>            cur = tmp;               <span class="hljs-comment">// cur 访问下一节点</span><br>        &#125;<br><br>        <span class="hljs-keyword">return</span> pre;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>LeetCode剑指Offer题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>LeetCode</tag>
      
      <tag>剑指Offer</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode剑指Offer22.链表中倒数第k个节点</title>
    <link href="/2021/04/14/%E5%89%91%E6%8C%87Offer22/"/>
    <url>/2021/04/14/%E5%89%91%E6%8C%87Offer22/</url>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 剑指 Offer 22. 链表中倒数第k个节点</span><br><span class="hljs-comment"> * 输入一个链表，输出该链表中倒数第k个节点。</span><br><span class="hljs-comment"> * 为了符合大多数人的习惯，本题从1开始计数，即链表的尾节点是倒数第1个节点。</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 例如，一个链表有 6 个节点，从头节点开始，</span><br><span class="hljs-comment"> * 它们的值依次是 1、2、3、4、5、6。这个链表的倒数第 3 个节点是值为 4 的节点。</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 示例：</span><br><span class="hljs-comment"> * 给定一个链表: 1-&gt;2-&gt;3-&gt;4-&gt;5, 和 k = 2.</span><br><span class="hljs-comment"> * 返回链表 4-&gt;5.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 思路：https://leetcode-cn.com/problems/lian-biao-zhong-dao-shu-di-kge-jie-dian-lcof/solution/mian-shi-ti-22-lian-biao-zhong-dao-shu-di-kge-j-11/</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> * public class ListNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     ListNode next;</span><br><span class="hljs-comment"> *     ListNode(int x) &#123; val = x; &#125;</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title">getKthFromEnd</span><span class="hljs-params">(ListNode head, <span class="hljs-keyword">int</span> k)</span> </span>&#123;<br>        ListNode former = head;<br>        ListNode latter = head;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; k; i++) &#123;<br>            former = former.next;<br>        &#125;<br><br>        <span class="hljs-keyword">while</span> (former != <span class="hljs-keyword">null</span>) &#123;<br>            former = former.next;<br>            latter = latter.next;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> latter;<br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>LeetCode剑指Offer题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>LeetCode</tag>
      
      <tag>剑指Offer</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode剑指Offer21.调整数组顺序使奇数位于偶数前面</title>
    <link href="/2021/04/13/%E5%89%91%E6%8C%87Offer21/"/>
    <url>/2021/04/13/%E5%89%91%E6%8C%87Offer21/</url>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 剑指 Offer 21. 调整数组顺序使奇数位于偶数前面</span><br><span class="hljs-comment"> * 输入一个整数数组，实现一个函数来调整该数组中数字的顺序，</span><br><span class="hljs-comment"> * 使得所有奇数位于数组的前半部分，所有偶数位于数组的后半部分。</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 示例：</span><br><span class="hljs-comment"> * 输入：nums = [1,2,3,4]</span><br><span class="hljs-comment"> * 输出：[1,3,2,4]</span><br><span class="hljs-comment"> * 注：[3,1,2,4] 也是正确的答案之一。</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 提示：</span><br><span class="hljs-comment"> * 0 &lt;= nums.length &lt;= 50000</span><br><span class="hljs-comment"> * 1 &lt;= nums[i] &lt;= 10000</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 思路： https://leetcode-cn.com/problems/diao-zheng-shu-zu-shun-xu-shi-qi-shu-wei-yu-ou-shu-qian-mian-lcof/solution/mian-shi-ti-21-diao-zheng-shu-zu-shun-xu-shi-qi-4/</span><br><span class="hljs-comment"> */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>[] exchange(<span class="hljs-keyword">int</span>[] nums) &#123;<br>        <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> j = nums.length - <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">int</span> temp = <span class="hljs-number">0</span>;<br><br>        <span class="hljs-keyword">while</span> (i &lt; j) &#123;<br><br>            <span class="hljs-keyword">while</span> (i &lt; j &amp;&amp; (nums[i] &amp; <span class="hljs-number">1</span>) == <span class="hljs-number">1</span>) &#123;<br>                i++;<br>            &#125;<br><br>            <span class="hljs-keyword">while</span> (i &lt; j &amp;&amp; (nums[j] &amp; <span class="hljs-number">1</span>) == <span class="hljs-number">0</span>) &#123;<br>                j--;<br>            &#125;<br><br>            temp = nums[i];<br>            nums[i] = nums[j];<br>            nums[j] = temp;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> nums;<br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>LeetCode剑指Offer题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>LeetCode</tag>
      
      <tag>剑指Offer</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode剑指Offer18.删除链表的节点</title>
    <link href="/2021/04/10/%E5%89%91%E6%8C%87Offer18/"/>
    <url>/2021/04/10/%E5%89%91%E6%8C%87Offer18/</url>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 剑指 Offer 18. 删除链表的节点</span><br><span class="hljs-comment"> * 给定单向链表的头指针和一个要删除的节点的值，定义一个函数删除该节点。</span><br><span class="hljs-comment"> * 返回删除后的链表的头节点。</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 示例 1:</span><br><span class="hljs-comment"> * 输入: head = [4,5,1,9], val = 5</span><br><span class="hljs-comment"> * 输出: [4,1,9]</span><br><span class="hljs-comment"> * 解释: 给定你链表中值为5的第二个节点，那么在调用了你的函数之后，该链表应变为 4 -&gt; 1 -&gt; 9.</span><br><span class="hljs-comment"> * 示例 2:</span><br><span class="hljs-comment"> * 输入: head = [4,5,1,9], val = 1</span><br><span class="hljs-comment"> * 输出: [4,5,9]</span><br><span class="hljs-comment"> * 解释: 给定你链表中值为1的第三个节点，那么在调用了你的函数之后，该链表应变为 4 -&gt; 5 -&gt; 9.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> * public class ListNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     ListNode next;</span><br><span class="hljs-comment"> *     ListNode(int x) &#123; val = x; &#125;</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title">deleteNode</span><span class="hljs-params">(ListNode head, <span class="hljs-keyword">int</span> val)</span> </span>&#123;<br><br>        <span class="hljs-keyword">if</span> (head == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (head.val == val) &#123;<br>            <span class="hljs-keyword">return</span> head.next;<br>        &#125;<br><br>        ListNode current = head;<br>        <span class="hljs-keyword">while</span> (current.next != <span class="hljs-keyword">null</span> &amp;&amp; current.next.val != val) &#123;<br>            current = current.next;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (current.next != <span class="hljs-keyword">null</span>) &#123;<br>            current.next = current.next.next;<br>        &#125;<br>        <span class="hljs-keyword">return</span> head;<br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>LeetCode剑指Offer题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>LeetCode</tag>
      
      <tag>剑指Offer</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode剑指Offer17.打印从1到最大的n位数</title>
    <link href="/2021/04/09/%E5%89%91%E6%8C%87Offer17/"/>
    <url>/2021/04/09/%E5%89%91%E6%8C%87Offer17/</url>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 剑指 Offer 17. 打印从1到最大的n位数</span><br><span class="hljs-comment"> * 输入数字 n，按顺序打印出从 1 到最大的 n 位十进制数。</span><br><span class="hljs-comment"> * 比如输入 3，则打印出 1、2、3 一直到最大的 3 位数 999。</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 示例 1:</span><br><span class="hljs-comment"> * 输入: n = 1</span><br><span class="hljs-comment"> * 输出: [1,2,3,4,5,6,7,8,9]</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 说明：</span><br><span class="hljs-comment"> * 用返回一个整数列表来代替打印</span><br><span class="hljs-comment"> * n 为正整数</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 思路：https://leetcode-cn.com/problems/da-yin-cong-1dao-zui-da-de-nwei-shu-lcof/solution/mian-shi-ti-17-da-yin-cong-1-dao-zui-da-de-n-wei-2/</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>[] printNumbers(<span class="hljs-keyword">int</span> n) &#123;<br>        <span class="hljs-keyword">int</span> end = (<span class="hljs-keyword">int</span>)Math.pow(<span class="hljs-number">10</span>, n) - <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">int</span>[] res = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[end];<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; end; i++) &#123;<br>            res[i] = i + <span class="hljs-number">1</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>LeetCode剑指Offer题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>LeetCode</tag>
      
      <tag>剑指Offer</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode剑指Offer16.数值的整数次方</title>
    <link href="/2021/04/08/%E5%89%91%E6%8C%87Offer16/"/>
    <url>/2021/04/08/%E5%89%91%E6%8C%87Offer16/</url>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 剑指 Offer 16. 数值的整数次方</span><br><span class="hljs-comment"> * 实现 pow(x, n) ，即计算 x 的 n 次幂函数。</span><br><span class="hljs-comment"> * 不得使用库函数，同时不需要考虑大数问题。</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 示例 1：</span><br><span class="hljs-comment"> * 输入：x = 2.00000, n = 10</span><br><span class="hljs-comment"> * 输出：1024.00000</span><br><span class="hljs-comment"> * 示例 2：</span><br><span class="hljs-comment"> * 输入：x = 2.10000, n = 3</span><br><span class="hljs-comment"> * 输出：9.26100</span><br><span class="hljs-comment"> * 示例 3：</span><br><span class="hljs-comment"> * 输入：x = 2.00000, n = -2</span><br><span class="hljs-comment"> * 输出：0.25000</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 思路：https://leetcode-cn.com/problems/shu-zhi-de-zheng-shu-ci-fang-lcof/solution/mian-shi-ti-16-shu-zhi-de-zheng-shu-ci-fang-kuai-s/</span><br><span class="hljs-comment"> */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">double</span> <span class="hljs-title">myPow</span><span class="hljs-params">(<span class="hljs-keyword">double</span> x, <span class="hljs-keyword">int</span> n)</span> </span>&#123;<br><br>        <span class="hljs-keyword">if</span> (x == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">long</span> b = n;<br>        <span class="hljs-keyword">double</span> res = <span class="hljs-number">1.0</span>;<br><br>        <span class="hljs-keyword">if</span> (b &lt; <span class="hljs-number">0</span>) &#123;<br>            x = <span class="hljs-number">1</span> / x;<br>            b = -b;<br>        &#125;<br><br>        <span class="hljs-keyword">while</span> (b &gt; <span class="hljs-number">0</span>) &#123;<br><br>            <span class="hljs-keyword">if</span>((b &amp; <span class="hljs-number">1</span>) == <span class="hljs-number">1</span>) &#123;<br>                res *= x;<br>            &#125;<br><br>            x *= x;<br>            b &gt;&gt;= <span class="hljs-number">1</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>LeetCode剑指Offer题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>LeetCode</tag>
      
      <tag>剑指Offer</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode剑指Offer15.二进制中1的个数</title>
    <link href="/2021/04/07/%E5%89%91%E6%8C%87Offer15/"/>
    <url>/2021/04/07/%E5%89%91%E6%8C%87Offer15/</url>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 剑指 Offer 15. 二进制中1的个数</span><br><span class="hljs-comment"> * 请实现一个函数，输入一个整数（以二进制串形式），输出该数二进制表示中 1 的个数。</span><br><span class="hljs-comment"> * 例如，把 9表示成二进制是 1001，有 2 位是 1。因此，如果输入 9，则该函数输出 2。</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 示例 1：</span><br><span class="hljs-comment"> * 输入：00000000000000000000000000001011</span><br><span class="hljs-comment"> * 输出：3</span><br><span class="hljs-comment"> * 解释：输入的二进制串 00000000000000000000000000001011中，共有三位为 &#x27;1&#x27;。</span><br><span class="hljs-comment"> * 示例 2：</span><br><span class="hljs-comment"> * 输入：00000000000000000000000010000000</span><br><span class="hljs-comment"> * 输出：1</span><br><span class="hljs-comment"> * 解释：输入的二进制串 00000000000000000000000010000000中，共有一位为 &#x27;1&#x27;。</span><br><span class="hljs-comment"> * 示例 3：</span><br><span class="hljs-comment"> * 输入：11111111111111111111111111111101</span><br><span class="hljs-comment"> * 输出：31</span><br><span class="hljs-comment"> * 解释：输入的二进制串 11111111111111111111111111111101中，共有 31 位为 &#x27;1&#x27;。</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 提示：</span><br><span class="hljs-comment"> * 输入必须是长度为 32 的 二进制串 。</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 思路：把n和n-1做与运算，使n最右边的1变成0，n就有多少个1就能进行多少次这样的操作。</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br><br>    <span class="hljs-comment">// you need to treat n as an unsigned value</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">hammingWeight</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> count = <span class="hljs-number">0</span>;<br><br>        <span class="hljs-keyword">while</span> (n) &#123;<br>            n = n &amp; (n - <span class="hljs-number">1</span>);<br>            count++;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> count;<br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>LeetCode剑指Offer题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>LeetCode</tag>
      
      <tag>剑指Offer</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode剑指Offer14-I.剪绳子</title>
    <link href="/2021/04/06/%E5%89%91%E6%8C%87Offer14-I/"/>
    <url>/2021/04/06/%E5%89%91%E6%8C%87Offer14-I/</url>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 剑指 Offer 14- I. 剪绳子</span><br><span class="hljs-comment"> * 给你一根长度为 n 的绳子，请把绳子剪成整数长度的 m 段（m、n都是整数，n&gt;1并且m&gt;1），</span><br><span class="hljs-comment"> * 每段绳子的长度记为 k[0],k[1]...k[m-1] 。</span><br><span class="hljs-comment"> * 请问 k[0]*k[1]*...*k[m-1] 可能的最大乘积是多少？</span><br><span class="hljs-comment"> * 例如，当绳子的长度是8时，我们把它剪成长度分别为2、3、3的三段，此时得到的最大乘积是18。</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 示例 1：</span><br><span class="hljs-comment"> * 输入: 2</span><br><span class="hljs-comment"> * 输出: 1</span><br><span class="hljs-comment"> * 解释: 2 = 1 + 1, 1 × 1 = 1</span><br><span class="hljs-comment"> * 示例2:</span><br><span class="hljs-comment"> * 输入: 10</span><br><span class="hljs-comment"> * 输出: 36</span><br><span class="hljs-comment"> * 解释: 10 = 3 + 3 + 4, 3 ×3 ×4 = 36</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 提示：</span><br><span class="hljs-comment"> * 2 &lt;= n &lt;= 58</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 思路：https://leetcode-cn.com/problems/jian-sheng-zi-lcof/solution/mian-shi-ti-14-i-jian-sheng-zi-tan-xin-si-xiang-by/</span><br><span class="hljs-comment"> */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">cuttingRope</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span> </span>&#123;<br><br>        <span class="hljs-keyword">if</span> (n &lt;= <span class="hljs-number">3</span>) &#123;<br>            <span class="hljs-keyword">return</span> n - <span class="hljs-number">1</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">int</span> a = n / <span class="hljs-number">3</span>;<br>        <span class="hljs-keyword">int</span> b = n % <span class="hljs-number">3</span>;<br><br>        <span class="hljs-keyword">if</span> (b == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> (<span class="hljs-keyword">int</span>)Math.pow(<span class="hljs-number">3</span>, a);<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (b == <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">return</span> (<span class="hljs-keyword">int</span>)Math.pow(<span class="hljs-number">3</span>, a - <span class="hljs-number">1</span>) * <span class="hljs-number">4</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> (<span class="hljs-keyword">int</span>)Math.pow(<span class="hljs-number">3</span>, a) * <span class="hljs-number">2</span>;<br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>LeetCode剑指Offer题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>LeetCode</tag>
      
      <tag>剑指Offer</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode剑指Offer13.机器人的运动范围</title>
    <link href="/2021/04/05/%E5%89%91%E6%8C%87Offer13/"/>
    <url>/2021/04/05/%E5%89%91%E6%8C%87Offer13/</url>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 剑指 Offer 13. 机器人的运动范围</span><br><span class="hljs-comment"> * 地上有一个m行n列的方格，从坐标 [0,0] 到坐标 [m-1,n-1] 。</span><br><span class="hljs-comment"> * 一个机器人从坐标 [0, 0] 的格子开始移动，</span><br><span class="hljs-comment"> * 它每次可以向左、右、上、下移动一格（不能移动到方格外），</span><br><span class="hljs-comment"> * 也不能进入行坐标和列坐标的数位之和大于k的格子。</span><br><span class="hljs-comment"> * 例如，当k为18时，机器人能够进入方格 [35, 37] ，因为3+5+3+7=18。</span><br><span class="hljs-comment"> * 但它不能进入方格 [35, 38]，因为3+5+3+8=19。</span><br><span class="hljs-comment"> * 请问该机器人能够到达多少个格子？</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 示例 1：</span><br><span class="hljs-comment"> * 输入：m = 2, n = 3, k = 1</span><br><span class="hljs-comment"> * 输出：3</span><br><span class="hljs-comment"> * 示例 2：</span><br><span class="hljs-comment"> * 输入：m = 3, n = 1, k = 0</span><br><span class="hljs-comment"> * 输出：1</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 提示：</span><br><span class="hljs-comment"> * 1 &lt;= n,m &lt;= 100</span><br><span class="hljs-comment"> * 0 &lt;= k&lt;= 20</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 思路：https://leetcode-cn.com/problems/ji-qi-ren-de-yun-dong-fan-wei-lcof/solution/mian-shi-ti-13-ji-qi-ren-de-yun-dong-fan-wei-dfs-b/</span><br><span class="hljs-comment"> */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> m, n, k;<br>    <span class="hljs-keyword">boolean</span>[][] visited;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">movingCount</span><span class="hljs-params">(<span class="hljs-keyword">int</span> m, <span class="hljs-keyword">int</span> n, <span class="hljs-keyword">int</span> k)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.m = m;<br>        <span class="hljs-keyword">this</span>.n = n;<br>        <span class="hljs-keyword">this</span>.k = k;<br>        <span class="hljs-keyword">this</span>.visited = <span class="hljs-keyword">new</span> <span class="hljs-keyword">boolean</span>[m][n];<br>        <span class="hljs-keyword">return</span> dfs(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> j, <span class="hljs-keyword">int</span> si, <span class="hljs-keyword">int</span> sj)</span> </span>&#123;<br><br>        <span class="hljs-keyword">if</span> (i &gt;= m || j &gt;= n || si + sj &gt; k || visited[i][j]) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br><br>        visited[i][j] = <span class="hljs-keyword">true</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span> + dfs(i + <span class="hljs-number">1</span>, j, (i + <span class="hljs-number">1</span>) % <span class="hljs-number">10</span> != <span class="hljs-number">0</span> ? si + <span class="hljs-number">1</span> : si - <span class="hljs-number">8</span>, sj)<br>                 + dfs(i ,j + <span class="hljs-number">1</span>, si ,(j + <span class="hljs-number">1</span>) % <span class="hljs-number">10</span> != <span class="hljs-number">0</span> ? sj + <span class="hljs-number">1</span> : sj - <span class="hljs-number">8</span>);<br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>LeetCode剑指Offer题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>LeetCode</tag>
      
      <tag>剑指Offer</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode剑指Offer12.矩阵中的路径</title>
    <link href="/2021/04/04/%E5%89%91%E6%8C%87Offer12/"/>
    <url>/2021/04/04/%E5%89%91%E6%8C%87Offer12/</url>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 剑指 Offer 12. 矩阵中的路径</span><br><span class="hljs-comment"> * 请设计一个函数，用来判断在一个矩阵中是否存在一条包含某字符串所有字符的路径。</span><br><span class="hljs-comment"> * 路径可以从矩阵中的任意一格开始，每一步可以在矩阵中向左、右、上、下移动一格。</span><br><span class="hljs-comment"> * 如果一条路径经过了矩阵的某一格，那么该路径不能再次进入该格子。</span><br><span class="hljs-comment"> * 例如，在下面的3×4的矩阵中包含一条字符串“bfce”的路径（路径中的字母用加粗标出）。</span><br><span class="hljs-comment"> * [[&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;e&quot;],</span><br><span class="hljs-comment"> * [&quot;s&quot;,&quot;f&quot;,&quot;c&quot;,&quot;s&quot;],</span><br><span class="hljs-comment"> * [&quot;a&quot;,&quot;d&quot;,&quot;e&quot;,&quot;e&quot;]]</span><br><span class="hljs-comment"> * 但矩阵中不包含字符串“abfb”的路径，</span><br><span class="hljs-comment"> * 因为字符串的第一个字符b占据了矩阵中的第一行第二个格子之后，</span><br><span class="hljs-comment"> * 路径不能再次进入这个格子。</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 示例 1：</span><br><span class="hljs-comment"> * 输入：board = [[&quot;A&quot;,&quot;B&quot;,&quot;C&quot;,&quot;E&quot;],</span><br><span class="hljs-comment"> *               [&quot;S&quot;,&quot;F&quot;,&quot;C&quot;,&quot;S&quot;],</span><br><span class="hljs-comment"> *               [&quot;A&quot;,&quot;D&quot;,&quot;E&quot;,&quot;E&quot;]],</span><br><span class="hljs-comment"> *              word = &quot;ABCCED&quot;</span><br><span class="hljs-comment"> * 输出：true</span><br><span class="hljs-comment"> * 示例 2：</span><br><span class="hljs-comment"> * 输入：board = [[&quot;a&quot;,&quot;b&quot;],[&quot;c&quot;,&quot;d&quot;]], word = &quot;abcd&quot;</span><br><span class="hljs-comment"> * 输出：false</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 提示：</span><br><span class="hljs-comment"> * 1 &lt;= board.length &lt;= 200</span><br><span class="hljs-comment"> * 1 &lt;= board[i].length &lt;= 200</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 思路：https://leetcode-cn.com/problems/ju-zhen-zhong-de-lu-jing-lcof/solution/mian-shi-ti-12-ju-zhen-zhong-de-lu-jing-shen-du-yo/</span><br><span class="hljs-comment"> */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">exist</span><span class="hljs-params">(<span class="hljs-keyword">char</span>[][] board, String word)</span> </span>&#123;<br>        <span class="hljs-keyword">char</span>[] words = word.toCharArray();<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; board.length; i++) &#123;<br><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; board[<span class="hljs-number">0</span>].length; j++) &#123;<br><br>                <span class="hljs-keyword">if</span> (dfs(board, words, i, j, <span class="hljs-number">0</span>)) &#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>                &#125;<br><br>            &#125;<br><br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">char</span>[][] board, <span class="hljs-keyword">char</span>[] words, <span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> j, <span class="hljs-keyword">int</span> k)</span> </span>&#123;<br><br>        <span class="hljs-keyword">if</span> (i &lt; <span class="hljs-number">0</span> || i &gt;= board.length || j &lt; <span class="hljs-number">0</span> || j &gt;= board[<span class="hljs-number">0</span>].length || board[i][j] != words[k]) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (k == words.length - <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        &#125;<br><br>        board[i][j] = <span class="hljs-string">&#x27;\0&#x27;</span>;<br>        <span class="hljs-keyword">boolean</span> res = dfs(board, words, i - <span class="hljs-number">1</span>, j, k + <span class="hljs-number">1</span>) ||<br>                      dfs(board, words, i + <span class="hljs-number">1</span>, j, k + <span class="hljs-number">1</span>) ||<br>                      dfs(board, words, i, j - <span class="hljs-number">1</span>, k + <span class="hljs-number">1</span>) ||<br>                      dfs(board, words, i, j + <span class="hljs-number">1</span>, k + <span class="hljs-number">1</span>);<br>        board[i][j] = words[k];<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>LeetCode剑指Offer题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>LeetCode</tag>
      
      <tag>剑指Offer</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode剑指Offer11.旋转数组的最小数字</title>
    <link href="/2021/04/03/%E5%89%91%E6%8C%87Offer11/"/>
    <url>/2021/04/03/%E5%89%91%E6%8C%87Offer11/</url>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 剑指 Offer 11. 旋转数组的最小数字</span><br><span class="hljs-comment"> * 把一个数组最开始的若干个元素搬到数组的末尾，我们称之为数组的旋转。</span><br><span class="hljs-comment"> * 输入一个递增排序的数组的一个旋转，输出旋转数组的最小元素。</span><br><span class="hljs-comment"> * 例如，数组[3,4,5,1,2] 为 [1,2,3,4,5] 的一个旋转，该数组的最小值为1。</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 示例 1：</span><br><span class="hljs-comment"> * 输入：[3,4,5,1,2]</span><br><span class="hljs-comment"> * 输出：1</span><br><span class="hljs-comment"> * 示例 2：</span><br><span class="hljs-comment"> * 输入：[2,2,2,0,1]</span><br><span class="hljs-comment"> * 输出：0</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 思路：</span><br><span class="hljs-comment"> * 寻找旋转数组的最小元素即为寻找 右排序数组 的首个元素nums[x]，称x为旋转点。</span><br><span class="hljs-comment"> * 排序数组的查找问题首先考虑使用 二分法 解决，其可将 遍历法 的 线性级别 时间复杂度降低至 对数级别。</span><br><span class="hljs-comment"> * 一、初始化：声明i,j双指针分别指向nums数组左右两端</span><br><span class="hljs-comment"> * 二、循环二分：设m=(i+j)/2为每次二分的中点（恒有i&lt;=m&lt;j）</span><br><span class="hljs-comment"> *     可分为以下三种情况：</span><br><span class="hljs-comment"> *     1.当nums[m]&gt;nums[j]时：m一定在左排序数组中，即旋转点x一定在[m+1,j]闭区间内，因此执行i=m+1；</span><br><span class="hljs-comment"> *     2.当nums[m]&lt;nums[j]时：m一定在右排序数组中，即旋转点x一定在[i,m]闭区间内，因此执行j=m；</span><br><span class="hljs-comment"> *     3.当nums[m]==nums[j]时：无法判断m在哪个排序数组中，即无法判断旋转点x在[i,m]还是[m+1,j]区间中。</span><br><span class="hljs-comment"> *       解决方案：执行j=j-1缩小判断范围</span><br><span class="hljs-comment"> * 三、返回值：当i==j时跳出二分循环，并返回旋转点的值nums[i]即可</span><br><span class="hljs-comment"> * 出处：https://leetcode-cn.com/problems/xuan-zhuan-shu-zu-de-zui-xiao-shu-zi-lcof/solution/mian-shi-ti-11-xuan-zhuan-shu-zu-de-zui-xiao-shu-3/</span><br><span class="hljs-comment"> */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">minArray</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] numbers)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> j = numbers.length - <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">int</span> m;<br><br>        <span class="hljs-keyword">while</span> (i &lt; j) &#123;<br>            m = (i + j) / <span class="hljs-number">2</span>;<br><br>            <span class="hljs-keyword">if</span> (numbers[m] &gt; numbers[j]) &#123;<br>                i = m + <span class="hljs-number">1</span>;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (numbers[m] &lt; numbers[j]) &#123;<br>                j = m;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                j--;<br>            &#125;<br><br>        &#125;<br><br>        <span class="hljs-keyword">return</span> numbers[i];<br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>LeetCode剑指Offer题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>LeetCode</tag>
      
      <tag>剑指Offer</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode剑指Offer10-II.青蛙跳台阶问题</title>
    <link href="/2021/04/02/%E5%89%91%E6%8C%87Offer10-II/"/>
    <url>/2021/04/02/%E5%89%91%E6%8C%87Offer10-II/</url>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 剑指 Offer 10- II. 青蛙跳台阶问题</span><br><span class="hljs-comment"> * 一只青蛙一次可以跳上1级台阶，也可以跳上2级台阶。</span><br><span class="hljs-comment"> * 求该青蛙跳上一个n级的台阶总共有多少种跳法。</span><br><span class="hljs-comment"> * 答案需要取模 1e9+7（1000000007），如计算初始结果为：1000000008，请返回1。</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 示例 1：</span><br><span class="hljs-comment"> * 输入：n = 2</span><br><span class="hljs-comment"> * 输出：2</span><br><span class="hljs-comment"> * 示例 2：</span><br><span class="hljs-comment"> * 输入：n = 7</span><br><span class="hljs-comment"> * 输出：21</span><br><span class="hljs-comment"> * 示例 3：</span><br><span class="hljs-comment"> * 输入：n = 0</span><br><span class="hljs-comment"> * 输出：1</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 提示：</span><br><span class="hljs-comment"> * 0 &lt;= n &lt;= 100</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 思路：</span><br><span class="hljs-comment"> * 把n级台阶的跳法数量看成n的函数，记为f(n)。</span><br><span class="hljs-comment"> * 当n&gt;2时，当青蛙跳到n-1级上，有f(n-1)种跳法，最后一次跳1级到n级。</span><br><span class="hljs-comment"> *         当青蛙跳到n-2级上，有f(n-2)种跳法，最后一次跳2级到n级（不能只条一级，已包含在f(n-1)中）。</span><br><span class="hljs-comment"> * 即使前n-2级跳法可能存在相同，但结合不同的最后一跳，产生不同的跳法</span><br><span class="hljs-comment"> * 即推出当n&gt;2时，f(n)=f(n-1)+f(n-2)</span><br><span class="hljs-comment"> */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">numWays</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span> </span>&#123;<br><br>        <span class="hljs-keyword">if</span> (n &lt;= <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">int</span> a = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">int</span> b = <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">int</span> sum;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n - <span class="hljs-number">1</span>; i++) &#123;<br>            sum = (a + b) % <span class="hljs-number">1000000007</span>;<br>            a = b;<br>            b = sum;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span>  a;<br><br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>LeetCode剑指Offer题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>LeetCode</tag>
      
      <tag>剑指Offer</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode剑指Offer10-I.斐波那契数列</title>
    <link href="/2021/04/01/%E5%89%91%E6%8C%87Offer10-I/"/>
    <url>/2021/04/01/%E5%89%91%E6%8C%87Offer10-I/</url>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 剑指 Offer 10- I. 斐波那契数列</span><br><span class="hljs-comment"> * 写一个函数，输入 n ，求斐波那契（Fibonacci）数列的第 n 项（即 F(N)）。</span><br><span class="hljs-comment"> * 斐波那契数列的定义如下：</span><br><span class="hljs-comment"> * F(0) = 0, F(1)= 1</span><br><span class="hljs-comment"> * F(N) = F(N - 1) + F(N - 2), 其中 N &gt; 1.</span><br><span class="hljs-comment"> * 斐波那契数列由 0 和 1 开始，之后的斐波那契数就是由之前的两数相加而得出。</span><br><span class="hljs-comment"> * 答案需要取模 1e9+7（1000000007），如计算初始结果为：1000000008，请返回 1。</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 示例 1：</span><br><span class="hljs-comment"> * 输入：n = 2</span><br><span class="hljs-comment"> * 输出：1</span><br><span class="hljs-comment"> * 示例 2：</span><br><span class="hljs-comment"> * 输入：n = 5</span><br><span class="hljs-comment"> * 输出：5</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 提示：</span><br><span class="hljs-comment"> * 0 &lt;= n &lt;= 100</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 思路：</span><br><span class="hljs-comment"> * 由于dp列表第i项只与第i-1项和第i-2项有关，</span><br><span class="hljs-comment"> * 因此只需要初始化三个整形变量sum，a，b，</span><br><span class="hljs-comment"> * 利用辅助变量sum使a，b两数字交替前进即可</span><br><span class="hljs-comment"> */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">fib</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> a = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> b = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">int</span> sum;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>            sum = (a + b) % <span class="hljs-number">1000000007</span>;<br>            a = b;<br>            b = sum;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> a;<br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>LeetCode剑指Offer题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>LeetCode</tag>
      
      <tag>剑指Offer</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode剑指Offer09.用两个栈实现队列</title>
    <link href="/2021/03/31/%E5%89%91%E6%8C%87Offer09/"/>
    <url>/2021/03/31/%E5%89%91%E6%8C%87Offer09/</url>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 剑指 Offer 09. 用两个栈实现队列</span><br><span class="hljs-comment"> * 用两个栈实现一个队列。</span><br><span class="hljs-comment"> * 队列的声明如下，请实现它的两个函数 appendTail 和 deleteHead ，</span><br><span class="hljs-comment"> * 分别完成在队列尾部插入整数和在队列头部删除整数的功能。(若队列中没有元素，deleteHead操作返回 -1 )</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 示例 1：</span><br><span class="hljs-comment"> * 输入：</span><br><span class="hljs-comment"> * [&quot;CQueue&quot;,&quot;appendTail&quot;,&quot;deleteHead&quot;,&quot;deleteHead&quot;]</span><br><span class="hljs-comment"> * [[],[3],[],[]]</span><br><span class="hljs-comment"> * 输出：[null,null,3,-1]</span><br><span class="hljs-comment"> * 示例 2：</span><br><span class="hljs-comment"> * 输入：</span><br><span class="hljs-comment"> * [&quot;CQueue&quot;,&quot;deleteHead&quot;,&quot;appendTail&quot;,&quot;appendTail&quot;,&quot;deleteHead&quot;,&quot;deleteHead&quot;]</span><br><span class="hljs-comment"> * [[],[],[5],[2],[],[]]</span><br><span class="hljs-comment"> * 输出：[null,-1,null,null,5,2]</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 提示：</span><br><span class="hljs-comment"> * 1 &lt;= values &lt;= 10000</span><br><span class="hljs-comment"> * 最多会对appendTail、deleteHead 进行10000次调用</span><br><span class="hljs-comment"> */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CQueue</span> </span>&#123;<br>    <span class="hljs-comment">//两个栈，一个出栈，一个入栈</span><br>    <span class="hljs-keyword">private</span> Stack&lt;Integer&gt; stack1;<br>    <span class="hljs-keyword">private</span> Stack&lt;Integer&gt; stack2;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">CQueue</span><span class="hljs-params">()</span> </span>&#123;<br>        stack1 = <span class="hljs-keyword">new</span> Stack&lt;&gt;();<br>        stack2 = <span class="hljs-keyword">new</span> Stack&lt;&gt;();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">appendTail</span><span class="hljs-params">(<span class="hljs-keyword">int</span> value)</span> </span>&#123;<br>        stack1.push(value);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">deleteHead</span><span class="hljs-params">()</span> </span>&#123;<br><br>        <span class="hljs-keyword">if</span> (!stack2.isEmpty()) &#123;<br>            <span class="hljs-keyword">return</span> stack2.pop();<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br><br>            <span class="hljs-keyword">while</span>(!stack1.isEmpty()) &#123;<br>                stack2.push(stack1.pop());<br>            &#125;<br><br>            <span class="hljs-keyword">return</span> stack2.isEmpty() ? -<span class="hljs-number">1</span> : stack2.pop();<br>        &#125;<br><br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>LeetCode剑指Offer题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>LeetCode</tag>
      
      <tag>剑指Offer</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode剑指Offer07.重建二叉树</title>
    <link href="/2021/03/30/%E5%89%91%E6%8C%87Offer07/"/>
    <url>/2021/03/30/%E5%89%91%E6%8C%87Offer07/</url>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 剑指 Offer 07. 重建二叉树</span><br><span class="hljs-comment"> * 输入某二叉树的前序遍历和中序遍历的结果，请重建该二叉树。</span><br><span class="hljs-comment"> * 假设输入的前序遍历和中序遍历的结果中都不含重复的数字。</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 例如，给出</span><br><span class="hljs-comment"> * 前序遍历 preorder =[3,9,20,15,7]</span><br><span class="hljs-comment"> * 中序遍历 inorder = [9,3,15,20,7]</span><br><span class="hljs-comment"> * 返回如下的二叉树：</span><br><span class="hljs-comment"> *     3</span><br><span class="hljs-comment"> *    / \</span><br><span class="hljs-comment"> *   9  20</span><br><span class="hljs-comment"> *     /  \</span><br><span class="hljs-comment"> *    15   7</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 限制：</span><br><span class="hljs-comment"> * 0 &lt;= 节点个数 &lt;= 5000</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for a binary tree node.</span><br><span class="hljs-comment"> * public class TreeNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     TreeNode left;</span><br><span class="hljs-comment"> *     TreeNode right;</span><br><span class="hljs-comment"> *     TreeNode(int x) &#123; val = x; &#125;</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> TreeNode <span class="hljs-title">buildTree</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] preorder, <span class="hljs-keyword">int</span>[] inorder)</span> </span>&#123;<br><br>        <span class="hljs-keyword">if</span> (preorder == <span class="hljs-keyword">null</span> || preorder.length == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        &#125;<br><br>        <span class="hljs-comment">//获取根节点val值</span><br>        TreeNode root = <span class="hljs-keyword">new</span> TreeNode(preorder[<span class="hljs-number">0</span>]);<br>        <span class="hljs-comment">//获取根节点在中序遍历中位置</span><br>        <span class="hljs-keyword">int</span> index = findIndex(preorder, inorder);<br>        <span class="hljs-comment">//递归构建左子树</span><br>        root.left = buildTree(Arrays.copyOfRange(preorder, <span class="hljs-number">1</span>, index + <span class="hljs-number">1</span>),<br>                Arrays.copyOfRange(inorder, <span class="hljs-number">0</span>, index));<br>        <span class="hljs-comment">//递归构建右子树</span><br>        root.right = buildTree(Arrays.copyOfRange(preorder, index + <span class="hljs-number">1</span>, preorder.length),<br>                Arrays.copyOfRange(inorder, index + <span class="hljs-number">1</span>, inorder.length));<br>        <span class="hljs-keyword">return</span> root;<br>    &#125;<br><br>    <span class="hljs-comment">////获取根节点在中序遍历中位置</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">findIndex</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] preorder, <span class="hljs-keyword">int</span>[] inorder)</span> </span>&#123;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; preorder.length; i++) &#123;<br><br>            <span class="hljs-comment">//前序遍历数组中第一个元素即为根节点</span><br>            <span class="hljs-keyword">if</span> (inorder[i] == preorder[<span class="hljs-number">0</span>]) &#123;<br>                <span class="hljs-keyword">return</span> i;<br>            &#125;<br><br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>    &#125;<br>    <br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>LeetCode剑指Offer题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>LeetCode</tag>
      
      <tag>剑指Offer</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode剑指Offer06.从尾到头打印链表</title>
    <link href="/2021/03/29/%E5%89%91%E6%8C%87Offer06/"/>
    <url>/2021/03/29/%E5%89%91%E6%8C%87Offer06/</url>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 剑指 Offer 06. 从尾到头打印链表</span><br><span class="hljs-comment"> * 输入一个链表的头节点，从尾到头反过来返回每个节点的值（用数组返回）。</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 示例 1：</span><br><span class="hljs-comment"> * 输入：head = [1,3,2]</span><br><span class="hljs-comment"> * 输出：[2,3,1]</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 限制：</span><br><span class="hljs-comment"> * 0 &lt;= 链表长度 &lt;= 10000</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 思路：</span><br><span class="hljs-comment"> * 从头到尾遍历节点入栈，再依次出栈。</span><br><span class="hljs-comment"> * 尽量避免递归，可能会造成栈溢出。</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> * public class ListNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     ListNode next;</span><br><span class="hljs-comment"> *     ListNode(int x) &#123; val = x; &#125;</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>[] reversePrint(ListNode head) &#123;<br>        Stack&lt;ListNode&gt; stack = <span class="hljs-keyword">new</span> Stack&lt;ListNode&gt;();<br><br>        <span class="hljs-keyword">while</span> (head != <span class="hljs-keyword">null</span>) &#123;<br>            stack.push(head);<br>            head = head.next;<br>        &#125;<br><br>        <span class="hljs-keyword">int</span> size = stack.size();<br>        <span class="hljs-keyword">int</span>[] re = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[size];<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; size; i++) &#123;<br>            re[i] =stack.pop().val;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> re;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>LeetCode剑指Offer题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>LeetCode</tag>
      
      <tag>剑指Offer</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode剑指Offer05.替换空格</title>
    <link href="/2021/03/28/%E5%89%91%E6%8C%87Offer05/"/>
    <url>/2021/03/28/%E5%89%91%E6%8C%87Offer05/</url>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 剑指 Offer 05. 替换空格</span><br><span class="hljs-comment"> * 请实现一个函数，把字符串 s 中的每个空格替换成&quot;%20&quot;。</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 示例 1：</span><br><span class="hljs-comment"> * 输入：s = &quot;We are happy.&quot;</span><br><span class="hljs-comment"> * 输出：&quot;We%20are%20happy.&quot;</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 限制：</span><br><span class="hljs-comment"> * 0 &lt;= s 的长度 &lt;= 10000</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 思路：</span><br><span class="hljs-comment"> * StringBuilder是一个可变对象，可以预分配缓冲区，往StringBuilder中新增字符时，不会创建新的临时对象。</span><br><span class="hljs-comment"> */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">replaceSpace</span><span class="hljs-params">(String s)</span> </span>&#123;<br>        StringBuilder newS = <span class="hljs-keyword">new</span> StringBuilder();<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; s.length(); i++) &#123;<br><br>            <span class="hljs-keyword">char</span> c = s.charAt(i);<br>            <span class="hljs-keyword">if</span> (c != <span class="hljs-string">&#x27; &#x27;</span>) &#123;<br>                newS.append(c);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                newS.append(<span class="hljs-string">&quot;%20&quot;</span>);<br>            &#125;<br><br>        &#125;<br><br>        <span class="hljs-keyword">return</span> newS.toString();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>LeetCode剑指Offer题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>LeetCode</tag>
      
      <tag>剑指Offer</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode剑指Offer04.二维数组中的查找</title>
    <link href="/2021/03/27/%E5%89%91%E6%8C%87Offer04/"/>
    <url>/2021/03/27/%E5%89%91%E6%8C%87Offer04/</url>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 剑指 Offer 04. 二维数组中的查找</span><br><span class="hljs-comment"> * 在一个 n * m 的二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。</span><br><span class="hljs-comment"> * 请完成一个高效的函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 示例:</span><br><span class="hljs-comment"> * 现有矩阵 matrix 如下：</span><br><span class="hljs-comment"> * [</span><br><span class="hljs-comment"> *   [1,   4,  7, 11, 15],</span><br><span class="hljs-comment"> *   [2,   5,  8, 12, 19],</span><br><span class="hljs-comment"> *   [3,   6,  9, 16, 22],</span><br><span class="hljs-comment"> *   [10, 13, 14, 17, 24],</span><br><span class="hljs-comment"> *   [18, 21, 23, 26, 30]</span><br><span class="hljs-comment"> * ]</span><br><span class="hljs-comment"> * 给定target=5，返回true。</span><br><span class="hljs-comment"> * 给定target=20，返回false。</span><br><span class="hljs-comment"> * 限制：</span><br><span class="hljs-comment"> * 0 &lt;= n &lt;= 1000</span><br><span class="hljs-comment"> * 0 &lt;= m &lt;= 1000</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 思路：</span><br><span class="hljs-comment"> * 首先选取数组中右上角的数字。</span><br><span class="hljs-comment"> * 如果该数字等于要查找的数字，则查找过程结束；</span><br><span class="hljs-comment"> * 如果该数字大于要查找的数字，则剔除这个数字所在的列；</span><br><span class="hljs-comment"> * 如果该数字小于要查找的数字，则剔除这个数字所在的行。</span><br><span class="hljs-comment"> * 也就是说，如果要查找的数字不在数组的右上角，则每一次都在数组的查找范围中剔除一行或者一列，</span><br><span class="hljs-comment"> * 这样每一步都可以缩小查找的范围，直到找到要查找的数字，或者查找范围为空。</span><br><span class="hljs-comment"> */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">findNumberIn2DArray</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[][] matrix, <span class="hljs-keyword">int</span> target)</span> </span>&#123;<br><br>        <span class="hljs-keyword">if</span> (matrix == <span class="hljs-keyword">null</span> || matrix.length == <span class="hljs-number">0</span> || matrix[<span class="hljs-number">0</span>].length == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">int</span> n = matrix.length;<br>        <span class="hljs-keyword">int</span> m = matrix[<span class="hljs-number">0</span>].length;<br>        <span class="hljs-keyword">int</span> row = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> column = m - <span class="hljs-number">1</span>;<br><br>        <span class="hljs-keyword">while</span> (row &lt; n &amp;&amp; column &gt;= <span class="hljs-number">0</span>) &#123;<br><br>            <span class="hljs-keyword">if</span> (matrix[row][column] == target) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (matrix[row][column] &lt;= target) &#123;<br>                row++;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                column--;<br>            &#125;<br><br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>LeetCode剑指Offer题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>LeetCode</tag>
      
      <tag>剑指Offer</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode剑指Offer03.数组中重复的数字</title>
    <link href="/2021/03/26/%E5%89%91%E6%8C%87Offer03/"/>
    <url>/2021/03/26/%E5%89%91%E6%8C%87Offer03/</url>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 剑指 Offer 03. 数组中重复的数字</span><br><span class="hljs-comment"> * 找出数组中重复的数字。</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 在一个长度为 n 的数组 nums 里的所有数字都在 0～n-1 的范围内。</span><br><span class="hljs-comment"> * 数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。</span><br><span class="hljs-comment"> * 请找出数组中任意一个重复的数字。</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 示例 1：</span><br><span class="hljs-comment"> * 输入：</span><br><span class="hljs-comment"> * [2, 3, 1, 0, 2, 5, 3]</span><br><span class="hljs-comment"> * 输出：</span><br><span class="hljs-comment"> * 2 或 3</span><br><span class="hljs-comment"> * 限制：</span><br><span class="hljs-comment"> * 2 &lt;= n &lt;= 100000</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 思路：</span><br><span class="hljs-comment"> * 数组中数字都在0~n-1的范围内，如果这个数组中没有重复的数字，那么当数组排序之后数字i将出现在下标为i的位置。</span><br><span class="hljs-comment"> * 由于数组中有重复的数字，有些位置可能存在多个数字，同时有些位置可能没有数字。</span><br><span class="hljs-comment"> * 从头到尾依次扫描这个数组中的每个数字，当扫描到下标为i的数字时，首先比较这个数字（用m表示）是不是等于i。</span><br><span class="hljs-comment"> * 如果是，则接着扫描下一个数字；如果不是，则再拿它和第m个数字进行比较。</span><br><span class="hljs-comment"> *     如果它和第m个数字相等，就找到了一个重复的数字（该数字在下标为i和m的位置都出现了）；</span><br><span class="hljs-comment"> *     如果它和第m个数字不相等，就把第i个数字和第m个数字交换，把m放到属于它的位置。</span><br><span class="hljs-comment"> * 接下来再重复这个比较、交换的过程，直到我们发现一个重复的数字。</span><br><span class="hljs-comment"> */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">findRepeatNumber</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums)</span> </span>&#123;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; nums.length; i++) &#123;<br><br>            <span class="hljs-keyword">while</span> (nums[i] != i) &#123;<br><br>                <span class="hljs-keyword">if</span> (nums[i] == nums[nums[i]]) &#123;<br>                    <span class="hljs-keyword">return</span> nums[i];<br>                &#125;<br><br>                <span class="hljs-comment">//swap nums[i] and nums[nums[i]]</span><br>                <span class="hljs-keyword">int</span> temp = nums[i];<br>                nums[i] = nums[temp];<br>                nums[temp] = temp;<br><br>            &#125;<br><br>        &#125;<br><br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br><br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>LeetCode剑指Offer题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>LeetCode</tag>
      
      <tag>剑指Offer</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java核心基础day29笔记</title>
    <link href="/2021/03/23/day29/"/>
    <url>/2021/03/23/day29/</url>
    
    <content type="html"><![CDATA[<h2 id="05"><a href="#05" class="headerlink" title="05"></a>05</h2><h3 id="静态代理举例"><a href="#静态代理举例" class="headerlink" title="静态代理举例"></a>静态代理举例</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.java;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 静态代理举例</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 特点：代理类和被代理类在编译期间，就确定下来了</span><br><span class="hljs-comment"> */</span><br><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">ClothFactory</span></span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">produceCloth</span><span class="hljs-params">()</span></span>;<br><br>&#125;<br><br><span class="hljs-comment">//代理类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ProxyClothFactory</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">ClothFactory</span></span>&#123;<br><br>    <span class="hljs-keyword">private</span> ClothFactory factory;<span class="hljs-comment">//用被代理类对象进行实例化</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ProxyClothFactory</span><span class="hljs-params">(ClothFactory factory)</span></span>&#123;<br>        <span class="hljs-keyword">this</span>.factory = factory;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">produceCloth</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;代理工厂做一些准备工作&quot;</span>);<br><br>        factory.produceCloth();<br><br>        System.out.println(<span class="hljs-string">&quot;代理工厂做一些后续的收尾工作&quot;</span>);<br><br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//被代理类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NikeClothFactory</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">ClothFactory</span></span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">produceCloth</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Nike工厂生产一批运动服&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">StaticProxyTest</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//创建被代理类的对象</span><br>        ClothFactory nike = <span class="hljs-keyword">new</span> NikeClothFactory();<br>        <span class="hljs-comment">//创建代理类的对象</span><br>        ClothFactory proxyClothFactory = <span class="hljs-keyword">new</span> ProxyClothFactory(nike);<br><br>        proxyClothFactory.produceCloth();<br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="06-07"><a href="#06-07" class="headerlink" title="06 07"></a>06 07</h2><h3 id="动态代理举例"><a href="#动态代理举例" class="headerlink" title="动态代理举例"></a>动态代理举例</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.java;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationHandler;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><span class="hljs-keyword">import</span> java.lang.reflect.Proxy;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 动态代理的举例</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Human</span></span>&#123;<br><br>    <span class="hljs-function">String <span class="hljs-title">getBelief</span><span class="hljs-params">()</span></span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">eat</span><span class="hljs-params">(String food)</span></span>;<br><br>&#125;<br><span class="hljs-comment">//被代理类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SuperMan</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Human</span></span>&#123;<br><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getBelief</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;I believe I can fly!&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">eat</span><span class="hljs-params">(String food)</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;我喜欢吃&quot;</span> + food);<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HumanUtil</span></span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method1</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;====================通用方法一====================&quot;</span>);<br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method2</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;====================通用方法二====================&quot;</span>);<br>    &#125;<br><br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">要想实现动态代理，需要解决的问题？</span><br><span class="hljs-comment">问题一：如何根据加载到内存中的被代理类，动态的创建一个代理类及其对象。</span><br><span class="hljs-comment">问题二：当通过代理类的对象调用方法a时，如何动态的去调用被代理类中的同名方法a。</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ProxyFactory</span></span>&#123;<br>    <span class="hljs-comment">//调用此方法，返回一个代理类的对象。解决问题一</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title">getProxyInstance</span><span class="hljs-params">(Object obj)</span></span>&#123;<span class="hljs-comment">//obj:被代理类的对象</span><br>        MyInvocationHandler handler = <span class="hljs-keyword">new</span> MyInvocationHandler();<br><br>        handler.bind(obj);<br><br>        <span class="hljs-keyword">return</span> Proxy.newProxyInstance(obj.getClass().getClassLoader(),obj.getClass().getInterfaces(),handler);<br>    &#125;<br><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyInvocationHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">InvocationHandler</span></span>&#123;<br><br>    <span class="hljs-keyword">private</span> Object obj;<span class="hljs-comment">//需要使用被代理类的对象进行赋值</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">bind</span><span class="hljs-params">(Object obj)</span></span>&#123;<br>        <span class="hljs-keyword">this</span>.obj = obj;<br>    &#125;<br><br>    <span class="hljs-comment">//当我们通过代理类的对象，调用方法a时，就会自动的调用如下的方法：invoke()</span><br>    <span class="hljs-comment">//将被代理类要执行的方法a的功能就声明在invoke()中</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span> <span class="hljs-keyword">throws</span> Throwable </span>&#123;<br><br>        HumanUtil util = <span class="hljs-keyword">new</span> HumanUtil();<br>        util.method1();<br><br>        <span class="hljs-comment">//method:即为代理类对象调用的方法，此方法也就作为了被代理类对象要调用的方法</span><br>        <span class="hljs-comment">//obj:被代理类的对象</span><br>        Object returnValue = method.invoke(obj,args);<br><br>        util.method2();<br><br>        <span class="hljs-comment">//上述方法的返回值就作为当前类中的invoke()的返回值。</span><br>        <span class="hljs-keyword">return</span> returnValue;<br><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ProxyTest</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        SuperMan superMan = <span class="hljs-keyword">new</span> SuperMan();<br>        <span class="hljs-comment">//proxyInstance:代理类的对象</span><br>        Human proxyInstance = (Human) ProxyFactory.getProxyInstance(superMan);<br>        <span class="hljs-comment">//当通过代理类对象调用方法时，会自动的调用被代理类中同名的方法</span><br>        String belief = proxyInstance.getBelief();<br>        System.out.println(belief);<br>        proxyInstance.eat(<span class="hljs-string">&quot;四川麻辣烫&quot;</span>);<br><br>        System.out.println(<span class="hljs-string">&quot;*****************************&quot;</span>);<br><br>        NikeClothFactory nikeClothFactory = <span class="hljs-keyword">new</span> NikeClothFactory();<br><br>        ClothFactory proxyClothFactory = (ClothFactory) ProxyFactory.getProxyInstance(nikeClothFactory);<br><br>        proxyClothFactory.produceCloth();<br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="10"><a href="#10" class="headerlink" title="10"></a>10</h2><h3 id="Lambda表达式使用举例"><a href="#Lambda表达式使用举例" class="headerlink" title="Lambda表达式使用举例"></a>Lambda表达式使用举例</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.java1;<br><br><br><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.util.Comparator;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Lambda表达式的使用举例</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LambdaTest</span> </span>&#123;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span></span>&#123;<br><br>        Runnable r1 = <span class="hljs-keyword">new</span> Runnable() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>                System.out.println(<span class="hljs-string">&quot;我爱北京天安门&quot;</span>);<br>            &#125;<br>        &#125;;<br><br>        r1.run();<br><br>        System.out.println(<span class="hljs-string">&quot;***********************&quot;</span>);<br><br>        Runnable r2 = () -&gt; System.out.println(<span class="hljs-string">&quot;我爱北京故宫&quot;</span>);<br><br>        r2.run();<br>    &#125;<br><br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test2</span><span class="hljs-params">()</span></span>&#123;<br><br>        Comparator&lt;Integer&gt; com1 = <span class="hljs-keyword">new</span> Comparator&lt;Integer&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">compare</span><span class="hljs-params">(Integer o1, Integer o2)</span> </span>&#123;<br>                <span class="hljs-keyword">return</span> Integer.compare(o1,o2);<br>            &#125;<br>        &#125;;<br><br>        <span class="hljs-keyword">int</span> compare1 = com1.compare(<span class="hljs-number">12</span>,<span class="hljs-number">21</span>);<br>        System.out.println(compare1);<br><br>        System.out.println(<span class="hljs-string">&quot;***********************&quot;</span>);<br>        <span class="hljs-comment">//Lambda表达式的写法</span><br>        Comparator&lt;Integer&gt; com2 = (o1,o2) -&gt; Integer.compare(o1,o2);<br><br>        <span class="hljs-keyword">int</span> compare2 = com2.compare(<span class="hljs-number">32</span>,<span class="hljs-number">21</span>);<br>        System.out.println(compare2);<br><br><br>        System.out.println(<span class="hljs-string">&quot;***********************&quot;</span>);<br>        <span class="hljs-comment">//方法引用</span><br>        Comparator&lt;Integer&gt; com3 = Integer :: compare;<br><br>        <span class="hljs-keyword">int</span> compare3 = com3.compare(<span class="hljs-number">32</span>,<span class="hljs-number">21</span>);<br>        System.out.println(compare3);<br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="11-12"><a href="#11-12" class="headerlink" title="11 12"></a>11 12</h2><h3 id="Lambda表达式语法的使用"><a href="#Lambda表达式语法的使用" class="headerlink" title="Lambda表达式语法的使用"></a>Lambda表达式语法的使用</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.java1;<br><br><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Comparator;<br><span class="hljs-keyword">import</span> java.util.function.Consumer;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Lambda表达式的使用</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 1.举例： (o1,o2) -&gt; Integer.compare(o1,o2);</span><br><span class="hljs-comment"> * 2.格式：</span><br><span class="hljs-comment"> *      -&gt; :lambda操作符 或 箭头操作符</span><br><span class="hljs-comment"> *      -&gt;左边：lambda形参列表 （其实就是接口中的抽象方法的形参列表）</span><br><span class="hljs-comment"> *      -&gt;右边：lambda体 （其实就是重写的抽象方法的方法体）</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 3. Lambda表达式的使用：（分为6种情况介绍）</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *    总结：</span><br><span class="hljs-comment"> *    -&gt;左边：lambda形参列表的参数类型可以省略(类型推断)；如果lambda形参列表只有一个参数，其一对()也可以省略</span><br><span class="hljs-comment"> *    -&gt;右边：lambda体应该使用一对&#123;&#125;包裹；如果lambda体只有一条执行语句（可能是return语句），省略这一对&#123;&#125;和return关键字</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 4.Lambda表达式的本质：作为函数式接口的实例</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 5. 如果一个接口中，只声明了一个抽象方法，则此接口就称为函数式接口。我们可以在一个接口上使用 <span class="hljs-doctag">@FunctionalInterface</span> 注解，</span><br><span class="hljs-comment"> *   这样做可以检查它是否是一个函数式接口。</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 6. 所以以前用匿名实现类表示的现在都可以用Lambda表达式来写。</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LambdaTest1</span> </span>&#123;<br>    <span class="hljs-comment">//语法格式一：无参，无返回值</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span></span>&#123;<br>        Runnable r1 = <span class="hljs-keyword">new</span> Runnable() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>                System.out.println(<span class="hljs-string">&quot;我爱北京天安门&quot;</span>);<br>            &#125;<br>        &#125;;<br><br>        r1.run();<br><br>        System.out.println(<span class="hljs-string">&quot;***********************&quot;</span>);<br><br>        Runnable r2 = () -&gt; &#123;<br>            System.out.println(<span class="hljs-string">&quot;我爱北京故宫&quot;</span>);<br>        &#125;;<br><br>        r2.run();<br>    &#125;<br>    <span class="hljs-comment">//语法格式二：Lambda 需要一个参数，但是没有返回值。</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test2</span><span class="hljs-params">()</span></span>&#123;<br><br>        Consumer&lt;String&gt; con = <span class="hljs-keyword">new</span> Consumer&lt;String&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">accept</span><span class="hljs-params">(String s)</span> </span>&#123;<br>                System.out.println(s);<br>            &#125;<br>        &#125;;<br>        con.accept(<span class="hljs-string">&quot;谎言和誓言的区别是什么？&quot;</span>);<br><br>        System.out.println(<span class="hljs-string">&quot;*******************&quot;</span>);<br><br>        Consumer&lt;String&gt; con1 = (String s) -&gt; &#123;<br>            System.out.println(s);<br>        &#125;;<br>        con1.accept(<span class="hljs-string">&quot;一个是听得人当真了，一个是说的人当真了&quot;</span>);<br><br>    &#125;<br><br>    <span class="hljs-comment">//语法格式三：数据类型可以省略，因为可由编译器推断得出，称为“类型推断”</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test3</span><span class="hljs-params">()</span></span>&#123;<br><br>        Consumer&lt;String&gt; con1 = (String s) -&gt; &#123;<br>            System.out.println(s);<br>        &#125;;<br>        con1.accept(<span class="hljs-string">&quot;一个是听得人当真了，一个是说的人当真了&quot;</span>);<br><br>        System.out.println(<span class="hljs-string">&quot;*******************&quot;</span>);<br><br>        Consumer&lt;String&gt; con2 = (s) -&gt; &#123;<br>            System.out.println(s);<br>        &#125;;<br>        con2.accept(<span class="hljs-string">&quot;一个是听得人当真了，一个是说的人当真了&quot;</span>);<br><br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test4</span><span class="hljs-params">()</span></span>&#123;<br><br>        ArrayList&lt;String&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<span class="hljs-comment">//类型推断</span><br><br>        <span class="hljs-keyword">int</span>[] arr = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;;<span class="hljs-comment">//类型推断</span><br><br>    &#125;<br><br>    <span class="hljs-comment">//语法格式四：Lambda 若只需要一个参数时，参数的小括号可以省略</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test5</span><span class="hljs-params">()</span></span>&#123;<br>        Consumer&lt;String&gt; con1 = (s) -&gt; &#123;<br>            System.out.println(s);<br>        &#125;;<br>        con1.accept(<span class="hljs-string">&quot;一个是听得人当真了，一个是说的人当真了&quot;</span>);<br><br>        System.out.println(<span class="hljs-string">&quot;*******************&quot;</span>);<br><br>        Consumer&lt;String&gt; con2 = s -&gt; &#123;<br>            System.out.println(s);<br>        &#125;;<br>        con2.accept(<span class="hljs-string">&quot;一个是听得人当真了，一个是说的人当真了&quot;</span>);<br><br><br>    &#125;<br><br>    <span class="hljs-comment">//语法格式五：Lambda 需要两个或以上的参数，多条执行语句，并且可以有返回值</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test6</span><span class="hljs-params">()</span></span>&#123;<br><br>        Comparator&lt;Integer&gt; com1 = <span class="hljs-keyword">new</span> Comparator&lt;Integer&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">compare</span><span class="hljs-params">(Integer o1, Integer o2)</span> </span>&#123;<br>                System.out.println(o1);<br>                System.out.println(o2);<br>                <span class="hljs-keyword">return</span> o1.compareTo(o2);<br>            &#125;<br>        &#125;;<br><br>        System.out.println(com1.compare(<span class="hljs-number">12</span>,<span class="hljs-number">21</span>));<br><br>        System.out.println(<span class="hljs-string">&quot;*****************************&quot;</span>);<br>        Comparator&lt;Integer&gt; com2 = (o1,o2) -&gt; &#123;<br>            System.out.println(o1);<br>            System.out.println(o2);<br>            <span class="hljs-keyword">return</span> o1.compareTo(o2);<br>        &#125;;<br><br>        System.out.println(com2.compare(<span class="hljs-number">12</span>,<span class="hljs-number">6</span>));<br><br><br>    &#125;<br><br>    <span class="hljs-comment">//语法格式六：当 Lambda 体只有一条语句时，return 与大括号若有，都可以省略</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test7</span><span class="hljs-params">()</span></span>&#123;<br><br>        Comparator&lt;Integer&gt; com1 = (o1,o2) -&gt; &#123;<br>            <span class="hljs-keyword">return</span> o1.compareTo(o2);<br>        &#125;;<br><br>        System.out.println(com1.compare(<span class="hljs-number">12</span>,<span class="hljs-number">6</span>));<br><br>        System.out.println(<span class="hljs-string">&quot;*****************************&quot;</span>);<br><br>        Comparator&lt;Integer&gt; com2 = (o1,o2) -&gt; o1.compareTo(o2);<br><br>        System.out.println(com2.compare(<span class="hljs-number">12</span>,<span class="hljs-number">21</span>));<br><br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test8</span><span class="hljs-params">()</span></span>&#123;<br>        Consumer&lt;String&gt; con1 = s -&gt; &#123;<br>            System.out.println(s);<br>        &#125;;<br>        con1.accept(<span class="hljs-string">&quot;一个是听得人当真了，一个是说的人当真了&quot;</span>);<br><br>        System.out.println(<span class="hljs-string">&quot;*****************************&quot;</span>);<br><br>        Consumer&lt;String&gt; con2 = s -&gt; System.out.println(s);<br><br>        con2.accept(<span class="hljs-string">&quot;一个是听得人当真了，一个是说的人当真了&quot;</span>);<br><br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="13-14"><a href="#13-14" class="headerlink" title="13 14"></a>13 14</h2><h3 id="函数式接口"><a href="#函数式接口" class="headerlink" title="函数式接口"></a>函数式接口</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.java1;<br><br><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.function.Consumer;<br><span class="hljs-keyword">import</span> java.util.function.Predicate;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * java内置的4大核心函数式接口</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 消费型接口 Consumer&lt;T&gt;     void accept(T t)</span><br><span class="hljs-comment"> * 供给型接口 Supplier&lt;T&gt;     T get()</span><br><span class="hljs-comment"> * 函数型接口 Function&lt;T,R&gt;   R apply(T t)</span><br><span class="hljs-comment"> * 断定型接口 Predicate&lt;T&gt;    boolean test(T t)</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LambdaTest2</span> </span>&#123;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span></span>&#123;<br><br>        happyTime(<span class="hljs-number">500</span>, <span class="hljs-keyword">new</span> Consumer&lt;Double&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">accept</span><span class="hljs-params">(Double aDouble)</span> </span>&#123;<br>                System.out.println(<span class="hljs-string">&quot;学习太累了，去天上人间买了瓶矿泉水，价格为：&quot;</span> + aDouble);<br>            &#125;<br>        &#125;);<br><br>        System.out.println(<span class="hljs-string">&quot;********************&quot;</span>);<br><br>        happyTime(<span class="hljs-number">400</span>,money -&gt; System.out.println(<span class="hljs-string">&quot;学习太累了，去天上人间喝了口水，价格为：&quot;</span> + money));<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">happyTime</span><span class="hljs-params">(<span class="hljs-keyword">double</span> money, Consumer&lt;Double&gt; con)</span></span>&#123;<br>        con.accept(money);<br>    &#125;<br><br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test2</span><span class="hljs-params">()</span></span>&#123;<br>        List&lt;String&gt; list = Arrays.asList(<span class="hljs-string">&quot;北京&quot;</span>,<span class="hljs-string">&quot;南京&quot;</span>,<span class="hljs-string">&quot;天津&quot;</span>,<span class="hljs-string">&quot;东京&quot;</span>,<span class="hljs-string">&quot;西京&quot;</span>,<span class="hljs-string">&quot;普京&quot;</span>);<br><br>        List&lt;String&gt; filterStrs = filterString(list, <span class="hljs-keyword">new</span> Predicate&lt;String&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">test</span><span class="hljs-params">(String s)</span> </span>&#123;<br>                <span class="hljs-keyword">return</span> s.contains(<span class="hljs-string">&quot;京&quot;</span>);<br>            &#125;<br>        &#125;);<br><br>        System.out.println(filterStrs);<br><br><br>        List&lt;String&gt; filterStrs1 = filterString(list,s -&gt; s.contains(<span class="hljs-string">&quot;京&quot;</span>));<br>        System.out.println(filterStrs1);<br>    &#125;<br><br>    <span class="hljs-comment">//根据给定的规则，过滤集合中的字符串。此规则由Predicate的方法决定</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;String&gt; <span class="hljs-title">filterString</span><span class="hljs-params">(List&lt;String&gt; list, Predicate&lt;String&gt; pre)</span></span>&#123;<br><br>        ArrayList&lt;String&gt; filterList = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br><br>        <span class="hljs-keyword">for</span>(String s : list)&#123;<br>            <span class="hljs-keyword">if</span>(pre.test(s))&#123;<br>                filterList.add(s);<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> filterList;<br><br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="15-16-17"><a href="#15-16-17" class="headerlink" title="15 16 17"></a>15 16 17</h2><h3 id="方法引用"><a href="#方法引用" class="headerlink" title="方法引用"></a>方法引用</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.java2;<br><br><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.io.PrintStream;<br><span class="hljs-keyword">import</span> java.util.Comparator;<br><span class="hljs-keyword">import</span> java.util.function.BiPredicate;<br><span class="hljs-keyword">import</span> java.util.function.Consumer;<br><span class="hljs-keyword">import</span> java.util.function.Function;<br><span class="hljs-keyword">import</span> java.util.function.Supplier;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 方法引用的使用</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 1.使用情境：当要传递给Lambda体的操作，已经有实现的方法了，可以使用方法引用！</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 2.方法引用，本质上就是Lambda表达式，而Lambda表达式作为函数式接口的实例。所以</span><br><span class="hljs-comment"> *   方法引用，也是函数式接口的实例。</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 3. 使用格式：  类(或对象) :: 方法名</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 4. 具体分为如下的三种情况：</span><br><span class="hljs-comment"> *    情况1     对象 :: 非静态方法</span><br><span class="hljs-comment"> *    情况2     类 :: 静态方法</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *    情况3     类 :: 非静态方法</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 5. 方法引用使用的要求：要求接口中的抽象方法的形参列表和返回值类型与方法引用的方法的</span><br><span class="hljs-comment"> *    形参列表和返回值类型相同！（针对于情况1和情况2）</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MethodRefTest</span> </span>&#123;<br><br><span class="hljs-comment">// 情况一：对象 :: 实例方法</span><br><span class="hljs-comment">//Consumer中的void accept(T t)</span><br><span class="hljs-comment">//PrintStream中的void println(T t)</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span> </span>&#123;<br>Consumer&lt;String&gt; con1 = str -&gt; System.out.println(str);<br>con1.accept(<span class="hljs-string">&quot;北京&quot;</span>);<br><br>System.out.println(<span class="hljs-string">&quot;*******************&quot;</span>);<br>PrintStream ps = System.out;<br>Consumer&lt;String&gt; con2 = ps::println;<br>con2.accept(<span class="hljs-string">&quot;beijing&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">//Supplier中的T get()</span><br><span class="hljs-comment">//Employee中的String getName()</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test2</span><span class="hljs-params">()</span> </span>&#123;<br>Employee emp = <span class="hljs-keyword">new</span> Employee(<span class="hljs-number">1001</span>,<span class="hljs-string">&quot;Tom&quot;</span>,<span class="hljs-number">23</span>,<span class="hljs-number">5600</span>);<br><br>Supplier&lt;String&gt; sup1 = () -&gt; emp.getName();<br>System.out.println(sup1.get());<br><br>System.out.println(<span class="hljs-string">&quot;*******************&quot;</span>);<br>Supplier&lt;String&gt; sup2 = emp::getName;<br>System.out.println(sup2.get());<br><br>&#125;<br><br><span class="hljs-comment">// 情况二：类 :: 静态方法</span><br><span class="hljs-comment">//Comparator中的int compare(T t1,T t2)</span><br><span class="hljs-comment">//Integer中的int compare(T t1,T t2)</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test3</span><span class="hljs-params">()</span> </span>&#123;<br>Comparator&lt;Integer&gt; com1 = (t1,t2) -&gt; Integer.compare(t1,t2);<br>System.out.println(com1.compare(<span class="hljs-number">12</span>,<span class="hljs-number">21</span>));<br><br>System.out.println(<span class="hljs-string">&quot;*******************&quot;</span>);<br><br>Comparator&lt;Integer&gt; com2 = Integer::compare;<br>System.out.println(com2.compare(<span class="hljs-number">12</span>,<span class="hljs-number">3</span>));<br><br>&#125;<br><br><span class="hljs-comment">//Function中的R apply(T t)</span><br><span class="hljs-comment">//Math中的Long round(Double d)</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test4</span><span class="hljs-params">()</span> </span>&#123;<br>Function&lt;Double,Long&gt; func = <span class="hljs-keyword">new</span> Function&lt;Double, Long&gt;() &#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Long <span class="hljs-title">apply</span><span class="hljs-params">(Double d)</span> </span>&#123;<br><span class="hljs-keyword">return</span> Math.round(d);<br>&#125;<br>&#125;;<br><br>System.out.println(<span class="hljs-string">&quot;*******************&quot;</span>);<br><br>Function&lt;Double,Long&gt; func1 = d -&gt; Math.round(d);<br>System.out.println(func1.apply(<span class="hljs-number">12.3</span>));<br><br>System.out.println(<span class="hljs-string">&quot;*******************&quot;</span>);<br><br>Function&lt;Double,Long&gt; func2 = Math::round;<br>System.out.println(func2.apply(<span class="hljs-number">12.6</span>));<br>&#125;<br><br><span class="hljs-comment">// 情况三：类 :: 实例方法  (有难度)</span><br><span class="hljs-comment">// Comparator中的int comapre(T t1,T t2)</span><br><span class="hljs-comment">// String中的int t1.compareTo(t2)</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test5</span><span class="hljs-params">()</span> </span>&#123;<br>Comparator&lt;String&gt; com1 = (s1,s2) -&gt; s1.compareTo(s2);<br>System.out.println(com1.compare(<span class="hljs-string">&quot;abc&quot;</span>,<span class="hljs-string">&quot;abd&quot;</span>));<br><br>System.out.println(<span class="hljs-string">&quot;*******************&quot;</span>);<br><br>Comparator&lt;String&gt; com2 = String :: compareTo;<br>System.out.println(com2.compare(<span class="hljs-string">&quot;abd&quot;</span>,<span class="hljs-string">&quot;abm&quot;</span>));<br>&#125;<br><br><span class="hljs-comment">//BiPredicate中的boolean test(T t1, T t2);</span><br><span class="hljs-comment">//String中的boolean t1.equals(t2)</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test6</span><span class="hljs-params">()</span> </span>&#123;<br>BiPredicate&lt;String,String&gt; pre1 = (s1,s2) -&gt; s1.equals(s2);<br>System.out.println(pre1.test(<span class="hljs-string">&quot;abc&quot;</span>,<span class="hljs-string">&quot;abc&quot;</span>));<br><br>System.out.println(<span class="hljs-string">&quot;*******************&quot;</span>);<br>BiPredicate&lt;String,String&gt; pre2 = String :: equals;<br>System.out.println(pre2.test(<span class="hljs-string">&quot;abc&quot;</span>,<span class="hljs-string">&quot;abd&quot;</span>));<br>&#125;<br><br><span class="hljs-comment">// Function中的R apply(T t)</span><br><span class="hljs-comment">// Employee中的String getName();</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test7</span><span class="hljs-params">()</span> </span>&#123;<br>Employee employee = <span class="hljs-keyword">new</span> Employee(<span class="hljs-number">1001</span>, <span class="hljs-string">&quot;Jerry&quot;</span>, <span class="hljs-number">23</span>, <span class="hljs-number">6000</span>);<br><br><br>Function&lt;Employee,String&gt; func1 = e -&gt; e.getName();<br>System.out.println(func1.apply(employee));<br><br>System.out.println(<span class="hljs-string">&quot;*******************&quot;</span>);<br><br><br>Function&lt;Employee,String&gt; func2 = Employee::getName;<br>System.out.println(func2.apply(employee));<br><br><br>&#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="18"><a href="#18" class="headerlink" title="18"></a>18</h2><h3 id="构造器引用"><a href="#构造器引用" class="headerlink" title="构造器引用"></a>构造器引用</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.java2;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Employee</span> </span>&#123;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id;<br><span class="hljs-keyword">private</span> String name;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">double</span> salary;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getId</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> id;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setId</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.id = id;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> name;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.name = name;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getAge</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> age;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> age)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.age = age;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">double</span> <span class="hljs-title">getSalary</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> salary;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setSalary</span><span class="hljs-params">(<span class="hljs-keyword">double</span> salary)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.salary = salary;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Employee</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">&quot;Employee().....&quot;</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Employee</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.id = id;<br>System.out.println(<span class="hljs-string">&quot;Employee(int id).....&quot;</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Employee</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id, String name)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.id = id;<br><span class="hljs-keyword">this</span>.name = name;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Employee</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id, String name, <span class="hljs-keyword">int</span> age, <span class="hljs-keyword">double</span> salary)</span> </span>&#123;<br><br><span class="hljs-keyword">this</span>.id = id;<br><span class="hljs-keyword">this</span>.name = name;<br><span class="hljs-keyword">this</span>.age = age;<br><span class="hljs-keyword">this</span>.salary = salary;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Employee&#123;&quot;</span> + <span class="hljs-string">&quot;id=&quot;</span> + id + <span class="hljs-string">&quot;, name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> + <span class="hljs-string">&quot;, age=&quot;</span> + age + <span class="hljs-string">&quot;, salary=&quot;</span> + salary + <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">equals</span><span class="hljs-params">(Object o)</span> </span>&#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span> == o)<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br><span class="hljs-keyword">if</span> (o == <span class="hljs-keyword">null</span> || getClass() != o.getClass())<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br><br>Employee employee = (Employee) o;<br><br><span class="hljs-keyword">if</span> (id != employee.id)<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br><span class="hljs-keyword">if</span> (age != employee.age)<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br><span class="hljs-keyword">if</span> (Double.compare(employee.salary, salary) != <span class="hljs-number">0</span>)<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br><span class="hljs-keyword">return</span> name != <span class="hljs-keyword">null</span> ? name.equals(employee.name) : employee.name == <span class="hljs-keyword">null</span>;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">hashCode</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">int</span> result;<br><span class="hljs-keyword">long</span> temp;<br>result = id;<br>result = <span class="hljs-number">31</span> * result + (name != <span class="hljs-keyword">null</span> ? name.hashCode() : <span class="hljs-number">0</span>);<br>result = <span class="hljs-number">31</span> * result + age;<br>temp = Double.doubleToLongBits(salary);<br>result = <span class="hljs-number">31</span> * result + (<span class="hljs-keyword">int</span>) (temp ^ (temp &gt;&gt;&gt; <span class="hljs-number">32</span>));<br><span class="hljs-keyword">return</span> result;<br>&#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="19-20"><a href="#19-20" class="headerlink" title="19 20"></a>19 20</h2><h3 id="Stream-API"><a href="#Stream-API" class="headerlink" title="Stream API"></a>Stream API</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.java3;<br><br><span class="hljs-keyword">import</span> com.atguigu.java2.Employee;<br><span class="hljs-keyword">import</span> com.atguigu.java2.EmployeeData;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.stream.IntStream;<br><span class="hljs-keyword">import</span> java.util.stream.Stream;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 1. Stream关注的是对数据的运算，与CPU打交道</span><br><span class="hljs-comment"> *    集合关注的是数据的存储，与内存打交道</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 2.</span><br><span class="hljs-comment"> * ①Stream 自己不会存储元素。</span><br><span class="hljs-comment"> * ②Stream 不会改变源对象。相反，他们会返回一个持有结果的新Stream。</span><br><span class="hljs-comment"> * ③Stream 操作是延迟执行的。这意味着他们会等到需要结果的时候才执行</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 3.Stream 执行流程</span><br><span class="hljs-comment"> * ① Stream的实例化</span><br><span class="hljs-comment"> * ② 一系列的中间操作（过滤、映射、...)</span><br><span class="hljs-comment"> * ③ 终止操作</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 4.说明：</span><br><span class="hljs-comment"> * 4.1 一个中间操作链，对数据源的数据进行处理</span><br><span class="hljs-comment"> * 4.2 一旦执行终止操作，就执行中间操作链，并产生结果。之后，不会再被使用</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *  测试Stream的实例化</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">StreamAPITest</span> </span>&#123;<br><br>    <span class="hljs-comment">//创建 Stream方式一：通过集合</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span></span>&#123;<br>        List&lt;Employee&gt; employees = EmployeeData.getEmployees();<br><br><span class="hljs-comment">//        default Stream&lt;E&gt; stream() : 返回一个顺序流</span><br>        Stream&lt;Employee&gt; stream = employees.stream();<br><br><span class="hljs-comment">//        default Stream&lt;E&gt; parallelStream() : 返回一个并行流</span><br>        Stream&lt;Employee&gt; parallelStream = employees.parallelStream();<br><br>    &#125;<br><br>    <span class="hljs-comment">//创建 Stream方式二：通过数组</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test2</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[]&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>&#125;;<br>        <span class="hljs-comment">//调用Arrays类的static &lt;T&gt; Stream&lt;T&gt; stream(T[] array): 返回一个流</span><br>        IntStream stream = Arrays.stream(arr);<br><br>        Employee e1 = <span class="hljs-keyword">new</span> Employee(<span class="hljs-number">1001</span>,<span class="hljs-string">&quot;Tom&quot;</span>);<br>        Employee e2 = <span class="hljs-keyword">new</span> Employee(<span class="hljs-number">1002</span>,<span class="hljs-string">&quot;Jerry&quot;</span>);<br>        Employee[] arr1 = <span class="hljs-keyword">new</span> Employee[]&#123;e1,e2&#125;;<br>        Stream&lt;Employee&gt; stream1 = Arrays.stream(arr1);<br><br>    &#125;<br>    <span class="hljs-comment">//创建 Stream方式三：通过Stream的of()</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test3</span><span class="hljs-params">()</span></span>&#123;<br><br>        Stream&lt;Integer&gt; stream = Stream.of(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>);<br><br>    &#125;<br><br>    <span class="hljs-comment">//创建 Stream方式四：创建无限流</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test4</span><span class="hljs-params">()</span></span>&#123;<br><br><span class="hljs-comment">//      迭代</span><br><span class="hljs-comment">//      public static&lt;T&gt; Stream&lt;T&gt; iterate(final T seed, final UnaryOperator&lt;T&gt; f)</span><br>        <span class="hljs-comment">//遍历前10个偶数</span><br>        Stream.iterate(<span class="hljs-number">0</span>, t -&gt; t + <span class="hljs-number">2</span>).limit(<span class="hljs-number">10</span>).forEach(System.out::println);<br><br><br><span class="hljs-comment">//      生成</span><br><span class="hljs-comment">//      public static&lt;T&gt; Stream&lt;T&gt; generate(Supplier&lt;T&gt; s)</span><br>        Stream.generate(Math::random).limit(<span class="hljs-number">10</span>).forEach(System.out::println);<br><br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="21-22-23"><a href="#21-22-23" class="headerlink" title="21 22 23"></a>21 22 23</h2><h3 id="Stream的中间操作"><a href="#Stream的中间操作" class="headerlink" title="Stream的中间操作"></a>Stream的中间操作</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.java3;<br><br><span class="hljs-keyword">import</span> com.atguigu.java2.Employee;<br><span class="hljs-keyword">import</span> com.atguigu.java2.EmployeeData;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.stream.Stream;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 测试Stream的中间操作</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">StreamAPITest1</span> </span>&#123;<br><br>    <span class="hljs-comment">//1-筛选与切片</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span></span>&#123;<br>        List&lt;Employee&gt; list = EmployeeData.getEmployees();<br><span class="hljs-comment">//        filter(Predicate p)——接收 Lambda ， 从流中排除某些元素。</span><br>        Stream&lt;Employee&gt; stream = list.stream();<br>        <span class="hljs-comment">//练习：查询员工表中薪资大于7000的员工信息</span><br>        stream.filter(e -&gt; e.getSalary() &gt; <span class="hljs-number">7000</span>).forEach(System.out::println);<br><br>        System.out.println();<br><span class="hljs-comment">//        limit(n)——截断流，使其元素不超过给定数量。</span><br>        list.stream().limit(<span class="hljs-number">3</span>).forEach(System.out::println);<br>        System.out.println();<br><br><span class="hljs-comment">//        skip(n) —— 跳过元素，返回一个扔掉了前 n 个元素的流。若流中元素不足 n 个，则返回一个空流。与 limit(n) 互补</span><br>        list.stream().skip(<span class="hljs-number">3</span>).forEach(System.out::println);<br><br>        System.out.println();<br><span class="hljs-comment">//        distinct()——筛选，通过流所生成元素的 hashCode() 和 equals() 去除重复元素</span><br><br>        list.add(<span class="hljs-keyword">new</span> Employee(<span class="hljs-number">1010</span>,<span class="hljs-string">&quot;刘强东&quot;</span>,<span class="hljs-number">40</span>,<span class="hljs-number">8000</span>));<br>        list.add(<span class="hljs-keyword">new</span> Employee(<span class="hljs-number">1010</span>,<span class="hljs-string">&quot;刘强东&quot;</span>,<span class="hljs-number">41</span>,<span class="hljs-number">8000</span>));<br>        list.add(<span class="hljs-keyword">new</span> Employee(<span class="hljs-number">1010</span>,<span class="hljs-string">&quot;刘强东&quot;</span>,<span class="hljs-number">40</span>,<span class="hljs-number">8000</span>));<br>        list.add(<span class="hljs-keyword">new</span> Employee(<span class="hljs-number">1010</span>,<span class="hljs-string">&quot;刘强东&quot;</span>,<span class="hljs-number">40</span>,<span class="hljs-number">8000</span>));<br>        list.add(<span class="hljs-keyword">new</span> Employee(<span class="hljs-number">1010</span>,<span class="hljs-string">&quot;刘强东&quot;</span>,<span class="hljs-number">40</span>,<span class="hljs-number">8000</span>));<br><br><span class="hljs-comment">//        System.out.println(list);</span><br><br>        list.stream().distinct().forEach(System.out::println);<br>    &#125;<br><br>    <span class="hljs-comment">//映射</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test2</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-comment">//        map(Function f)——接收一个函数作为参数，将元素转换成其他形式或提取信息，该函数会被应用到每个元素上，并将其映射成一个新的元素。</span><br>        List&lt;String&gt; list = Arrays.asList(<span class="hljs-string">&quot;aa&quot;</span>, <span class="hljs-string">&quot;bb&quot;</span>, <span class="hljs-string">&quot;cc&quot;</span>, <span class="hljs-string">&quot;dd&quot;</span>);<br>        list.stream().map(str -&gt; str.toUpperCase()).forEach(System.out::println);<br><br><span class="hljs-comment">//        练习1：获取员工姓名长度大于3的员工的姓名。</span><br>        List&lt;Employee&gt; employees = EmployeeData.getEmployees();<br>        Stream&lt;String&gt; namesStream = employees.stream().map(Employee::getName);<br>        namesStream.filter(name -&gt; name.length() &gt; <span class="hljs-number">3</span>).forEach(System.out::println);<br>        System.out.println();<br>        <span class="hljs-comment">//练习2：</span><br>        Stream&lt;Stream&lt;Character&gt;&gt; streamStream = list.stream().map(StreamAPITest1::fromStringToStream);<br>        streamStream.forEach(s -&gt;&#123;<br>            s.forEach(System.out::println);<br>        &#125;);<br>        System.out.println();<br><span class="hljs-comment">//        flatMap(Function f)——接收一个函数作为参数，将流中的每个值都换成另一个流，然后把所有流连接成一个流。</span><br>        Stream&lt;Character&gt; characterStream = list.stream().flatMap(StreamAPITest1::fromStringToStream);<br>        characterStream.forEach(System.out::println);<br><br>    &#125;<br><br>    <span class="hljs-comment">//将字符串中的多个字符构成的集合转换为对应的Stream的实例</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Stream&lt;Character&gt; <span class="hljs-title">fromStringToStream</span><span class="hljs-params">(String str)</span></span>&#123;<span class="hljs-comment">//aa</span><br>        ArrayList&lt;Character&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        <span class="hljs-keyword">for</span>(Character c : str.toCharArray())&#123;<br>            list.add(c);<br>        &#125;<br>       <span class="hljs-keyword">return</span> list.stream();<br><br>    &#125;<br><br><br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test3</span><span class="hljs-params">()</span></span>&#123;<br>        ArrayList list1 = <span class="hljs-keyword">new</span> ArrayList();<br>        list1.add(<span class="hljs-number">1</span>);<br>        list1.add(<span class="hljs-number">2</span>);<br>        list1.add(<span class="hljs-number">3</span>);<br><br>        ArrayList list2 = <span class="hljs-keyword">new</span> ArrayList();<br>        list2.add(<span class="hljs-number">4</span>);<br>        list2.add(<span class="hljs-number">5</span>);<br>        list2.add(<span class="hljs-number">6</span>);<br><br><span class="hljs-comment">//        list1.add(list2);</span><br>        list1.addAll(list2);<br>        System.out.println(list1);<br><br>    &#125;<br><br>    <span class="hljs-comment">//3-排序</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test4</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-comment">//        sorted()——自然排序</span><br>        List&lt;Integer&gt; list = Arrays.asList(<span class="hljs-number">12</span>, <span class="hljs-number">43</span>, <span class="hljs-number">65</span>, <span class="hljs-number">34</span>, <span class="hljs-number">87</span>, <span class="hljs-number">0</span>, -<span class="hljs-number">98</span>, <span class="hljs-number">7</span>);<br>        list.stream().sorted().forEach(System.out::println);<br>        <span class="hljs-comment">//抛异常，原因:Employee没有实现Comparable接口</span><br><span class="hljs-comment">//        List&lt;Employee&gt; employees = EmployeeData.getEmployees();</span><br><span class="hljs-comment">//        employees.stream().sorted().forEach(System.out::println);</span><br><br><br><span class="hljs-comment">//        sorted(Comparator com)——定制排序</span><br><br>        List&lt;Employee&gt; employees = EmployeeData.getEmployees();<br>        employees.stream().sorted( (e1,e2) -&gt; &#123;<br><br>           <span class="hljs-keyword">int</span> ageValue = Integer.compare(e1.getAge(),e2.getAge());<br>           <span class="hljs-keyword">if</span>(ageValue != <span class="hljs-number">0</span>)&#123;<br>               <span class="hljs-keyword">return</span> ageValue;<br>           &#125;<span class="hljs-keyword">else</span>&#123;<br>               <span class="hljs-keyword">return</span> -Double.compare(e1.getSalary(),e2.getSalary());<br>           &#125;<br><br>        &#125;).forEach(System.out::println);<br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="24-25-26"><a href="#24-25-26" class="headerlink" title="24 25 26"></a>24 25 26</h2><h3 id="Stream的终止操作"><a href="#Stream的终止操作" class="headerlink" title="Stream的终止操作"></a>Stream的终止操作</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.java3;<br><br><span class="hljs-keyword">import</span> com.atguigu.java2.Employee;<br><span class="hljs-keyword">import</span> com.atguigu.java2.EmployeeData;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.Optional;<br><span class="hljs-keyword">import</span> java.util.Set;<br><span class="hljs-keyword">import</span> java.util.stream.Collectors;<br><span class="hljs-keyword">import</span> java.util.stream.Stream;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 测试Stream的终止操作</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">StreamAPITest2</span> </span>&#123;<br><br>    <span class="hljs-comment">//1-匹配与查找</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span></span>&#123;<br>        List&lt;Employee&gt; employees = EmployeeData.getEmployees();<br><br><span class="hljs-comment">//        allMatch(Predicate p)——检查是否匹配所有元素。</span><br><span class="hljs-comment">//          练习：是否所有的员工的年龄都大于18</span><br>        <span class="hljs-keyword">boolean</span> allMatch = employees.stream().allMatch(e -&gt; e.getAge() &gt; <span class="hljs-number">18</span>);<br>        System.out.println(allMatch);<br><br><span class="hljs-comment">//        anyMatch(Predicate p)——检查是否至少匹配一个元素。</span><br><span class="hljs-comment">//         练习：是否存在员工的工资大于 10000</span><br>        <span class="hljs-keyword">boolean</span> anyMatch = employees.stream().anyMatch(e -&gt; e.getSalary() &gt; <span class="hljs-number">10000</span>);<br>        System.out.println(anyMatch);<br><br><span class="hljs-comment">//        noneMatch(Predicate p)——检查是否没有匹配的元素。</span><br><span class="hljs-comment">//          练习：是否存在员工姓“雷”</span><br>        <span class="hljs-keyword">boolean</span> noneMatch = employees.stream().noneMatch(e -&gt; e.getName().startsWith(<span class="hljs-string">&quot;雷&quot;</span>));<br>        System.out.println(noneMatch);<br><span class="hljs-comment">//        findFirst——返回第一个元素</span><br>        Optional&lt;Employee&gt; employee = employees.stream().findFirst();<br>        System.out.println(employee);<br><span class="hljs-comment">//        findAny——返回当前流中的任意元素</span><br>        Optional&lt;Employee&gt; employee1 = employees.parallelStream().findAny();<br>        System.out.println(employee1);<br><br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test2</span><span class="hljs-params">()</span></span>&#123;<br>        List&lt;Employee&gt; employees = EmployeeData.getEmployees();<br>        <span class="hljs-comment">// count——返回流中元素的总个数</span><br>        <span class="hljs-keyword">long</span> count = employees.stream().filter(e -&gt; e.getSalary() &gt; <span class="hljs-number">5000</span>).count();<br>        System.out.println(count);<br><span class="hljs-comment">//        max(Comparator c)——返回流中最大值</span><br><span class="hljs-comment">//        练习：返回最高的工资：</span><br>        Stream&lt;Double&gt; salaryStream = employees.stream().map(e -&gt; e.getSalary());<br>        Optional&lt;Double&gt; maxSalary = salaryStream.max(Double::compare);<br>        System.out.println(maxSalary);<br><span class="hljs-comment">//        min(Comparator c)——返回流中最小值</span><br><span class="hljs-comment">//        练习：返回最低工资的员工</span><br>        Optional&lt;Employee&gt; employee = employees.stream().min((e1, e2) -&gt; Double.compare(e1.getSalary(), e2.getSalary()));<br>        System.out.println(employee);<br>        System.out.println();<br><span class="hljs-comment">//        forEach(Consumer c)——内部迭代</span><br>        employees.stream().forEach(System.out::println);<br><br>        <span class="hljs-comment">//使用集合的遍历操作</span><br>        employees.forEach(System.out::println);<br>    &#125;<br><br>    <span class="hljs-comment">//2-归约</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test3</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-comment">//        reduce(T identity, BinaryOperator)——可以将流中元素反复结合起来，得到一个值。返回 T</span><br><span class="hljs-comment">//        练习1：计算1-10的自然数的和</span><br>        List&lt;Integer&gt; list = Arrays.asList(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span>);<br>        Integer sum = list.stream().reduce(<span class="hljs-number">0</span>, Integer::sum);<br>        System.out.println(sum);<br><br><br><span class="hljs-comment">//        reduce(BinaryOperator) ——可以将流中元素反复结合起来，得到一个值。返回 Optional&lt;T&gt;</span><br><span class="hljs-comment">//        练习2：计算公司所有员工工资的总和</span><br>        List&lt;Employee&gt; employees = EmployeeData.getEmployees();<br>        Stream&lt;Double&gt; salaryStream = employees.stream().map(Employee::getSalary);<br><span class="hljs-comment">//        Optional&lt;Double&gt; sumMoney = salaryStream.reduce(Double::sum);</span><br>        Optional&lt;Double&gt; sumMoney = salaryStream.reduce((d1,d2) -&gt; d1 + d2);<br>        System.out.println(sumMoney.get());<br><br>    &#125;<br><br>    <span class="hljs-comment">//3-收集</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test4</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-comment">//        collect(Collector c)——将流转换为其他形式。接收一个 Collector接口的实现，用于给Stream中元素做汇总的方法</span><br><span class="hljs-comment">//        练习1：查找工资大于6000的员工，结果返回为一个List或Set</span><br><br>        List&lt;Employee&gt; employees = EmployeeData.getEmployees();<br>        List&lt;Employee&gt; employeeList = employees.stream().filter(e -&gt; e.getSalary() &gt; <span class="hljs-number">6000</span>).collect(Collectors.toList());<br><br>        employeeList.forEach(System.out::println);<br>        System.out.println();<br>        Set&lt;Employee&gt; employeeSet = employees.stream().filter(e -&gt; e.getSalary() &gt; <span class="hljs-number">6000</span>).collect(Collectors.toSet());<br><br>        employeeSet.forEach(System.out::println);<br><br><br><br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="27"><a href="#27" class="headerlink" title="27"></a>27</h2><h3 id="Optional类"><a href="#Optional类" class="headerlink" title="Optional类"></a>Optional类</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.java4;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Boy</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> Girl girl;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Boy&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;girl=&quot;</span> + girl +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Girl <span class="hljs-title">getGirl</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> girl;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setGirl</span><span class="hljs-params">(Girl girl)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.girl = girl;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Boy</span><span class="hljs-params">()</span> </span>&#123;<br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Boy</span><span class="hljs-params">(Girl girl)</span> </span>&#123;<br><br>        <span class="hljs-keyword">this</span>.girl = girl;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.java4;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Girl</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Girl&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Girl</span><span class="hljs-params">()</span> </span>&#123;<br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Girl</span><span class="hljs-params">(String name)</span> </span>&#123;<br><br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.java4;<br><br><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.util.Optional;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Optional类：为了在程序中避免出现空指针异常而创建的。</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 常用的方法：ofNullable(T t)</span><br><span class="hljs-comment"> *            orElse(T t)</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OptionalTest</span> </span>&#123;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">Optional.of(T t) : 创建一个 Optional 实例，t必须非空；</span><br><span class="hljs-comment">Optional.empty() : 创建一个空的 Optional 实例</span><br><span class="hljs-comment">Optional.ofNullable(T t)：t可以为null</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span></span>&#123;<br>        Girl girl = <span class="hljs-keyword">new</span> Girl();<br><span class="hljs-comment">//        girl = null;</span><br>        <span class="hljs-comment">//of(T t):保证t是非空的</span><br>        Optional&lt;Girl&gt; optionalGirl = Optional.of(girl);<br><br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test2</span><span class="hljs-params">()</span></span>&#123;<br>        Girl girl = <span class="hljs-keyword">new</span> Girl();<br><span class="hljs-comment">//        girl = null;</span><br>        <span class="hljs-comment">//ofNullable(T t)：t可以为null</span><br>        Optional&lt;Girl&gt; optionalGirl = Optional.ofNullable(girl);<br>        System.out.println(optionalGirl);<br>        <span class="hljs-comment">//orElse(T t1):如果单前的Optional内部封装的t是非空的，则返回内部的t.</span><br>        <span class="hljs-comment">//如果内部的t是空的，则返回orElse()方法中的参数t1.</span><br>        Girl girl1 = optionalGirl.orElse(<span class="hljs-keyword">new</span> Girl(<span class="hljs-string">&quot;赵丽颖&quot;</span>));<br>        System.out.println(girl1);<br><br>    &#125;<br><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getGirlName</span><span class="hljs-params">(Boy boy)</span></span>&#123;<br>        <span class="hljs-keyword">return</span> boy.getGirl().getName();<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test3</span><span class="hljs-params">()</span></span>&#123;<br>        Boy boy = <span class="hljs-keyword">new</span> Boy();<br>        boy = <span class="hljs-keyword">null</span>;<br>        String girlName = getGirlName(boy);<br>        System.out.println(girlName);<br><br>    &#125;<br>    <span class="hljs-comment">//优化以后的getGirlName():</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getGirlName1</span><span class="hljs-params">(Boy boy)</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(boy != <span class="hljs-keyword">null</span>)&#123;<br>            Girl girl = boy.getGirl();<br>            <span class="hljs-keyword">if</span>(girl != <span class="hljs-keyword">null</span>)&#123;<br>                <span class="hljs-keyword">return</span> girl.getName();<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test4</span><span class="hljs-params">()</span></span>&#123;<br>        Boy boy = <span class="hljs-keyword">new</span> Boy();<br>        boy = <span class="hljs-keyword">null</span>;<br>        String girlName = getGirlName1(boy);<br>        System.out.println(girlName);<br><br>    &#125;<br><br>    <span class="hljs-comment">//使用Optional类的getGirlName():</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getGirlName2</span><span class="hljs-params">(Boy boy)</span></span>&#123;<br><br>        Optional&lt;Boy&gt; boyOptional = Optional.ofNullable(boy);<br>        <span class="hljs-comment">//此时的boy1一定非空</span><br>        Boy boy1 = boyOptional.orElse(<span class="hljs-keyword">new</span> Boy(<span class="hljs-keyword">new</span> Girl(<span class="hljs-string">&quot;迪丽热巴&quot;</span>)));<br><br>        Girl girl = boy1.getGirl();<br><br>        Optional&lt;Girl&gt; girlOptional = Optional.ofNullable(girl);<br>        <span class="hljs-comment">//girl1一定非空</span><br>        Girl girl1 = girlOptional.orElse(<span class="hljs-keyword">new</span> Girl(<span class="hljs-string">&quot;古力娜扎&quot;</span>));<br><br>        <span class="hljs-keyword">return</span> girl1.getName();<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test5</span><span class="hljs-params">()</span></span>&#123;<br>        Boy boy = <span class="hljs-keyword">null</span>;<br>        boy = <span class="hljs-keyword">new</span> Boy();<br>        boy = <span class="hljs-keyword">new</span> Boy(<span class="hljs-keyword">new</span> Girl(<span class="hljs-string">&quot;苍老师&quot;</span>));<br>        String girlName = getGirlName2(boy);<br>        System.out.println(girlName);<br><br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java核心基础30days笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java核心基础day28笔记</title>
    <link href="/2021/03/22/day28/"/>
    <url>/2021/03/22/day28/</url>
    
    <content type="html"><![CDATA[<h2 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.java;<br><br><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.lang.annotation.ElementType;<br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ReflectionTest</span> </span>&#123;<br><br><br>    <span class="hljs-comment">//反射之前，对于Person的操作</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span> </span>&#123;<br><br>        <span class="hljs-comment">//1.创建Person类的对象</span><br>        Person p1 = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;Tom&quot;</span>, <span class="hljs-number">12</span>);<br><br>        <span class="hljs-comment">//2.通过对象，调用其内部的属性、方法</span><br>        p1.age = <span class="hljs-number">10</span>;<br>        System.out.println(p1.toString());<br><br>        p1.show();<br><br>        <span class="hljs-comment">//在Person类外部，不可以通过Person类的对象调用其内部私有结构。</span><br>        <span class="hljs-comment">//比如：name、showNation()以及私有的构造器</span><br>    &#125;<br><br>    <span class="hljs-comment">//反射之后，对于Person的操作</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test2</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception</span>&#123;<br>        Class clazz = Person.class;<br>        <span class="hljs-comment">//1.通过反射，创建Person类的对象</span><br>        Constructor cons = clazz.getConstructor(String.class,<span class="hljs-keyword">int</span>.class);<br>        Object obj = cons.newInstance(<span class="hljs-string">&quot;Tom&quot;</span>, <span class="hljs-number">12</span>);<br>        Person p = (Person) obj;<br>        System.out.println(p.toString());<br>        <span class="hljs-comment">//2.通过反射，调用对象指定的属性、方法</span><br>        <span class="hljs-comment">//调用属性</span><br>        Field age = clazz.getDeclaredField(<span class="hljs-string">&quot;age&quot;</span>);<br>        age.set(p,<span class="hljs-number">10</span>);<br>        System.out.println(p.toString());<br><br>        <span class="hljs-comment">//调用方法</span><br>        Method show = clazz.getDeclaredMethod(<span class="hljs-string">&quot;show&quot;</span>);<br>        show.invoke(p);<br><br>        System.out.println(<span class="hljs-string">&quot;*******************************&quot;</span>);<br><br>        <span class="hljs-comment">//通过反射，可以调用Person类的私有结构的。比如：私有的构造器、方法、属性</span><br>        <span class="hljs-comment">//调用私有的构造器</span><br>        Constructor cons1 = clazz.getDeclaredConstructor(String.class);<br>        cons1.setAccessible(<span class="hljs-keyword">true</span>);<br>        Person p1 = (Person) cons1.newInstance(<span class="hljs-string">&quot;Jerry&quot;</span>);<br>        System.out.println(p1);<br><br>        <span class="hljs-comment">//调用私有的属性</span><br>        Field name = clazz.getDeclaredField(<span class="hljs-string">&quot;name&quot;</span>);<br>        name.setAccessible(<span class="hljs-keyword">true</span>);<br>        name.set(p1,<span class="hljs-string">&quot;HanMeimei&quot;</span>);<br>        System.out.println(p1);<br><br>        <span class="hljs-comment">//调用私有的方法</span><br>        Method showNation = clazz.getDeclaredMethod(<span class="hljs-string">&quot;showNation&quot;</span>, String.class);<br>        showNation.setAccessible(<span class="hljs-keyword">true</span>);<br>        String nation = (String) showNation.invoke(p1,<span class="hljs-string">&quot;中国&quot;</span>);<span class="hljs-comment">//相当于String nation = p1.showNation(&quot;中国&quot;)</span><br>        System.out.println(nation);<br><br><br>    &#125;<br>    <span class="hljs-comment">//疑问1：通过直接new的方式或反射的方式都可以调用公共的结构，开发中到底用那个？</span><br>    <span class="hljs-comment">//建议：直接new的方式。</span><br>    <span class="hljs-comment">//什么时候会使用：反射的方式。 反射的特征：动态性</span><br>    <span class="hljs-comment">//疑问2：反射机制与面向对象中的封装性是不是矛盾的？如何看待两个技术？</span><br>    <span class="hljs-comment">//不矛盾。</span><br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    关于java.lang.Class类的理解</span><br><span class="hljs-comment">    1.类的加载过程：</span><br><span class="hljs-comment">    程序经过javac.exe命令以后，会生成一个或多个字节码文件(.class结尾)。</span><br><span class="hljs-comment">    接着我们使用java.exe命令对某个字节码文件进行解释运行。相当于将某个字节码文件</span><br><span class="hljs-comment">    加载到内存中。此过程就称为类的加载。加载到内存中的类，我们就称为运行时类，此</span><br><span class="hljs-comment">    运行时类，就作为Class的一个实例。</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    2.换句话说，Class的实例就对应着一个运行时类。</span><br><span class="hljs-comment">    3.加载到内存中的运行时类，会缓存一定的时间。在此时间之内，我们可以通过不同的方式</span><br><span class="hljs-comment">    来获取此运行时类。</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-comment">//获取Class的实例的方式（前三种方式需要掌握）</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test3</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ClassNotFoundException </span>&#123;<br>        <span class="hljs-comment">//方式一：调用运行时类的属性：.class</span><br>        Class clazz1 = Person.class;<br>        System.out.println(clazz1);<br>        <span class="hljs-comment">//方式二：通过运行时类的对象,调用getClass()</span><br>        Person p1 = <span class="hljs-keyword">new</span> Person();<br>        Class clazz2 = p1.getClass();<br>        System.out.println(clazz2);<br><br>        <span class="hljs-comment">//方式三：调用Class的静态方法：forName(String classPath)</span><br>        Class clazz3 = Class.forName(<span class="hljs-string">&quot;com.atguigu.java.Person&quot;</span>);<br><span class="hljs-comment">//        clazz3 = Class.forName(&quot;java.lang.String&quot;);</span><br>        System.out.println(clazz3);<br><br>        System.out.println(clazz1 == clazz2);<br>        System.out.println(clazz1 == clazz3);<br><br>        <span class="hljs-comment">//方式四：使用类的加载器：ClassLoader  (了解)</span><br>        ClassLoader classLoader = ReflectionTest.class.getClassLoader();<br>        Class clazz4 = classLoader.loadClass(<span class="hljs-string">&quot;com.atguigu.java.Person&quot;</span>);<br>        System.out.println(clazz4);<br><br>        System.out.println(clazz1 == clazz4);<br><br>    &#125;<br><br><br>    <span class="hljs-comment">//万事万物皆对象？对象.xxx,File,URL,反射,前端、数据库操作</span><br><br><br>    <span class="hljs-comment">//Class实例可以是哪些结构的说明：</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test4</span><span class="hljs-params">()</span></span>&#123;<br>        Class c1 = Object.class;<br>        Class c2 = Comparable.class;<br>        Class c3 = String[].class;<br>        Class c4 = <span class="hljs-keyword">int</span>[][].class;<br>        Class c5 = ElementType.class;<br>        Class c6 = Override.class;<br>        Class c7 = <span class="hljs-keyword">int</span>.class;<br>        Class c8 = <span class="hljs-keyword">void</span>.class;<br>        Class c9 = Class.class;<br><br>        <span class="hljs-keyword">int</span>[] a = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">10</span>];<br>        <span class="hljs-keyword">int</span>[] b = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">100</span>];<br>        Class c10 = a.getClass();<br>        Class c11 = b.getClass();<br>        <span class="hljs-comment">// 只要数组的元素类型与维度一样，就是同一个Class</span><br>        System.out.println(c10 == c11);<br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.java;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> age;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Person&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getAge</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> age)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Person</span><span class="hljs-params">(String name, <span class="hljs-keyword">int</span> age)</span> </span>&#123;<br><br>        <span class="hljs-keyword">this</span>.name = name;<br>        <span class="hljs-keyword">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Person</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Person</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Person()&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">show</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;你好，我是一个人&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> String <span class="hljs-title">showNation</span><span class="hljs-params">(String nation)</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;我的国籍是：&quot;</span> + nation);<br>        <span class="hljs-keyword">return</span> nation;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="了解类的加载器"><a href="#了解类的加载器" class="headerlink" title="了解类的加载器"></a>了解类的加载器</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.java;<br><br><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.util.Properties;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 了解类的加载器</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ClassLoaderTest</span> </span>&#123;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">//对于自定义类，使用系统类加载器进行加载</span><br>        ClassLoader classLoader = ClassLoaderTest.class.getClassLoader();<br>        System.out.println(classLoader);<br>        <span class="hljs-comment">//调用系统类加载器的getParent()：获取扩展类加载器</span><br>        ClassLoader classLoader1 = classLoader.getParent();<br>        System.out.println(classLoader1);<br>        <span class="hljs-comment">//调用扩展类加载器的getParent()：无法获取引导类加载器</span><br>        <span class="hljs-comment">//引导类加载器主要负责加载java的核心类库，无法加载自定义类的。</span><br>        ClassLoader classLoader2 = classLoader1.getParent();<br>        System.out.println(classLoader2);<br><br>        ClassLoader classLoader3 = String.class.getClassLoader();<br>        System.out.println(classLoader3);<br><br>    &#125;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    Properties：用来读取配置文件。</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test2</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br><br>        Properties pros =  <span class="hljs-keyword">new</span> Properties();<br>        <span class="hljs-comment">//此时的文件默认在当前的module下。</span><br>        <span class="hljs-comment">//读取配置文件的方式一：</span><br><span class="hljs-comment">//        FileInputStream fis = new FileInputStream(&quot;jdbc.properties&quot;);</span><br><span class="hljs-comment">//        FileInputStream fis = new FileInputStream(&quot;src\\jdbc1.properties&quot;);</span><br><span class="hljs-comment">//        pros.load(fis);</span><br><br>        <span class="hljs-comment">//读取配置文件的方式二：使用ClassLoader</span><br>        <span class="hljs-comment">//配置文件默认识别为：当前module的src下</span><br>        ClassLoader classLoader = ClassLoaderTest.class.getClassLoader();<br>        InputStream is = classLoader.getResourceAsStream(<span class="hljs-string">&quot;jdbc1.properties&quot;</span>);<br>        pros.load(is);<br><br><br>        String user = pros.getProperty(<span class="hljs-string">&quot;user&quot;</span>);<br>        String password = pros.getProperty(<span class="hljs-string">&quot;password&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;user = &quot;</span> + user + <span class="hljs-string">&quot;,password = &quot;</span> + password);<br><br><br><br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="通过反射创建对应的运行时类的对象"><a href="#通过反射创建对应的运行时类的对象" class="headerlink" title="通过反射创建对应的运行时类的对象"></a>通过反射创建对应的运行时类的对象</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">ackage com.atguigu.java;<br><br><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.util.Random;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 通过反射创建对应的运行时类的对象</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NewInstanceTest</span> </span>&#123;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IllegalAccessException, InstantiationException </span>&#123;<br><br>        Class&lt;Person&gt; clazz = Person.class;<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        newInstance():调用此方法，创建对应的运行时类的对象。内部调用了运行时类的空参的构造器。</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        要想此方法正常的创建运行时类的对象，要求：</span><br><span class="hljs-comment">        1.运行时类必须提供空参的构造器</span><br><span class="hljs-comment">        2.空参的构造器的访问权限得够。通常，设置为public。</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        在javabean中要求提供一个public的空参构造器。原因：</span><br><span class="hljs-comment">        1.便于通过反射，创建运行时类的对象</span><br><span class="hljs-comment">        2.便于子类继承此运行时类时，默认调用super()时，保证父类有此构造器</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">         */</span><br>        Person obj = clazz.newInstance();<br>        System.out.println(obj);<br><br>    &#125;<br><br>    <span class="hljs-comment">//体会反射的动态性</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test2</span><span class="hljs-params">()</span></span>&#123;<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i &lt; <span class="hljs-number">100</span>;i++)&#123;<br>            <span class="hljs-keyword">int</span> num = <span class="hljs-keyword">new</span> Random().nextInt(<span class="hljs-number">3</span>);<span class="hljs-comment">//0,1,2</span><br>            String classPath = <span class="hljs-string">&quot;&quot;</span>;<br>            <span class="hljs-keyword">switch</span>(num)&#123;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br>                    classPath = <span class="hljs-string">&quot;java.util.Date&quot;</span>;<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>                    classPath = <span class="hljs-string">&quot;java.lang.Object&quot;</span>;<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>                    classPath = <span class="hljs-string">&quot;com.atguigu.java.Person&quot;</span>;<br>                    <span class="hljs-keyword">break</span>;<br>            &#125;<br><br>            <span class="hljs-keyword">try</span> &#123;<br>                Object obj = getInstance(classPath);<br>                System.out.println(obj);<br>            &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br><br><br><br>    &#125;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    创建一个指定类的对象。</span><br><span class="hljs-comment">    classPath:指定类的全类名</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">getInstance</span><span class="hljs-params">(String classPath)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>       Class clazz =  Class.forName(classPath);<br>       <span class="hljs-keyword">return</span> clazz.newInstance();<br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.java1;<br><br><span class="hljs-keyword">import</span> java.io.Serializable;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Creature</span>&lt;<span class="hljs-title">T</span>&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title">Serializable</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">char</span> gender;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">double</span> weight;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">breath</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;生物呼吸&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">eat</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;生物吃东西&quot;</span>);<br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.java1;<br><br><span class="hljs-meta">@MyAnnotation(value=&quot;hi&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Creature</span>&lt;<span class="hljs-title">String</span>&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title">Comparable</span>&lt;<span class="hljs-title">String</span>&gt;,<span class="hljs-title">MyInterface</span></span>&#123;<br><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">int</span> age;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> id;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Person</span><span class="hljs-params">()</span></span>&#123;&#125;<br><br>    <span class="hljs-meta">@MyAnnotation(value=&quot;abc&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Person</span><span class="hljs-params">(String name)</span></span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>     Person(String name,<span class="hljs-keyword">int</span> age)&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>        <span class="hljs-keyword">this</span>.age = age;<br>    &#125;<br>    <span class="hljs-meta">@MyAnnotation</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> String <span class="hljs-title">show</span><span class="hljs-params">(String nation)</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;我的国籍是：&quot;</span> + nation);<br>        <span class="hljs-keyword">return</span> nation;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">display</span><span class="hljs-params">(String interests,<span class="hljs-keyword">int</span> age)</span> <span class="hljs-keyword">throws</span> NullPointerException,ClassCastException</span>&#123;<br>        <span class="hljs-keyword">return</span> interests + age;<br>    &#125;<br><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">info</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;我是一个人&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">compareTo</span><span class="hljs-params">(String o)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">showDesc</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;我是一个可爱的人&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Person&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&quot;, id=&quot;</span> + id +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="获取当前运行时类的属性结构"><a href="#获取当前运行时类的属性结构" class="headerlink" title="获取当前运行时类的属性结构"></a>获取当前运行时类的属性结构</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.java2;<br><br><span class="hljs-keyword">import</span> com.atguigu.java1.Person;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.lang.reflect.Modifier;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 获取当前运行时类的属性结构</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FieldTest</span> </span>&#123;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span></span>&#123;<br><br>        Class clazz = Person.class;<br><br>        <span class="hljs-comment">//获取属性结构</span><br>        <span class="hljs-comment">//getFields():获取当前运行时类及其父类中声明为public访问权限的属性</span><br>        Field[] fields = clazz.getFields();<br>        <span class="hljs-keyword">for</span>(Field f : fields)&#123;<br>            System.out.println(f);<br>        &#125;<br>        System.out.println();<br><br>        <span class="hljs-comment">//getDeclaredFields():获取当前运行时类中声明的所有属性。（不包含父类中声明的属性）</span><br>        Field[] declaredFields = clazz.getDeclaredFields();<br>        <span class="hljs-keyword">for</span>(Field f : declaredFields)&#123;<br>            System.out.println(f);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//权限修饰符  数据类型 变量名</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test2</span><span class="hljs-params">()</span></span>&#123;<br>        Class clazz = Person.class;<br>        Field[] declaredFields = clazz.getDeclaredFields();<br>        <span class="hljs-keyword">for</span>(Field f : declaredFields)&#123;<br>            <span class="hljs-comment">//1.权限修饰符</span><br>            <span class="hljs-keyword">int</span> modifier = f.getModifiers();<br>            System.out.print(Modifier.toString(modifier) + <span class="hljs-string">&quot;\t&quot;</span>);<br><br>            <span class="hljs-comment">//2.数据类型</span><br>            Class type = f.getType();<br>            System.out.print(type.getName() + <span class="hljs-string">&quot;\t&quot;</span>);<br><br>            <span class="hljs-comment">//3.变量名</span><br>            String fName = f.getName();<br>            System.out.print(fName);<br><br>            System.out.println();<br>        &#125;<br><br><br>    &#125;<br><br><br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="获取运行时类的方法结构"><a href="#获取运行时类的方法结构" class="headerlink" title="获取运行时类的方法结构"></a>获取运行时类的方法结构</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.java2;<br><br><span class="hljs-keyword">import</span> com.atguigu.java1.Person;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.lang.annotation.Annotation;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><span class="hljs-keyword">import</span> java.lang.reflect.Modifier;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 获取运行时类的方法结构</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MethodTest</span> </span>&#123;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span></span>&#123;<br><br>        Class clazz = Person.class;<br><br>        <span class="hljs-comment">//getMethods():获取当前运行时类及其所有父类中声明为public权限的方法</span><br>        Method[] methods = clazz.getMethods();<br>        <span class="hljs-keyword">for</span>(Method m : methods)&#123;<br>            System.out.println(m);<br>        &#125;<br>        System.out.println();<br>        <span class="hljs-comment">//getDeclaredMethods():获取当前运行时类中声明的所有方法。（不包含父类中声明的方法）</span><br>        Method[] declaredMethods = clazz.getDeclaredMethods();<br>        <span class="hljs-keyword">for</span>(Method m : declaredMethods)&#123;<br>            System.out.println(m);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    @Xxxx</span><br><span class="hljs-comment">    权限修饰符  返回值类型  方法名(参数类型1 形参名1,...) throws XxxException&#123;&#125;</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test2</span><span class="hljs-params">()</span></span>&#123;<br>        Class clazz = Person.class;<br>        Method[] declaredMethods = clazz.getDeclaredMethods();<br>        <span class="hljs-keyword">for</span>(Method m : declaredMethods)&#123;<br>            <span class="hljs-comment">//1.获取方法声明的注解</span><br>            Annotation[] annos = m.getAnnotations();<br>            <span class="hljs-keyword">for</span>(Annotation a : annos)&#123;<br>                System.out.println(a);<br>            &#125;<br><br>            <span class="hljs-comment">//2.权限修饰符</span><br>            System.out.print(Modifier.toString(m.getModifiers()) + <span class="hljs-string">&quot;\t&quot;</span>);<br><br>            <span class="hljs-comment">//3.返回值类型</span><br>            System.out.print(m.getReturnType().getName() + <span class="hljs-string">&quot;\t&quot;</span>);<br><br>            <span class="hljs-comment">//4.方法名</span><br>            System.out.print(m.getName());<br>            System.out.print(<span class="hljs-string">&quot;(&quot;</span>);<br>            <span class="hljs-comment">//5.形参列表</span><br>            Class[] parameterTypes = m.getParameterTypes();<br>            <span class="hljs-keyword">if</span>(!(parameterTypes == <span class="hljs-keyword">null</span> &amp;&amp; parameterTypes.length == <span class="hljs-number">0</span>))&#123;<br>                <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i &lt; parameterTypes.length;i++)&#123;<br><br>                    <span class="hljs-keyword">if</span>(i == parameterTypes.length - <span class="hljs-number">1</span>)&#123;<br>                        System.out.print(parameterTypes[i].getName() + <span class="hljs-string">&quot; args_&quot;</span> + i);<br>                        <span class="hljs-keyword">break</span>;<br>                    &#125;<br><br>                    System.out.print(parameterTypes[i].getName() + <span class="hljs-string">&quot; args_&quot;</span> + i + <span class="hljs-string">&quot;,&quot;</span>);<br>                &#125;<br>            &#125;<br><br>            System.out.print(<span class="hljs-string">&quot;)&quot;</span>);<br><br>            <span class="hljs-comment">//6.抛出的异常</span><br>            Class[] exceptionTypes = m.getExceptionTypes();<br>            <span class="hljs-keyword">if</span>(exceptionTypes.length &gt; <span class="hljs-number">0</span>)&#123;<br>                System.out.print(<span class="hljs-string">&quot;throws &quot;</span>);<br>                <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i &lt; exceptionTypes.length;i++)&#123;<br>                    <span class="hljs-keyword">if</span>(i == exceptionTypes.length - <span class="hljs-number">1</span>)&#123;<br>                        System.out.print(exceptionTypes[i].getName());<br>                        <span class="hljs-keyword">break</span>;<br>                    &#125;<br><br>                    System.out.print(exceptionTypes[i].getName() + <span class="hljs-string">&quot;,&quot;</span>);<br>                &#125;<br>            &#125;<br><br><br>            System.out.println();<br>        &#125;<br><br><br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="获取构造器结构"><a href="#获取构造器结构" class="headerlink" title="获取构造器结构"></a>获取构造器结构</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.java2;<br><br><span class="hljs-keyword">import</span> com.atguigu.java1.Person;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.lang.annotation.Annotation;<br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.lang.reflect.ParameterizedType;<br><span class="hljs-keyword">import</span> java.lang.reflect.Type;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OtherTest</span> </span>&#123;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    获取构造器结构</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span></span>&#123;<br><br>        Class clazz = Person.class;<br>        <span class="hljs-comment">//getConstructors():获取当前运行时类中声明为public的构造器</span><br>        Constructor[] constructors = clazz.getConstructors();<br>        <span class="hljs-keyword">for</span>(Constructor c : constructors)&#123;<br>            System.out.println(c);<br>        &#125;<br><br>        System.out.println();<br>        <span class="hljs-comment">//getDeclaredConstructors():获取当前运行时类中声明的所有的构造器</span><br>        Constructor[] declaredConstructors = clazz.getDeclaredConstructors();<br>        <span class="hljs-keyword">for</span>(Constructor c : declaredConstructors)&#123;<br>            System.out.println(c);<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    获取运行时类的父类</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test2</span><span class="hljs-params">()</span></span>&#123;<br>        Class clazz = Person.class;<br><br>        Class superclass = clazz.getSuperclass();<br>        System.out.println(superclass);<br>    &#125;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    获取运行时类的带泛型的父类</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test3</span><span class="hljs-params">()</span></span>&#123;<br>        Class clazz = Person.class;<br><br>        Type genericSuperclass = clazz.getGenericSuperclass();<br>        System.out.println(genericSuperclass);<br>    &#125;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    获取运行时类的带泛型的父类的泛型</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    代码：逻辑性代码  vs 功能性代码</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test4</span><span class="hljs-params">()</span></span>&#123;<br>        Class clazz = Person.class;<br><br>        Type genericSuperclass = clazz.getGenericSuperclass();<br>        ParameterizedType paramType = (ParameterizedType) genericSuperclass;<br>        <span class="hljs-comment">//获取泛型类型</span><br>        Type[] actualTypeArguments = paramType.getActualTypeArguments();<br><span class="hljs-comment">//        System.out.println(actualTypeArguments[0].getTypeName());</span><br>        System.out.println(((Class)actualTypeArguments[<span class="hljs-number">0</span>]).getName());<br>    &#125;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    获取运行时类实现的接口</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test5</span><span class="hljs-params">()</span></span>&#123;<br>        Class clazz = Person.class;<br><br>        Class[] interfaces = clazz.getInterfaces();<br>        <span class="hljs-keyword">for</span>(Class c : interfaces)&#123;<br>            System.out.println(c);<br>        &#125;<br><br>        System.out.println();<br>        <span class="hljs-comment">//获取运行时类的父类实现的接口</span><br>        Class[] interfaces1 = clazz.getSuperclass().getInterfaces();<br>        <span class="hljs-keyword">for</span>(Class c : interfaces1)&#123;<br>            System.out.println(c);<br>        &#125;<br><br>    &#125;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">        获取运行时类所在的包</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test6</span><span class="hljs-params">()</span></span>&#123;<br>        Class clazz = Person.class;<br><br>        Package pack = clazz.getPackage();<br>        System.out.println(pack);<br>    &#125;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">        获取运行时类声明的注解</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test7</span><span class="hljs-params">()</span></span>&#123;<br>        Class clazz = Person.class;<br><br>        Annotation[] annotations = clazz.getAnnotations();<br>        <span class="hljs-keyword">for</span>(Annotation annos : annotations)&#123;<br>            System.out.println(annos);<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="调用运行时类中指定的结构：属性、方法、构造器"><a href="#调用运行时类中指定的结构：属性、方法、构造器" class="headerlink" title="调用运行时类中指定的结构：属性、方法、构造器"></a>调用运行时类中指定的结构：属性、方法、构造器</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.java2;<br><br><span class="hljs-keyword">import</span> com.atguigu.java1.Person;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 调用运行时类中指定的结构：属性、方法、构造器</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ReflectionTest</span> </span>&#123;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        不需要掌握</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testField</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        Class clazz = Person.class;<br><br>        <span class="hljs-comment">//创建运行时类的对象</span><br>        Person p = (Person) clazz.newInstance();<br><br><br>        <span class="hljs-comment">//获取指定的属性：要求运行时类中属性声明为public</span><br>        <span class="hljs-comment">//通常不采用此方法</span><br>        Field id = clazz.getField(<span class="hljs-string">&quot;id&quot;</span>);<br><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        设置当前属性的值</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        set():参数1：指明设置哪个对象的属性   参数2：将此属性值设置为多少</span><br><span class="hljs-comment">         */</span><br><br>        id.set(p,<span class="hljs-number">1001</span>);<br><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        获取当前属性的值</span><br><span class="hljs-comment">        get():参数1：获取哪个对象的当前属性值</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">int</span> pId = (<span class="hljs-keyword">int</span>) id.get(p);<br>        System.out.println(pId);<br><br><br>    &#125;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    如何操作运行时类中的指定的属性 -- 需要掌握</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testField1</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        Class clazz = Person.class;<br><br>        <span class="hljs-comment">//创建运行时类的对象</span><br>        Person p = (Person) clazz.newInstance();<br><br>        <span class="hljs-comment">//1. getDeclaredField(String fieldName):获取运行时类中指定变量名的属性</span><br>        Field name = clazz.getDeclaredField(<span class="hljs-string">&quot;name&quot;</span>);<br><br>        <span class="hljs-comment">//2.保证当前属性是可访问的</span><br>        name.setAccessible(<span class="hljs-keyword">true</span>);<br>        <span class="hljs-comment">//3.获取、设置指定对象的此属性值</span><br>        name.set(p,<span class="hljs-string">&quot;Tom&quot;</span>);<br><br>        System.out.println(name.get(p));<br>    &#125;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    如何操作运行时类中的指定的方法 -- 需要掌握</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testMethod</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br><br>        Class clazz = Person.class;<br><br>        <span class="hljs-comment">//创建运行时类的对象</span><br>        Person p = (Person) clazz.newInstance();<br><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        1.获取指定的某个方法</span><br><span class="hljs-comment">        getDeclaredMethod():参数1 ：指明获取的方法的名称  参数2：指明获取的方法的形参列表</span><br><span class="hljs-comment">         */</span><br>        Method show = clazz.getDeclaredMethod(<span class="hljs-string">&quot;show&quot;</span>, String.class);<br>        <span class="hljs-comment">//2.保证当前方法是可访问的</span><br>        show.setAccessible(<span class="hljs-keyword">true</span>);<br><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        3. 调用方法的invoke():参数1：方法的调用者  参数2：给方法形参赋值的实参</span><br><span class="hljs-comment">        invoke()的返回值即为对应类中调用的方法的返回值。</span><br><span class="hljs-comment">         */</span><br>        Object returnValue = show.invoke(p,<span class="hljs-string">&quot;CHN&quot;</span>); <span class="hljs-comment">//String nation = p.show(&quot;CHN&quot;);</span><br>        System.out.println(returnValue);<br><br>        System.out.println(<span class="hljs-string">&quot;*************如何调用静态方法*****************&quot;</span>);<br><br>        <span class="hljs-comment">// private static void showDesc()</span><br><br>        Method showDesc = clazz.getDeclaredMethod(<span class="hljs-string">&quot;showDesc&quot;</span>);<br>        showDesc.setAccessible(<span class="hljs-keyword">true</span>);<br>        <span class="hljs-comment">//如果调用的运行时类中的方法没有返回值，则此invoke()返回null</span><br><span class="hljs-comment">//        Object returnVal = showDesc.invoke(null);</span><br>        Object returnVal = showDesc.invoke(Person.class);<br>        System.out.println(returnVal);<span class="hljs-comment">//null</span><br><br>    &#125;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    如何调用运行时类中的指定的构造器</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testConstructor</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        Class clazz = Person.class;<br><br>        <span class="hljs-comment">//private Person(String name)</span><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        1.获取指定的构造器</span><br><span class="hljs-comment">        getDeclaredConstructor():参数：指明构造器的参数列表</span><br><span class="hljs-comment">         */</span><br><br>        Constructor constructor = clazz.getDeclaredConstructor(String.class);<br><br>        <span class="hljs-comment">//2.保证此构造器是可访问的</span><br>        constructor.setAccessible(<span class="hljs-keyword">true</span>);<br><br>        <span class="hljs-comment">//3.调用此构造器创建运行时类的对象</span><br>        Person per = (Person) constructor.newInstance(<span class="hljs-string">&quot;Tom&quot;</span>);<br>        System.out.println(per);<br><br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java核心基础30days笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java核心基础day27笔记</title>
    <link href="/2021/03/21/day27/"/>
    <url>/2021/03/21/day27/</url>
    
    <content type="html"><![CDATA[<h2 id="07-08-09-10"><a href="#07-08-09-10" class="headerlink" title="07 08 09 10"></a>07 08 09 10</h2><h3 id="对象流"><a href="#对象流" class="headerlink" title="对象流"></a>对象流</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 对象流的使用</span><br><span class="hljs-comment"> * 1.ObjectInputStream 和 ObjectOutputStream</span><br><span class="hljs-comment"> * 2.作用：用于存储和读取基本数据类型数据或对象的处理流。它的强大之处就是可以把Java中的对象写入到数据源中，也能把对象从数据源中还原回来。</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 3.要想一个java对象是可序列化的，需要满足相应的要求。见Person.java</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 4.序列化机制：</span><br><span class="hljs-comment"> * 对象序列化机制允许把内存中的Java对象转换成平台无关的二进制流，从而允许把这种</span><br><span class="hljs-comment"> * 二进制流持久地保存在磁盘上，或通过网络将这种二进制流传输到另一个网络节点。</span><br><span class="hljs-comment"> * 当其它程序获取了这种二进制流，就可以恢复成原来的Java对象。</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ObjectInputOutputStreamTest</span> </span>&#123;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    序列化过程：将内存中的java对象保存到磁盘中或通过网络传输出去</span><br><span class="hljs-comment">    使用ObjectOutputStream实现</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testObjectOutputStream</span><span class="hljs-params">()</span></span>&#123;<br>        ObjectOutputStream oos = <span class="hljs-keyword">null</span>;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//1.</span><br>            oos = <span class="hljs-keyword">new</span> ObjectOutputStream(<span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-string">&quot;object.dat&quot;</span>));<br>            <span class="hljs-comment">//2.</span><br>            oos.writeObject(<span class="hljs-keyword">new</span> String(<span class="hljs-string">&quot;我爱北京天安门&quot;</span>));<br>            oos.flush();<span class="hljs-comment">//刷新操作</span><br><br>            oos.writeObject(<span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;王铭&quot;</span>,<span class="hljs-number">23</span>));<br>            oos.flush();<br><br>            oos.writeObject(<span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;张学良&quot;</span>,<span class="hljs-number">23</span>,<span class="hljs-number">1001</span>,<span class="hljs-keyword">new</span> Account(<span class="hljs-number">5000</span>)));<br>            oos.flush();<br><br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">if</span>(oos != <span class="hljs-keyword">null</span>)&#123;<br>                <span class="hljs-comment">//3.</span><br>                <span class="hljs-keyword">try</span> &#123;<br>                    oos.close();<br>                &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br><br>            &#125;<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    反序列化：将磁盘文件中的对象还原为内存中的一个java对象</span><br><span class="hljs-comment">    使用ObjectInputStream来实现</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testObjectInputStream</span><span class="hljs-params">()</span></span>&#123;<br>        ObjectInputStream ois = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            ois = <span class="hljs-keyword">new</span> ObjectInputStream(<span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-string">&quot;object.dat&quot;</span>));<br><br>            Object obj = ois.readObject();<br>            String str = (String) obj;<br><br>            Person p = (Person) ois.readObject();<br>            Person p1 = (Person) ois.readObject();<br><br>            System.out.println(str);<br>            System.out.println(p);<br>            System.out.println(p1);<br><br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">if</span>(ois != <span class="hljs-keyword">null</span>)&#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    ois.close();<br>                &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br><br>            &#125;<br>        &#125;<br><br><br><br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.Serializable;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Person需要满足如下的要求，方可序列化</span><br><span class="hljs-comment"> * 1.需要实现接口：Serializable</span><br><span class="hljs-comment"> * 2.当前类提供一个全局常量：serialVersionUID</span><br><span class="hljs-comment"> * 3.除了当前Person类需要实现Serializable接口之外，还必须保证其内部所有属性</span><br><span class="hljs-comment"> *   也必须是可序列化的。（默认情况下，基本数据类型可序列化）</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 补充：ObjectOutputStream和ObjectInputStream不能序列化static和transient修饰的成员变量</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Serializable</span></span>&#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> serialVersionUID = <span class="hljs-number">475463534532L</span>;<br><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id;<br>    <span class="hljs-keyword">private</span> Account acct;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Person</span><span class="hljs-params">(String name, <span class="hljs-keyword">int</span> age, <span class="hljs-keyword">int</span> id)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>        <span class="hljs-keyword">this</span>.age = age;<br>        <span class="hljs-keyword">this</span>.id = id;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Person</span><span class="hljs-params">(String name, <span class="hljs-keyword">int</span> age, <span class="hljs-keyword">int</span> id, Account acct)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>        <span class="hljs-keyword">this</span>.age = age;<br>        <span class="hljs-keyword">this</span>.id = id;<br>        <span class="hljs-keyword">this</span>.acct = acct;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Person&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&quot;, id=&quot;</span> + id +<br>                <span class="hljs-string">&quot;, acct=&quot;</span> + acct +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getId</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> id;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setId</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.id = id;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getAge</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> age)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Person</span><span class="hljs-params">(String name, <span class="hljs-keyword">int</span> age)</span> </span>&#123;<br><br>        <span class="hljs-keyword">this</span>.name = name;<br>        <span class="hljs-keyword">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Person</span><span class="hljs-params">()</span> </span>&#123;<br><br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Account</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Serializable</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> serialVersionUID = <span class="hljs-number">4754534532L</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">double</span> balance;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Account&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;balance=&quot;</span> + balance +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">double</span> <span class="hljs-title">getBalance</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> balance;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setBalance</span><span class="hljs-params">(<span class="hljs-keyword">double</span> balance)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.balance = balance;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Account</span><span class="hljs-params">(<span class="hljs-keyword">double</span> balance)</span> </span>&#123;<br><br>        <span class="hljs-keyword">this</span>.balance = balance;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="11-12"><a href="#11-12" class="headerlink" title="11 12"></a>11 12</h2><h3 id="随机存取文件流"><a href="#随机存取文件流" class="headerlink" title="随机存取文件流"></a>随机存取文件流</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.RandomAccessFile;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * RandomAccessFile的使用</span><br><span class="hljs-comment"> * 1.RandomAccessFile直接继承于java.lang.Object类，实现了DataInput和DataOutput接口</span><br><span class="hljs-comment"> * 2.RandomAccessFile既可以作为一个输入流，又可以作为一个输出流</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 3.如果RandomAccessFile作为输出流时，写出到的文件如果不存在，则在执行过程中自动创建。</span><br><span class="hljs-comment"> *   如果写出到的文件存在，则会对原有文件内容进行覆盖。（默认情况下，从头覆盖）</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 4. 可以通过相关的操作，实现RandomAccessFile“插入”数据的效果</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RandomAccessFileTest</span> </span>&#123;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span> </span>&#123;<br><br>        RandomAccessFile raf1 = <span class="hljs-keyword">null</span>;<br>        RandomAccessFile raf2 = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//1.</span><br>            raf1 = <span class="hljs-keyword">new</span> RandomAccessFile(<span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;爱情与友情.jpg&quot;</span>),<span class="hljs-string">&quot;r&quot;</span>);<br>            raf2 = <span class="hljs-keyword">new</span> RandomAccessFile(<span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;爱情与友情1.jpg&quot;</span>),<span class="hljs-string">&quot;rw&quot;</span>);<br>            <span class="hljs-comment">//2.</span><br>            <span class="hljs-keyword">byte</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span>];<br>            <span class="hljs-keyword">int</span> len;<br>            <span class="hljs-keyword">while</span>((len = raf1.read(buffer)) != -<span class="hljs-number">1</span>)&#123;<br>                raf2.write(buffer,<span class="hljs-number">0</span>,len);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-comment">//3.</span><br>            <span class="hljs-keyword">if</span>(raf1 != <span class="hljs-keyword">null</span>)&#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    raf1.close();<br>                &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br><br>            &#125;<br>            <span class="hljs-keyword">if</span>(raf2 != <span class="hljs-keyword">null</span>)&#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    raf2.close();<br>                &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br><br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test2</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br><br>        RandomAccessFile raf1 = <span class="hljs-keyword">new</span> RandomAccessFile(<span class="hljs-string">&quot;hello.txt&quot;</span>,<span class="hljs-string">&quot;rw&quot;</span>);<br><br>        raf1.seek(<span class="hljs-number">3</span>);<span class="hljs-comment">//将指针调到角标为3的位置</span><br>        raf1.write(<span class="hljs-string">&quot;xyz&quot;</span>.getBytes());<span class="hljs-comment">//</span><br><br>        raf1.close();<br><br>    &#125;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    使用RandomAccessFile实现数据的插入效果</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test3</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br><br>        RandomAccessFile raf1 = <span class="hljs-keyword">new</span> RandomAccessFile(<span class="hljs-string">&quot;hello.txt&quot;</span>,<span class="hljs-string">&quot;rw&quot;</span>);<br><br>        raf1.seek(<span class="hljs-number">3</span>);<span class="hljs-comment">//将指针调到角标为3的位置</span><br>        <span class="hljs-comment">//保存指针3后面的所有数据到StringBuilder中</span><br>        StringBuilder builder = <span class="hljs-keyword">new</span> StringBuilder((<span class="hljs-keyword">int</span>) <span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;hello.txt&quot;</span>).length());<br>        <span class="hljs-keyword">byte</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">20</span>];<br>        <span class="hljs-keyword">int</span> len;<br>        <span class="hljs-keyword">while</span>((len = raf1.read(buffer)) != -<span class="hljs-number">1</span>)&#123;<br>            builder.append(<span class="hljs-keyword">new</span> String(buffer,<span class="hljs-number">0</span>,len)) ;<br>        &#125;<br>        <span class="hljs-comment">//调回指针，写入“xyz”</span><br>        raf1.seek(<span class="hljs-number">3</span>);<br>        raf1.write(<span class="hljs-string">&quot;xyz&quot;</span>.getBytes());<br><br>        <span class="hljs-comment">//将StringBuilder中的数据写入到文件中</span><br>        raf1.write(builder.toString().getBytes());<br><br>        raf1.close();<br><br>        <span class="hljs-comment">//思考：将StringBuilder替换为ByteArrayOutputStream</span><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="13"><a href="#13" class="headerlink" title="13"></a>13</h2><h3 id="NIO2中Path、Paths、Files类的使用"><a href="#NIO2中Path、Paths、Files类的使用" class="headerlink" title="NIO2中Path、Paths、Files类的使用"></a>NIO2中Path、Paths、Files类的使用</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">import</span> java.nio.file.Path;<br><span class="hljs-keyword">import</span> java.nio.file.Paths;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 1. jdk 7.0 时，引入了 Path、Paths、Files三个类。</span><br><span class="hljs-comment"> * 2.此三个类声明在：java.nio.file包下。</span><br><span class="hljs-comment"> * 3.Path可以看做是java.io.File类的升级版本。也可以表示文件或文件目录，与平台无关</span><br><span class="hljs-comment"> * &lt;p&gt;</span><br><span class="hljs-comment"> * 4.如何实例化Path:使用Paths.</span><br><span class="hljs-comment"> * static Path get(String first, String … more) : 用于将多个字符串串连成路径</span><br><span class="hljs-comment"> * static Path get(URI uri): 返回指定uri对应的Path路径</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PathTest</span> </span>&#123;<br><br>    <span class="hljs-comment">//如何使用Paths实例化Path</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span> </span>&#123;<br>        Path path1 = Paths.get(<span class="hljs-string">&quot;d:\\nio\\hello.txt&quot;</span>);<span class="hljs-comment">//new File(String filepath)</span><br><br>        Path path2 = Paths.get(<span class="hljs-string">&quot;d:\\&quot;</span>, <span class="hljs-string">&quot;nio\\hello.txt&quot;</span>);<span class="hljs-comment">//new File(String parent,String filename);</span><br><br>        System.out.println(path1);<br>        System.out.println(path2);<br><br>        Path path3 = Paths.get(<span class="hljs-string">&quot;d:\\&quot;</span>, <span class="hljs-string">&quot;nio&quot;</span>);<br>        System.out.println(path3);<br>    &#125;<br><br>    <span class="hljs-comment">//Path中的常用方法</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test2</span><span class="hljs-params">()</span> </span>&#123;<br>        Path path1 = Paths.get(<span class="hljs-string">&quot;d:\\&quot;</span>, <span class="hljs-string">&quot;nio\\nio1\\nio2\\hello.txt&quot;</span>);<br>        Path path2 = Paths.get(<span class="hljs-string">&quot;hello.txt&quot;</span>);<br><br><span class="hljs-comment">//String toString() ： 返回调用 Path 对象的字符串表示形式</span><br>        System.out.println(path1);<br><br><span class="hljs-comment">//boolean startsWith(String path) : 判断是否以 path 路径开始</span><br>        System.out.println(path1.startsWith(<span class="hljs-string">&quot;d:\\nio&quot;</span>));<br><span class="hljs-comment">//boolean endsWith(String path) : 判断是否以 path 路径结束</span><br>        System.out.println(path1.endsWith(<span class="hljs-string">&quot;hello.txt&quot;</span>));<br><span class="hljs-comment">//boolean isAbsolute() : 判断是否是绝对路径</span><br>        System.out.println(path1.isAbsolute() + <span class="hljs-string">&quot;~&quot;</span>);<br>        System.out.println(path2.isAbsolute() + <span class="hljs-string">&quot;~&quot;</span>);<br><span class="hljs-comment">//Path getParent() ：返回Path对象包含整个路径，不包含 Path 对象指定的文件路径</span><br>        System.out.println(path1.getParent());<br>        System.out.println(path2.getParent());<br><span class="hljs-comment">//Path getRoot() ：返回调用 Path 对象的根路径</span><br>        System.out.println(path1.getRoot());<br>        System.out.println(path2.getRoot());<br><span class="hljs-comment">//Path getFileName() : 返回与调用 Path 对象关联的文件名</span><br>        System.out.println(path1.getFileName() + <span class="hljs-string">&quot;~&quot;</span>);<br>        System.out.println(path2.getFileName() + <span class="hljs-string">&quot;~&quot;</span>);<br><span class="hljs-comment">//int getNameCount() : 返回Path 根目录后面元素的数量</span><br><span class="hljs-comment">//Path getName(int idx) : 返回指定索引位置 idx 的路径名称</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; path1.getNameCount(); i++) &#123;<br>            System.out.println(path1.getName(i) + <span class="hljs-string">&quot;*****&quot;</span>);<br>        &#125;<br><br><span class="hljs-comment">//Path toAbsolutePath() : 作为绝对路径返回调用 Path 对象</span><br>        System.out.println(path1.toAbsolutePath());<br>        System.out.println(path2.toAbsolutePath());<br><span class="hljs-comment">//Path resolve(Path p) :合并两个路径，返回合并后的路径对应的Path对象</span><br>        Path path3 = Paths.get(<span class="hljs-string">&quot;d:\\&quot;</span>, <span class="hljs-string">&quot;nio&quot;</span>);<br>        Path path4 = Paths.get(<span class="hljs-string">&quot;nioo\\hi.txt&quot;</span>);<br>        path3 = path3.resolve(path4);<br>        System.out.println(path3);<br><br><span class="hljs-comment">//File toFile(): 将Path转化为File类的对象</span><br>        File file = path1.toFile();<span class="hljs-comment">//Path---&gt;File的转换</span><br><br>        Path newPath = file.toPath();<span class="hljs-comment">//File---&gt;Path的转换</span><br><br>    &#125;<br><br><br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.io.OutputStream;<br><span class="hljs-keyword">import</span> java.nio.channels.SeekableByteChannel;<br><span class="hljs-keyword">import</span> java.nio.file.*;<br><span class="hljs-keyword">import</span> java.util.Iterator;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Files工具类的使用：操作文件或目录的工具类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FilesTest</span> </span>&#123;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException</span>&#123;<br>Path path1 = Paths.get(<span class="hljs-string">&quot;d:\\nio&quot;</span>, <span class="hljs-string">&quot;hello.txt&quot;</span>);<br>Path path2 = Paths.get(<span class="hljs-string">&quot;atguigu.txt&quot;</span>);<br><br><span class="hljs-comment">//Path copy(Path src, Path dest, CopyOption … how) : 文件的复制</span><br><span class="hljs-comment">//要想复制成功，要求path1对应的物理上的文件存在。path1对应的文件没有要求。</span><br><span class="hljs-comment">//Files.copy(path1, path2, StandardCopyOption.REPLACE_EXISTING);</span><br><br><span class="hljs-comment">//Path createDirectory(Path path, FileAttribute&lt;?&gt; … attr) : 创建一个目录</span><br><span class="hljs-comment">//要想执行成功，要求path对应的物理上的文件目录不存在。一旦存在，抛出异常。</span><br>Path path3 = Paths.get(<span class="hljs-string">&quot;d:\\nio\\nio1&quot;</span>);<br><span class="hljs-comment">//Files.createDirectory(path3);</span><br><br><span class="hljs-comment">//Path createFile(Path path, FileAttribute&lt;?&gt; … arr) : 创建一个文件</span><br><span class="hljs-comment">//要想执行成功，要求path对应的物理上的文件不存在。一旦存在，抛出异常。</span><br>Path path4 = Paths.get(<span class="hljs-string">&quot;d:\\nio\\hi.txt&quot;</span>);<br><span class="hljs-comment">//Files.createFile(path4);</span><br><br><span class="hljs-comment">//void delete(Path path) : 删除一个文件/目录，如果不存在，执行报错</span><br><span class="hljs-comment">//Files.delete(path4);</span><br><br><span class="hljs-comment">//void deleteIfExists(Path path) : Path对应的文件/目录如果存在，执行删除.如果不存在，正常执行结束</span><br>Files.deleteIfExists(path3);<br><br><span class="hljs-comment">//Path move(Path src, Path dest, CopyOption…how) : 将 src 移动到 dest 位置</span><br><span class="hljs-comment">//要想执行成功，src对应的物理上的文件需要存在，dest对应的文件没有要求。</span><br><span class="hljs-comment">//Files.move(path1, path2, StandardCopyOption.ATOMIC_MOVE);</span><br><br><span class="hljs-comment">//long size(Path path) : 返回 path 指定文件的大小</span><br><span class="hljs-keyword">long</span> size = Files.size(path2);<br>System.out.println(size);<br><br>&#125;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test2</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException</span>&#123;<br>Path path1 = Paths.get(<span class="hljs-string">&quot;d:\\nio&quot;</span>, <span class="hljs-string">&quot;hello.txt&quot;</span>);<br>Path path2 = Paths.get(<span class="hljs-string">&quot;atguigu.txt&quot;</span>);<br><span class="hljs-comment">//boolean exists(Path path, LinkOption … opts) : 判断文件是否存在</span><br>System.out.println(Files.exists(path2, LinkOption.NOFOLLOW_LINKS));<br><br><span class="hljs-comment">//boolean isDirectory(Path path, LinkOption … opts) : 判断是否是目录</span><br><span class="hljs-comment">//不要求此path对应的物理文件存在。</span><br>System.out.println(Files.isDirectory(path1, LinkOption.NOFOLLOW_LINKS));<br><br><span class="hljs-comment">//boolean isRegularFile(Path path, LinkOption … opts) : 判断是否是文件</span><br><br><span class="hljs-comment">//boolean isHidden(Path path) : 判断是否是隐藏文件</span><br><span class="hljs-comment">//要求此path对应的物理上的文件需要存在。才可判断是否隐藏。否则，抛异常。</span><br><span class="hljs-comment">//System.out.println(Files.isHidden(path1));</span><br><br><span class="hljs-comment">//boolean isReadable(Path path) : 判断文件是否可读</span><br>System.out.println(Files.isReadable(path1));<br><span class="hljs-comment">//boolean isWritable(Path path) : 判断文件是否可写</span><br>System.out.println(Files.isWritable(path1));<br><span class="hljs-comment">//boolean notExists(Path path, LinkOption … opts) : 判断文件是否不存在</span><br>System.out.println(Files.notExists(path1, LinkOption.NOFOLLOW_LINKS));<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * StandardOpenOption.READ:表示对应的Channel是可读的。</span><br><span class="hljs-comment"> * StandardOpenOption.WRITE：表示对应的Channel是可写的。</span><br><span class="hljs-comment"> * StandardOpenOption.CREATE：如果要写出的文件不存在，则创建。如果存在，忽略</span><br><span class="hljs-comment"> * StandardOpenOption.CREATE_NEW：如果要写出的文件不存在，则创建。如果存在，抛异常</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test3</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException</span>&#123;<br>Path path1 = Paths.get(<span class="hljs-string">&quot;d:\\nio&quot;</span>, <span class="hljs-string">&quot;hello.txt&quot;</span>);<br><br><span class="hljs-comment">//InputStream newInputStream(Path path, OpenOption…how):获取 InputStream 对象</span><br>InputStream inputStream = Files.newInputStream(path1, StandardOpenOption.READ);<br><br><span class="hljs-comment">//OutputStream newOutputStream(Path path, OpenOption…how) : 获取 OutputStream 对象</span><br>OutputStream outputStream = Files.newOutputStream(path1, StandardOpenOption.WRITE,StandardOpenOption.CREATE);<br><br><br><span class="hljs-comment">//SeekableByteChannel newByteChannel(Path path, OpenOption…how) : 获取与指定文件的连接，how 指定打开方式。</span><br>SeekableByteChannel channel = Files.newByteChannel(path1, StandardOpenOption.READ,StandardOpenOption.WRITE,StandardOpenOption.CREATE);<br><br><span class="hljs-comment">//DirectoryStream&lt;Path&gt;  newDirectoryStream(Path path) : 打开 path 指定的目录</span><br>Path path2 = Paths.get(<span class="hljs-string">&quot;e:\\teach&quot;</span>);<br>DirectoryStream&lt;Path&gt; directoryStream = Files.newDirectoryStream(path2);<br>Iterator&lt;Path&gt; iterator = directoryStream.iterator();<br><span class="hljs-keyword">while</span>(iterator.hasNext())&#123;<br>System.out.println(iterator.next());<br>&#125;<br><br><br>&#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="15-16-17-18"><a href="#15-16-17-18" class="headerlink" title="15 16 17 18"></a>15 16 17 18</h2><h3 id="网络编程"><a href="#网络编程" class="headerlink" title="网络编程"></a>网络编程</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.net.InetAddress;<br><span class="hljs-keyword">import</span> java.net.UnknownHostException;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 一、网络编程中有两个主要的问题：</span><br><span class="hljs-comment"> * 1.如何准确地定位网络上一台或多台主机；定位主机上的特定的应用</span><br><span class="hljs-comment"> * 2.找到主机后如何可靠高效地进行数据传输</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 二、网络编程中的两个要素：</span><br><span class="hljs-comment"> * 1.对应问题一：IP和端口号</span><br><span class="hljs-comment"> * 2.对应问题二：提供网络通信协议：TCP/IP参考模型（应用层、传输层、网络层、物理+数据链路层）</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 三、通信要素一：IP和端口号</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 1. IP:唯一的标识 Internet 上的计算机（通信实体）</span><br><span class="hljs-comment"> * 2. 在Java中使用InetAddress类代表IP</span><br><span class="hljs-comment"> * 3. IP分类：IPv4 和 IPv6 ; 万维网 和 局域网</span><br><span class="hljs-comment"> * 4. 域名:   www.baidu.com   www.mi.com  www.sina.com  www.jd.com</span><br><span class="hljs-comment"> *            www.vip.com</span><br><span class="hljs-comment"> * 5. 本地回路地址：127.0.0.1 对应着：localhost</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 6. 如何实例化InetAddress:两个方法：getByName(String host) 、 getLocalHost()</span><br><span class="hljs-comment"> *        两个常用方法：getHostName() / getHostAddress()</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 7. 端口号：正在计算机上运行的进程。</span><br><span class="hljs-comment"> * 要求：不同的进程有不同的端口号</span><br><span class="hljs-comment"> * 范围：被规定为一个 16 位的整数 0~65535。</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 8. 端口号与IP地址的组合得出一个网络套接字：Socket</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">InetAddressTest</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//File file = new File(&quot;hello.txt&quot;);</span><br>            InetAddress inet1 = InetAddress.getByName(<span class="hljs-string">&quot;192.168.10.14&quot;</span>);<br><br>            System.out.println(inet1);<br><br>            InetAddress inet2 = InetAddress.getByName(<span class="hljs-string">&quot;www.atguigu.com&quot;</span>);<br>            System.out.println(inet2);<br><br>            InetAddress inet3 = InetAddress.getByName(<span class="hljs-string">&quot;127.0.0.1&quot;</span>);<br>            System.out.println(inet3);<br><br>            <span class="hljs-comment">//获取本地ip</span><br>            InetAddress inet4 = InetAddress.getLocalHost();<br>            System.out.println(inet4);<br><br>            <span class="hljs-comment">//getHostName()</span><br>            System.out.println(inet2.getHostName());<br>            <span class="hljs-comment">//getHostAddress()</span><br>            System.out.println(inet2.getHostAddress());<br><br>        &#125; <span class="hljs-keyword">catch</span> (UnknownHostException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br><br><br>    &#125;<br><br><br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="19-20-21"><a href="#19-20-21" class="headerlink" title="19 20 21"></a>19 20 21</h2><h3 id="TCP网络编程"><a href="#TCP网络编程" class="headerlink" title="TCP网络编程"></a>TCP网络编程</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.io.ByteArrayOutputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.io.OutputStream;<br><span class="hljs-keyword">import</span> java.net.InetAddress;<br><span class="hljs-keyword">import</span> java.net.ServerSocket;<br><span class="hljs-keyword">import</span> java.net.Socket;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 实现TCP的网络编程</span><br><span class="hljs-comment"> * 例子1：客户端发送信息给服务端，服务端将数据显示在控制台上</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TCPTest1</span> </span>&#123;<br><br>    <span class="hljs-comment">//客户端</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">client</span><span class="hljs-params">()</span>  </span>&#123;<br>        Socket socket = <span class="hljs-keyword">null</span>;<br>        OutputStream os = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//1.创建Socket对象，指明服务器端的ip和端口号</span><br>            InetAddress inet = InetAddress.getByName(<span class="hljs-string">&quot;192.168.14.100&quot;</span>);<br>            socket = <span class="hljs-keyword">new</span> Socket(inet,<span class="hljs-number">8899</span>);<br>            <span class="hljs-comment">//2.获取一个输出流，用于输出数据</span><br>            os = socket.getOutputStream();<br>            <span class="hljs-comment">//3.写出数据的操作</span><br>            os.write(<span class="hljs-string">&quot;你好，我是客户端mm&quot;</span>.getBytes());<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-comment">//4.资源的关闭</span><br>            <span class="hljs-keyword">if</span>(os != <span class="hljs-keyword">null</span>)&#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    os.close();<br>                &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br><br>            &#125;<br>            <span class="hljs-keyword">if</span>(socket != <span class="hljs-keyword">null</span>)&#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    socket.close();<br>                &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br><br>            &#125;<br>        &#125;<br><br><br><br>    &#125;<br>    <span class="hljs-comment">//服务端</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">server</span><span class="hljs-params">()</span>  </span>&#123;<br><br>        ServerSocket ss = <span class="hljs-keyword">null</span>;<br>        Socket socket = <span class="hljs-keyword">null</span>;<br>        InputStream is = <span class="hljs-keyword">null</span>;<br>        ByteArrayOutputStream baos = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//1.创建服务器端的ServerSocket，指明自己的端口号</span><br>            ss = <span class="hljs-keyword">new</span> ServerSocket(<span class="hljs-number">8899</span>);<br>            <span class="hljs-comment">//2.调用accept()表示接收来自于客户端的socket</span><br>            socket = ss.accept();<br>            <span class="hljs-comment">//3.获取输入流</span><br>            is = socket.getInputStream();<br><br>            <span class="hljs-comment">//不建议这样写，可能会有乱码</span><br><span class="hljs-comment">//        byte[] buffer = new byte[1024];</span><br><span class="hljs-comment">//        int len;</span><br><span class="hljs-comment">//        while((len = is.read(buffer)) != -1)&#123;</span><br><span class="hljs-comment">//            String str = new String(buffer,0,len);</span><br><span class="hljs-comment">//            System.out.print(str);</span><br><span class="hljs-comment">//        &#125;</span><br>            <span class="hljs-comment">//4.读取输入流中的数据</span><br>            baos = <span class="hljs-keyword">new</span> ByteArrayOutputStream();<br>            <span class="hljs-keyword">byte</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">5</span>];<br>            <span class="hljs-keyword">int</span> len;<br>            <span class="hljs-keyword">while</span>((len = is.read(buffer)) != -<span class="hljs-number">1</span>)&#123;<br>                baos.write(buffer,<span class="hljs-number">0</span>,len);<br>            &#125;<br><br>            System.out.println(baos.toString());<br><br>            System.out.println(<span class="hljs-string">&quot;收到了来自于：&quot;</span> + socket.getInetAddress().getHostAddress() + <span class="hljs-string">&quot;的数据&quot;</span>);<br><br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">if</span>(baos != <span class="hljs-keyword">null</span>)&#123;<br>                <span class="hljs-comment">//5.关闭资源</span><br>                <span class="hljs-keyword">try</span> &#123;<br>                    baos.close();<br>                &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(is != <span class="hljs-keyword">null</span>)&#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    is.close();<br>                &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(socket != <span class="hljs-keyword">null</span>)&#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    socket.close();<br>                &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(ss != <span class="hljs-keyword">null</span>)&#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    ss.close();<br>                &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br><br>        &#125;<br><br><br><br><br><br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.net.InetAddress;<br><span class="hljs-keyword">import</span> java.net.ServerSocket;<br><span class="hljs-keyword">import</span> java.net.Socket;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 实现TCP的网络编程</span><br><span class="hljs-comment"> * 例题2：客户端发送文件给服务端，服务端将文件保存在本地。</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TCPTest2</span> </span>&#123;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    这里涉及到的异常，应该使用try-catch-finally处理</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">client</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        <span class="hljs-comment">//1.</span><br>        Socket socket = <span class="hljs-keyword">new</span> Socket(InetAddress.getByName(<span class="hljs-string">&quot;127.0.0.1&quot;</span>),<span class="hljs-number">9090</span>);<br>        <span class="hljs-comment">//2.</span><br>        OutputStream os = socket.getOutputStream();<br>        <span class="hljs-comment">//3.</span><br>        FileInputStream fis = <span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;beauty.jpg&quot;</span>));<br>        <span class="hljs-comment">//4.</span><br>        <span class="hljs-keyword">byte</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span>];<br>        <span class="hljs-keyword">int</span> len;<br>        <span class="hljs-keyword">while</span>((len = fis.read(buffer)) != -<span class="hljs-number">1</span>)&#123;<br>            os.write(buffer,<span class="hljs-number">0</span>,len);<br>        &#125;<br>        <span class="hljs-comment">//5.</span><br>        fis.close();<br>        os.close();<br>        socket.close();<br>    &#125;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    这里涉及到的异常，应该使用try-catch-finally处理</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">server</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        <span class="hljs-comment">//1.</span><br>        ServerSocket ss = <span class="hljs-keyword">new</span> ServerSocket(<span class="hljs-number">9090</span>);<br>        <span class="hljs-comment">//2.</span><br>        Socket socket = ss.accept();<br>        <span class="hljs-comment">//3.</span><br>        InputStream is = socket.getInputStream();<br>        <span class="hljs-comment">//4.</span><br>        FileOutputStream fos = <span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;beauty1.jpg&quot;</span>));<br>        <span class="hljs-comment">//5.</span><br>        <span class="hljs-keyword">byte</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span>];<br>        <span class="hljs-keyword">int</span> len;<br>        <span class="hljs-keyword">while</span>((len = is.read(buffer)) != -<span class="hljs-number">1</span>)&#123;<br>            fos.write(buffer,<span class="hljs-number">0</span>,len);<br>        &#125;<br>        <span class="hljs-comment">//6.</span><br>        fos.close();<br>        is.close();<br>        socket.close();<br>        ss.close();<br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.net.InetAddress;<br><span class="hljs-keyword">import</span> java.net.ServerSocket;<br><span class="hljs-keyword">import</span> java.net.Socket;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 实现TCP的网络编程</span><br><span class="hljs-comment"> * 例题3：从客户端发送文件给服务端，服务端保存到本地。并返回“发送成功”给客户端。并关闭相应的连接。</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TCPTest3</span> </span>&#123;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">        这里涉及到的异常，应该使用try-catch-finally处理</span><br><span class="hljs-comment">         */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">client</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        <span class="hljs-comment">//1.</span><br>        Socket socket = <span class="hljs-keyword">new</span> Socket(InetAddress.getByName(<span class="hljs-string">&quot;127.0.0.1&quot;</span>),<span class="hljs-number">9090</span>);<br>        <span class="hljs-comment">//2.</span><br>        OutputStream os = socket.getOutputStream();<br>        <span class="hljs-comment">//3.</span><br>        FileInputStream fis = <span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;beauty.jpg&quot;</span>));<br>        <span class="hljs-comment">//4.</span><br>        <span class="hljs-keyword">byte</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span>];<br>        <span class="hljs-keyword">int</span> len;<br>        <span class="hljs-keyword">while</span>((len = fis.read(buffer)) != -<span class="hljs-number">1</span>)&#123;<br>            os.write(buffer,<span class="hljs-number">0</span>,len);<br>        &#125;<br>        <span class="hljs-comment">//关闭数据的输出</span><br>        socket.shutdownOutput();<br><br>        <span class="hljs-comment">//5.接收来自于服务器端的数据，并显示到控制台上</span><br>        InputStream is = socket.getInputStream();<br>        ByteArrayOutputStream baos = <span class="hljs-keyword">new</span> ByteArrayOutputStream();<br>        <span class="hljs-keyword">byte</span>[] bufferr = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">20</span>];<br>        <span class="hljs-keyword">int</span> len1;<br>        <span class="hljs-keyword">while</span>((len1 = is.read(buffer)) != -<span class="hljs-number">1</span>)&#123;<br>            baos.write(buffer,<span class="hljs-number">0</span>,len1);<br>        &#125;<br><br>        System.out.println(baos.toString());<br><br>        <span class="hljs-comment">//6.</span><br>        fis.close();<br>        os.close();<br>        socket.close();<br>        baos.close();<br>    &#125;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    这里涉及到的异常，应该使用try-catch-finally处理</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">server</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        <span class="hljs-comment">//1.</span><br>        ServerSocket ss = <span class="hljs-keyword">new</span> ServerSocket(<span class="hljs-number">9090</span>);<br>        <span class="hljs-comment">//2.</span><br>        Socket socket = ss.accept();<br>        <span class="hljs-comment">//3.</span><br>        InputStream is = socket.getInputStream();<br>        <span class="hljs-comment">//4.</span><br>        FileOutputStream fos = <span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;beauty2.jpg&quot;</span>));<br>        <span class="hljs-comment">//5.</span><br>        <span class="hljs-keyword">byte</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span>];<br>        <span class="hljs-keyword">int</span> len;<br>        <span class="hljs-keyword">while</span>((len = is.read(buffer)) != -<span class="hljs-number">1</span>)&#123;<br>            fos.write(buffer,<span class="hljs-number">0</span>,len);<br>        &#125;<br><br>        System.out.println(<span class="hljs-string">&quot;图片传输完成&quot;</span>);<br><br>        <span class="hljs-comment">//6.服务器端给予客户端反馈</span><br>        OutputStream os = socket.getOutputStream();<br>        os.write(<span class="hljs-string">&quot;你好，美女，照片我已收到，非常漂亮！&quot;</span>.getBytes());<br><br>        <span class="hljs-comment">//7.</span><br>        fos.close();<br>        is.close();<br>        socket.close();<br>        ss.close();<br>        os.close();<br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="23"><a href="#23" class="headerlink" title="23"></a>23</h2><h3 id="UDP网络编程"><a href="#UDP网络编程" class="headerlink" title="UDP网络编程"></a>UDP网络编程</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.net.DatagramPacket;<br><span class="hljs-keyword">import</span> java.net.DatagramSocket;<br><span class="hljs-keyword">import</span> java.net.InetAddress;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * UDP协议的网络编程</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UDPTest</span> </span>&#123;<br><br>    <span class="hljs-comment">//发送端</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sender</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br><br>        DatagramSocket socket = <span class="hljs-keyword">new</span> DatagramSocket();<br><br><br><br>        String str = <span class="hljs-string">&quot;我是UDP方式发送的导弹&quot;</span>;<br>        <span class="hljs-keyword">byte</span>[] data = str.getBytes();<br>        InetAddress inet = InetAddress.getLocalHost();<br>        DatagramPacket packet = <span class="hljs-keyword">new</span> DatagramPacket(data,<span class="hljs-number">0</span>,data.length,inet,<span class="hljs-number">9090</span>);<br><br>        socket.send(packet);<br><br>        socket.close();<br><br>    &#125;<br>    <span class="hljs-comment">//接收端</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">receiver</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br><br>        DatagramSocket socket = <span class="hljs-keyword">new</span> DatagramSocket(<span class="hljs-number">9090</span>);<br><br>        <span class="hljs-keyword">byte</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">100</span>];<br>        DatagramPacket packet = <span class="hljs-keyword">new</span> DatagramPacket(buffer,<span class="hljs-number">0</span>,buffer.length);<br><br>        socket.receive(packet);<br><br>        System.out.println(<span class="hljs-keyword">new</span> String(packet.getData(),<span class="hljs-number">0</span>,packet.getLength()));<br><br>        socket.close();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="24"><a href="#24" class="headerlink" title="24"></a>24</h2><h3 id="URL编程"><a href="#URL编程" class="headerlink" title="URL编程"></a>URL编程</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.net.MalformedURLException;<br><span class="hljs-keyword">import</span> java.net.URL;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * URL网络编程</span><br><span class="hljs-comment"> * 1.URL:统一资源定位符，对应着互联网的某一资源地址</span><br><span class="hljs-comment"> * 2.格式：</span><br><span class="hljs-comment"> *  http://localhost:8080/examples/beauty.jpg?username=Tom</span><br><span class="hljs-comment"> *  协议   主机名    端口号  资源地址           参数列表</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">URLTest</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>        <span class="hljs-keyword">try</span> &#123;<br><br>            URL url = <span class="hljs-keyword">new</span> URL(<span class="hljs-string">&quot;http://localhost:8080/examples/beauty.jpg?username=Tom&quot;</span>);<br><br><span class="hljs-comment">//            public String getProtocol(  )     获取该URL的协议名</span><br>            System.out.println(url.getProtocol());<br><span class="hljs-comment">//            public String getHost(  )           获取该URL的主机名</span><br>            System.out.println(url.getHost());<br><span class="hljs-comment">//            public String getPort(  )            获取该URL的端口号</span><br>            System.out.println(url.getPort());<br><span class="hljs-comment">//            public String getPath(  )           获取该URL的文件路径</span><br>            System.out.println(url.getPath());<br><span class="hljs-comment">//            public String getFile(  )             获取该URL的文件名</span><br>            System.out.println(url.getFile());<br><span class="hljs-comment">//            public String getQuery(   )        获取该URL的查询名</span><br>            System.out.println(url.getQuery());<br><br><br><br><br>        &#125; <span class="hljs-keyword">catch</span> (MalformedURLException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br><br>    &#125;<br><br><br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="25"><a href="#25" class="headerlink" title="25"></a>25</h2><h3 id="URL网络编程实现Tomcat服务端数据下载"><a href="#URL网络编程实现Tomcat服务端数据下载" class="headerlink" title="URL网络编程实现Tomcat服务端数据下载"></a>URL网络编程实现Tomcat服务端数据下载</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.FileOutputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.net.HttpURLConnection;<br><span class="hljs-keyword">import</span> java.net.URL;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">URLTest1</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>        HttpURLConnection urlConnection = <span class="hljs-keyword">null</span>;<br>        InputStream is = <span class="hljs-keyword">null</span>;<br>        FileOutputStream fos = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            URL url = <span class="hljs-keyword">new</span> URL(<span class="hljs-string">&quot;http://localhost:8080/examples/beauty.jpg&quot;</span>);<br><br>            urlConnection = (HttpURLConnection) url.openConnection();<br><br>            urlConnection.connect();<br><br>            is = urlConnection.getInputStream();<br>            fos = <span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-string">&quot;day10\\beauty3.jpg&quot;</span>);<br><br>            <span class="hljs-keyword">byte</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span>];<br>            <span class="hljs-keyword">int</span> len;<br>            <span class="hljs-keyword">while</span>((len = is.read(buffer)) != -<span class="hljs-number">1</span>)&#123;<br>                fos.write(buffer,<span class="hljs-number">0</span>,len);<br>            &#125;<br><br>            System.out.println(<span class="hljs-string">&quot;下载完成&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-comment">//关闭资源</span><br>            <span class="hljs-keyword">if</span>(is != <span class="hljs-keyword">null</span>)&#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    is.close();<br>                &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(fos != <span class="hljs-keyword">null</span>)&#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    fos.close();<br>                &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(urlConnection != <span class="hljs-keyword">null</span>)&#123;<br>                urlConnection.disconnect();<br>            &#125;<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java核心基础30days笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java核心基础day26笔记</title>
    <link href="/2021/03/20/day26/"/>
    <url>/2021/03/20/day26/</url>
    
    <content type="html"><![CDATA[<h3 id="IO流"><a href="#IO流" class="headerlink" title="IO流"></a>IO流</h3><h4 id="节点流FileReader和FileWriter"><a href="#节点流FileReader和FileWriter" class="headerlink" title="节点流FileReader和FileWriter"></a>节点流FileReader和FileWriter</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 一、流的分类：</span><br><span class="hljs-comment"> * 1.操作数据单位：字节流、字符流</span><br><span class="hljs-comment"> * 2.数据的流向：输入流、输出流</span><br><span class="hljs-comment"> * 3.流的角色：节点流、处理流</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 二、流的体系结构</span><br><span class="hljs-comment"> * 抽象基类         节点流（或文件流）                               缓冲流（处理流的一种）</span><br><span class="hljs-comment"> * InputStream     FileInputStream   (read(byte[] buffer))        BufferedInputStream (read(byte[] buffer))</span><br><span class="hljs-comment"> * OutputStream    FileOutputStream  (write(byte[] buffer,0,len)  BufferedOutputStream (write(byte[] buffer,0,len) / flush()</span><br><span class="hljs-comment"> * Reader          FileReader (read(char[] cbuf))                 BufferedReader (read(char[] cbuf) / readLine())</span><br><span class="hljs-comment"> * Writer          FileWriter (write(char[] cbuf,0,len)           BufferedWriter (write(char[] cbuf,0,len) / flush()</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FileReaderWriterTest</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        File file = <span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;hello.txt&quot;</span>);<span class="hljs-comment">//相较于当前工程</span><br>        System.out.println(file.getAbsolutePath());<br><br>        File file1 = <span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;day09\\hello.txt&quot;</span>);<br>        System.out.println(file1.getAbsolutePath());<br>    &#125;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    将day09下的hello.txt文件内容读入程序中，并输出到控制台</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    说明点：</span><br><span class="hljs-comment">    1. read()的理解：返回读入的一个字符。如果达到文件末尾，返回-1</span><br><span class="hljs-comment">    2. 异常的处理：为了保证流资源一定可以执行关闭操作。需要使用try-catch-finally处理</span><br><span class="hljs-comment">    3. 读入的文件一定要存在，否则就会报FileNotFoundException。</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testFileReader</span><span class="hljs-params">()</span></span>&#123;<br>        FileReader fr = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//1.实例化File类的对象，指明要操作的文件</span><br>            File file = <span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;hello.txt&quot;</span>);<span class="hljs-comment">//相较于当前Module</span><br>            <span class="hljs-comment">//2.提供具体的流</span><br>            fr = <span class="hljs-keyword">new</span> FileReader(file);<br><br>            <span class="hljs-comment">//3.数据的读入</span><br>            <span class="hljs-comment">//read():返回读入的一个字符。如果达到文件末尾，返回-1</span><br>            <span class="hljs-comment">//方式一：</span><br><span class="hljs-comment">//        int data = fr.read();</span><br><span class="hljs-comment">//        while(data != -1)&#123;</span><br><span class="hljs-comment">//            System.out.print((char)data);</span><br><span class="hljs-comment">//            data = fr.read();</span><br><span class="hljs-comment">//        &#125;</span><br><br>            <span class="hljs-comment">//方式二：语法上针对于方式一的修改</span><br>            <span class="hljs-keyword">int</span> data;<br>            <span class="hljs-keyword">while</span>((data = fr.read()) != -<span class="hljs-number">1</span>)&#123;<br>                System.out.print((<span class="hljs-keyword">char</span>)data);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-comment">//4.流的关闭操作</span><br><span class="hljs-comment">//            try &#123;</span><br><span class="hljs-comment">//                if(fr != null)</span><br><span class="hljs-comment">//                    fr.close();</span><br><span class="hljs-comment">//            &#125; catch (IOException e) &#123;</span><br><span class="hljs-comment">//                e.printStackTrace();</span><br><span class="hljs-comment">//            &#125;</span><br>            <span class="hljs-comment">//或</span><br>            <span class="hljs-keyword">if</span>(fr != <span class="hljs-keyword">null</span>)&#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    fr.close();<br>                &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-comment">//对read()操作升级：使用read的重载方法</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testFileReader1</span><span class="hljs-params">()</span>  </span>&#123;<br>        FileReader fr = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//1.File类的实例化</span><br>            File file = <span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;hello.txt&quot;</span>);<br><br>            <span class="hljs-comment">//2.FileReader流的实例化</span><br>            fr = <span class="hljs-keyword">new</span> FileReader(file);<br><br>            <span class="hljs-comment">//3.读入的操作</span><br>            <span class="hljs-comment">//read(char[] cbuf):返回每次读入cbuf数组中的字符的个数。如果达到文件末尾，返回-1</span><br>            <span class="hljs-keyword">char</span>[] cbuf = <span class="hljs-keyword">new</span> <span class="hljs-keyword">char</span>[<span class="hljs-number">5</span>];<br>            <span class="hljs-keyword">int</span> len;<br>            <span class="hljs-keyword">while</span>((len = fr.read(cbuf)) != -<span class="hljs-number">1</span>)&#123;<br>                <span class="hljs-comment">//方式一：</span><br>                <span class="hljs-comment">//错误的写法</span><br><span class="hljs-comment">//                for(int i = 0;i &lt; cbuf.length;i++)&#123;</span><br><span class="hljs-comment">//                    System.out.print(cbuf[i]);</span><br><span class="hljs-comment">//                &#125;</span><br>                <span class="hljs-comment">//正确的写法</span><br><span class="hljs-comment">//                for(int i = 0;i &lt; len;i++)&#123;</span><br><span class="hljs-comment">//                    System.out.print(cbuf[i]);</span><br><span class="hljs-comment">//                &#125;</span><br>                <span class="hljs-comment">//方式二：</span><br>                <span class="hljs-comment">//错误的写法,对应着方式一的错误的写法</span><br><span class="hljs-comment">//                String str = new String(cbuf);</span><br><span class="hljs-comment">//                System.out.print(str);</span><br>                <span class="hljs-comment">//正确的写法</span><br>                String str = <span class="hljs-keyword">new</span> String(cbuf,<span class="hljs-number">0</span>,len);<br>                System.out.print(str);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">if</span>(fr != <span class="hljs-keyword">null</span>)&#123;<br>                <span class="hljs-comment">//4.资源的关闭</span><br>                <span class="hljs-keyword">try</span> &#123;<br>                    fr.close();<br>                &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br><br>            &#125;<br>        &#125;<br><br>    &#125;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    从内存中写出数据到硬盘的文件里。</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    说明：</span><br><span class="hljs-comment">    1. 输出操作，对应的File可以不存在的。并不会报异常</span><br><span class="hljs-comment">    2.</span><br><span class="hljs-comment">         File对应的硬盘中的文件如果不存在，在输出的过程中，会自动创建此文件。</span><br><span class="hljs-comment">         File对应的硬盘中的文件如果存在：</span><br><span class="hljs-comment">                如果流使用的构造器是：FileWriter(file,false) / FileWriter(file):对原有文件的覆盖</span><br><span class="hljs-comment">                如果流使用的构造器是：FileWriter(file,true):不会对原有文件覆盖，而是在原有文件基础上追加内容</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testFileWriter</span><span class="hljs-params">()</span> </span>&#123;<br>        FileWriter fw = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//1.提供File类的对象，指明写出到的文件</span><br>            File file = <span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;hello1.txt&quot;</span>);<br><br>            <span class="hljs-comment">//2.提供FileWriter的对象，用于数据的写出</span><br>            fw = <span class="hljs-keyword">new</span> FileWriter(file,<span class="hljs-keyword">false</span>);<br><br>            <span class="hljs-comment">//3.写出的操作</span><br>            fw.write(<span class="hljs-string">&quot;I have a dream!\n&quot;</span>);<br>            fw.write(<span class="hljs-string">&quot;you need to have a dream!&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-comment">//4.流资源的关闭</span><br>            <span class="hljs-keyword">if</span>(fw != <span class="hljs-keyword">null</span>)&#123;<br><br>                <span class="hljs-keyword">try</span> &#123;<br>                    fw.close();<br>                &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;<br><br><br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testFileReaderFileWriter</span><span class="hljs-params">()</span> </span>&#123;<br>        FileReader fr = <span class="hljs-keyword">null</span>;<br>        FileWriter fw = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//1.创建File类的对象，指明读入和写出的文件</span><br>            File srcFile = <span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;hello.txt&quot;</span>);<br>            File destFile = <span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;hello2.txt&quot;</span>);<br><br>            <span class="hljs-comment">//不能使用字符流来处理图片等字节数据</span><br><span class="hljs-comment">//            File srcFile = new File(&quot;爱情与友情.jpg&quot;);</span><br><span class="hljs-comment">//            File destFile = new File(&quot;爱情与友情1.jpg&quot;);</span><br><br><br>            <span class="hljs-comment">//2.创建输入流和输出流的对象</span><br>            fr = <span class="hljs-keyword">new</span> FileReader(srcFile);<br>            fw = <span class="hljs-keyword">new</span> FileWriter(destFile);<br><br><br>            <span class="hljs-comment">//3.数据的读入和写出操作</span><br>            <span class="hljs-keyword">char</span>[] cbuf = <span class="hljs-keyword">new</span> <span class="hljs-keyword">char</span>[<span class="hljs-number">5</span>];<br>            <span class="hljs-keyword">int</span> len;<span class="hljs-comment">//记录每次读入到cbuf数组中的字符的个数</span><br>            <span class="hljs-keyword">while</span>((len = fr.read(cbuf)) != -<span class="hljs-number">1</span>)&#123;<br>                <span class="hljs-comment">//每次写出len个字符</span><br>                fw.write(cbuf,<span class="hljs-number">0</span>,len);<br><br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-comment">//4.关闭流资源</span><br>            <span class="hljs-comment">//方式一：</span><br><span class="hljs-comment">//            try &#123;</span><br><span class="hljs-comment">//                if(fw != null)</span><br><span class="hljs-comment">//                    fw.close();</span><br><span class="hljs-comment">//            &#125; catch (IOException e) &#123;</span><br><span class="hljs-comment">//                e.printStackTrace();</span><br><span class="hljs-comment">//            &#125;finally&#123;</span><br><span class="hljs-comment">//                try &#123;</span><br><span class="hljs-comment">//                    if(fr != null)</span><br><span class="hljs-comment">//                        fr.close();</span><br><span class="hljs-comment">//                &#125; catch (IOException e) &#123;</span><br><span class="hljs-comment">//                    e.printStackTrace();</span><br><span class="hljs-comment">//                &#125;</span><br><span class="hljs-comment">//            &#125;</span><br>            <span class="hljs-comment">//方式二：</span><br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">if</span>(fw != <span class="hljs-keyword">null</span>)<br>                    fw.close();<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br><br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">if</span>(fr != <span class="hljs-keyword">null</span>)<br>                    fr.close();<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br><br>        &#125;<br><br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="节点流FileInputStream和FileOutputStream"><a href="#节点流FileInputStream和FileOutputStream" class="headerlink" title="节点流FileInputStream和FileOutputStream"></a>节点流FileInputStream和FileOutputStream</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 测试FileInputStream和FileOutputStream的使用</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 结论：</span><br><span class="hljs-comment"> * 1. 对于文本文件(.txt,.java,.c,.cpp)，使用字符流处理</span><br><span class="hljs-comment"> * 2. 对于非文本文件(.jpg,.mp3,.mp4,.avi,.doc,.ppt,...)，使用字节流处理</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FileInputOutputStreamTest</span> </span>&#123;<br><br>    <span class="hljs-comment">//使用字节流FileInputStream处理文本文件，可能出现乱码。</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testFileInputStream</span><span class="hljs-params">()</span> </span>&#123;<br>        FileInputStream fis = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//1. 造文件</span><br>            File file = <span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;hello.txt&quot;</span>);<br><br>            <span class="hljs-comment">//2.造流</span><br>            fis = <span class="hljs-keyword">new</span> FileInputStream(file);<br><br>            <span class="hljs-comment">//3.读数据</span><br>            <span class="hljs-keyword">byte</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">5</span>];<br>            <span class="hljs-keyword">int</span> len;<span class="hljs-comment">//记录每次读取的字节的个数</span><br>            <span class="hljs-keyword">while</span>((len = fis.read(buffer)) != -<span class="hljs-number">1</span>)&#123;<br><br>                String str = <span class="hljs-keyword">new</span> String(buffer,<span class="hljs-number">0</span>,len);<br>                System.out.print(str);<br><br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">if</span>(fis != <span class="hljs-keyword">null</span>)&#123;<br>                <span class="hljs-comment">//4.关闭资源</span><br>                <span class="hljs-keyword">try</span> &#123;<br>                    fis.close();<br>                &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br><br>            &#125;<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    实现对图片的复制操作</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testFileInputOutputStream</span><span class="hljs-params">()</span>  </span>&#123;<br>        FileInputStream fis = <span class="hljs-keyword">null</span>;<br>        FileOutputStream fos = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//</span><br>            File srcFile = <span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;爱情与友情.jpg&quot;</span>);<br>            File destFile = <span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;爱情与友情2.jpg&quot;</span>);<br><br>            <span class="hljs-comment">//</span><br>            fis = <span class="hljs-keyword">new</span> FileInputStream(srcFile);<br>            fos = <span class="hljs-keyword">new</span> FileOutputStream(destFile);<br><br>            <span class="hljs-comment">//复制的过程</span><br>            <span class="hljs-keyword">byte</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">5</span>];<br>            <span class="hljs-keyword">int</span> len;<br>            <span class="hljs-keyword">while</span>((len = fis.read(buffer)) != -<span class="hljs-number">1</span>)&#123;<br>                fos.write(buffer,<span class="hljs-number">0</span>,len);<br>            &#125;<br><br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">if</span>(fos != <span class="hljs-keyword">null</span>)&#123;<br>                <span class="hljs-comment">//</span><br>                <span class="hljs-keyword">try</span> &#123;<br>                    fos.close();<br>                &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(fis != <span class="hljs-keyword">null</span>)&#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    fis.close();<br>                &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br><br>            &#125;<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-comment">//指定路径下文件的复制</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">copyFile</span><span class="hljs-params">(String srcPath,String destPath)</span></span>&#123;<br>        FileInputStream fis = <span class="hljs-keyword">null</span>;<br>        FileOutputStream fos = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//</span><br>            File srcFile = <span class="hljs-keyword">new</span> File(srcPath);<br>            File destFile = <span class="hljs-keyword">new</span> File(destPath);<br><br>            <span class="hljs-comment">//</span><br>            fis = <span class="hljs-keyword">new</span> FileInputStream(srcFile);<br>            fos = <span class="hljs-keyword">new</span> FileOutputStream(destFile);<br><br>            <span class="hljs-comment">//复制的过程</span><br>            <span class="hljs-keyword">byte</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span>];<br>            <span class="hljs-keyword">int</span> len;<br>            <span class="hljs-keyword">while</span>((len = fis.read(buffer)) != -<span class="hljs-number">1</span>)&#123;<br>                fos.write(buffer,<span class="hljs-number">0</span>,len);<br>            &#125;<br><br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">if</span>(fos != <span class="hljs-keyword">null</span>)&#123;<br>                <span class="hljs-comment">//</span><br>                <span class="hljs-keyword">try</span> &#123;<br>                    fos.close();<br>                &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(fis != <span class="hljs-keyword">null</span>)&#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    fis.close();<br>                &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br><br>            &#125;<br>        &#125;<br><br><br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testCopyFile</span><span class="hljs-params">()</span></span>&#123;<br><br>        <span class="hljs-keyword">long</span> start = System.currentTimeMillis();<br><br>        String srcPath = <span class="hljs-string">&quot;C:\\Users\\Administrator\\Desktop\\01-视频.avi&quot;</span>;<br>        String destPath = <span class="hljs-string">&quot;C:\\Users\\Administrator\\Desktop\\02-视频.avi&quot;</span>;<br><br><br><span class="hljs-comment">//        String srcPath = &quot;hello.txt&quot;;</span><br><span class="hljs-comment">//        String destPath = &quot;hello3.txt&quot;;</span><br><br>        copyFile(srcPath,destPath);<br><br><br>        <span class="hljs-keyword">long</span> end = System.currentTimeMillis();<br><br>        System.out.println(<span class="hljs-string">&quot;复制操作花费的时间为：&quot;</span> + (end - start));<span class="hljs-comment">//618</span><br><br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="缓冲流"><a href="#缓冲流" class="headerlink" title="缓冲流"></a>缓冲流</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 处理流之一：缓冲流的使用</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 1.缓冲流：</span><br><span class="hljs-comment"> * BufferedInputStream</span><br><span class="hljs-comment"> * BufferedOutputStream</span><br><span class="hljs-comment"> * BufferedReader</span><br><span class="hljs-comment"> * BufferedWriter</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 2.作用：提供流的读取、写入的速度</span><br><span class="hljs-comment"> *   提高读写速度的原因：内部提供了一个缓冲区</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 3. 处理流，就是“套接”在已有的流的基础上。</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BufferedTest</span> </span>&#123;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    实现非文本文件的复制</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">BufferedStreamTest</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> FileNotFoundException </span>&#123;<br>        BufferedInputStream bis = <span class="hljs-keyword">null</span>;<br>        BufferedOutputStream bos = <span class="hljs-keyword">null</span>;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//1.造文件</span><br>            File srcFile = <span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;爱情与友情.jpg&quot;</span>);<br>            File destFile = <span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;爱情与友情3.jpg&quot;</span>);<br>            <span class="hljs-comment">//2.造流</span><br>            <span class="hljs-comment">//2.1 造节点流</span><br>            FileInputStream fis = <span class="hljs-keyword">new</span> FileInputStream((srcFile));<br>            FileOutputStream fos = <span class="hljs-keyword">new</span> FileOutputStream(destFile);<br>            <span class="hljs-comment">//2.2 造缓冲流</span><br>            bis = <span class="hljs-keyword">new</span> BufferedInputStream(fis);<br>            bos = <span class="hljs-keyword">new</span> BufferedOutputStream(fos);<br><br>            <span class="hljs-comment">//3.复制的细节：读取、写入</span><br>            <span class="hljs-keyword">byte</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">10</span>];<br>            <span class="hljs-keyword">int</span> len;<br>            <span class="hljs-keyword">while</span>((len = bis.read(buffer)) != -<span class="hljs-number">1</span>)&#123;<br>                bos.write(buffer,<span class="hljs-number">0</span>,len);<br><br><span class="hljs-comment">//                bos.flush();//刷新缓冲区</span><br><br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-comment">//4.资源关闭</span><br>            <span class="hljs-comment">//要求：先关闭外层的流，再关闭内层的流</span><br>            <span class="hljs-keyword">if</span>(bos != <span class="hljs-keyword">null</span>)&#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    bos.close();<br>                &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br><br>            &#125;<br>            <span class="hljs-keyword">if</span>(bis != <span class="hljs-keyword">null</span>)&#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    bis.close();<br>                &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br><br>            &#125;<br>            <span class="hljs-comment">//说明：关闭外层流的同时，内层流也会自动的进行关闭。关于内层流的关闭，我们可以省略.</span><br><span class="hljs-comment">//        fos.close();</span><br><span class="hljs-comment">//        fis.close();</span><br>        &#125;<br><br><br><br>    &#125;<br><br>    <span class="hljs-comment">//实现文件复制的方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">copyFileWithBuffered</span><span class="hljs-params">(String srcPath,String destPath)</span></span>&#123;<br>        BufferedInputStream bis = <span class="hljs-keyword">null</span>;<br>        BufferedOutputStream bos = <span class="hljs-keyword">null</span>;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//1.造文件</span><br>            File srcFile = <span class="hljs-keyword">new</span> File(srcPath);<br>            File destFile = <span class="hljs-keyword">new</span> File(destPath);<br>            <span class="hljs-comment">//2.造流</span><br>            <span class="hljs-comment">//2.1 造节点流</span><br>            FileInputStream fis = <span class="hljs-keyword">new</span> FileInputStream((srcFile));<br>            FileOutputStream fos = <span class="hljs-keyword">new</span> FileOutputStream(destFile);<br>            <span class="hljs-comment">//2.2 造缓冲流</span><br>            bis = <span class="hljs-keyword">new</span> BufferedInputStream(fis);<br>            bos = <span class="hljs-keyword">new</span> BufferedOutputStream(fos);<br><br>            <span class="hljs-comment">//3.复制的细节：读取、写入</span><br>            <span class="hljs-keyword">byte</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span>];<br>            <span class="hljs-keyword">int</span> len;<br>            <span class="hljs-keyword">while</span>((len = bis.read(buffer)) != -<span class="hljs-number">1</span>)&#123;<br>                bos.write(buffer,<span class="hljs-number">0</span>,len);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-comment">//4.资源关闭</span><br>            <span class="hljs-comment">//要求：先关闭外层的流，再关闭内层的流</span><br>            <span class="hljs-keyword">if</span>(bos != <span class="hljs-keyword">null</span>)&#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    bos.close();<br>                &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br><br>            &#125;<br>            <span class="hljs-keyword">if</span>(bis != <span class="hljs-keyword">null</span>)&#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    bis.close();<br>                &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br><br>            &#125;<br>            <span class="hljs-comment">//说明：关闭外层流的同时，内层流也会自动的进行关闭。关于内层流的关闭，我们可以省略.</span><br><span class="hljs-comment">//        fos.close();</span><br><span class="hljs-comment">//        fis.close();</span><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testCopyFileWithBuffered</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">long</span> start = System.currentTimeMillis();<br><br>        String srcPath = <span class="hljs-string">&quot;C:\\Users\\Administrator\\Desktop\\01-视频.avi&quot;</span>;<br>        String destPath = <span class="hljs-string">&quot;C:\\Users\\Administrator\\Desktop\\03-视频.avi&quot;</span>;<br><br><br>        copyFileWithBuffered(srcPath,destPath);<br><br><br>        <span class="hljs-keyword">long</span> end = System.currentTimeMillis();<br><br>        System.out.println(<span class="hljs-string">&quot;复制操作花费的时间为：&quot;</span> + (end - start));<span class="hljs-comment">//618 - 176</span><br>    &#125;<br><br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    使用BufferedReader和BufferedWriter实现文本文件的复制</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testBufferedReaderBufferedWriter</span><span class="hljs-params">()</span></span>&#123;<br>        BufferedReader br = <span class="hljs-keyword">null</span>;<br>        BufferedWriter bw = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//创建文件和相应的流</span><br>            br = <span class="hljs-keyword">new</span> BufferedReader(<span class="hljs-keyword">new</span> FileReader(<span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;dbcp.txt&quot;</span>)));<br>            bw = <span class="hljs-keyword">new</span> BufferedWriter(<span class="hljs-keyword">new</span> FileWriter(<span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;dbcp1.txt&quot;</span>)));<br><br>            <span class="hljs-comment">//读写操作</span><br>            <span class="hljs-comment">//方式一：使用char[]数组</span><br><span class="hljs-comment">//            char[] cbuf = new char[1024];</span><br><span class="hljs-comment">//            int len;</span><br><span class="hljs-comment">//            while((len = br.read(cbuf)) != -1)&#123;</span><br><span class="hljs-comment">//                bw.write(cbuf,0,len);</span><br><span class="hljs-comment">//    //            bw.flush();</span><br><span class="hljs-comment">//            &#125;</span><br><br>            <span class="hljs-comment">//方式二：使用String</span><br>            String data;<br>            <span class="hljs-keyword">while</span>((data = br.readLine()) != <span class="hljs-keyword">null</span>)&#123;<br>                <span class="hljs-comment">//方法一：</span><br><span class="hljs-comment">//                bw.write(data + &quot;\n&quot;);//data中不包含换行符</span><br>                <span class="hljs-comment">//方法二：</span><br>                bw.write(data);<span class="hljs-comment">//data中不包含换行符</span><br>                bw.newLine();<span class="hljs-comment">//提供换行的操作</span><br><br>            &#125;<br><br><br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-comment">//关闭资源</span><br>            <span class="hljs-keyword">if</span>(bw != <span class="hljs-keyword">null</span>)&#123;<br><br>                <span class="hljs-keyword">try</span> &#123;<br>                    bw.close();<br>                &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(br != <span class="hljs-keyword">null</span>)&#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    br.close();<br>                &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br><br>            &#125;<br>        &#125;<br><br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="转换流"><a href="#转换流" class="headerlink" title="转换流"></a>转换流</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 处理流之二：转换流的使用</span><br><span class="hljs-comment"> * 1.转换流：属于字符流</span><br><span class="hljs-comment"> *   InputStreamReader：将一个字节的输入流转换为字符的输入流</span><br><span class="hljs-comment"> *   OutputStreamWriter：将一个字符的输出流转换为字节的输出流</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 2.作用：提供字节流与字符流之间的转换</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 3. 解码：字节、字节数组  ---&gt;字符数组、字符串</span><br><span class="hljs-comment"> *    编码：字符数组、字符串 ---&gt; 字节、字节数组</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 4.字符集</span><br><span class="hljs-comment"> *ASCII：美国标准信息交换码。</span><br><span class="hljs-comment">    用一个字节的7位可以表示。</span><br><span class="hljs-comment"> ISO8859-1：拉丁码表。欧洲码表</span><br><span class="hljs-comment">    用一个字节的8位表示。</span><br><span class="hljs-comment"> GB2312：中国的中文编码表。最多两个字节编码所有字符</span><br><span class="hljs-comment"> GBK：中国的中文编码表升级，融合了更多的中文文字符号。最多两个字节编码</span><br><span class="hljs-comment"> Unicode：国际标准码，融合了目前人类使用的所有字符。为每个字符分配唯一的字符码。所有的文字都用两个字节来表示。</span><br><span class="hljs-comment"> UTF-8：变长的编码方式，可用1-4个字节来表示一个字符。</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">InputStreamReaderTest</span> </span>&#123;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    此时处理异常的话，仍然应该使用try-catch-finally</span><br><span class="hljs-comment">    InputStreamReader的使用，实现字节的输入流到字符的输入流的转换</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br><br>        FileInputStream fis = <span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-string">&quot;dbcp.txt&quot;</span>);<br><span class="hljs-comment">//        InputStreamReader isr = new InputStreamReader(fis);//使用系统默认的字符集</span><br>        <span class="hljs-comment">//参数2指明了字符集，具体使用哪个字符集，取决于文件dbcp.txt保存时使用的字符集</span><br>        InputStreamReader isr = <span class="hljs-keyword">new</span> InputStreamReader(fis,<span class="hljs-string">&quot;UTF-8&quot;</span>);<span class="hljs-comment">//使用系统默认的字符集</span><br><br>        <span class="hljs-keyword">char</span>[] cbuf = <span class="hljs-keyword">new</span> <span class="hljs-keyword">char</span>[<span class="hljs-number">20</span>];<br>        <span class="hljs-keyword">int</span> len;<br>        <span class="hljs-keyword">while</span>((len = isr.read(cbuf)) != -<span class="hljs-number">1</span>)&#123;<br>            String str = <span class="hljs-keyword">new</span> String(cbuf,<span class="hljs-number">0</span>,len);<br>            System.out.print(str);<br>        &#125;<br><br>        isr.close();<br><br>    &#125;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    此时处理异常的话，仍然应该使用try-catch-finally</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    综合使用InputStreamReader和OutputStreamWriter</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test2</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        <span class="hljs-comment">//1.造文件、造流</span><br>        File file1 = <span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;dbcp.txt&quot;</span>);<br>        File file2 = <span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;dbcp_gbk.txt&quot;</span>);<br><br>        FileInputStream fis = <span class="hljs-keyword">new</span> FileInputStream(file1);<br>        FileOutputStream fos = <span class="hljs-keyword">new</span> FileOutputStream(file2);<br><br>        InputStreamReader isr = <span class="hljs-keyword">new</span> InputStreamReader(fis,<span class="hljs-string">&quot;utf-8&quot;</span>);<br>        OutputStreamWriter osw = <span class="hljs-keyword">new</span> OutputStreamWriter(fos,<span class="hljs-string">&quot;gbk&quot;</span>);<br><br>        <span class="hljs-comment">//2.读写过程</span><br>        <span class="hljs-keyword">char</span>[] cbuf = <span class="hljs-keyword">new</span> <span class="hljs-keyword">char</span>[<span class="hljs-number">20</span>];<br>        <span class="hljs-keyword">int</span> len;<br>        <span class="hljs-keyword">while</span>((len = isr.read(cbuf)) != -<span class="hljs-number">1</span>)&#123;<br>            osw.write(cbuf,<span class="hljs-number">0</span>,len);<br>        &#125;<br><br>        <span class="hljs-comment">//3.关闭资源</span><br>        isr.close();<br>        osw.close();<br><br><br>    &#125;<br><br><br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="其他流"><a href="#其他流" class="headerlink" title="其他流"></a>其他流</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 其他流的使用</span><br><span class="hljs-comment"> * 1.标准的输入、输出流</span><br><span class="hljs-comment"> * 2.打印流</span><br><span class="hljs-comment"> * 3.数据流</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OtherStreamTest</span> </span>&#123;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    1.标准的输入、输出流</span><br><span class="hljs-comment">    1.1</span><br><span class="hljs-comment">    System.in:标准的输入流，默认从键盘输入</span><br><span class="hljs-comment">    System.out:标准的输出流，默认从控制台输出</span><br><span class="hljs-comment">    1.2</span><br><span class="hljs-comment">    System类的setIn(InputStream is) / setOut(PrintStream ps)方式重新指定输入和输出的流。</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    1.3练习：</span><br><span class="hljs-comment">    从键盘输入字符串，要求将读取到的整行字符串转成大写输出。然后继续进行输入操作，</span><br><span class="hljs-comment">    直至当输入“e”或者“exit”时，退出程序。</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    方法一：使用Scanner实现，调用next()返回一个字符串</span><br><span class="hljs-comment">    方法二：使用System.in实现。System.in  ---&gt;  转换流 ---&gt; BufferedReader的readLine()</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        BufferedReader br = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            InputStreamReader isr = <span class="hljs-keyword">new</span> InputStreamReader(System.in);<br>            br = <span class="hljs-keyword">new</span> BufferedReader(isr);<br><br>            <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>) &#123;<br>                System.out.println(<span class="hljs-string">&quot;请输入字符串：&quot;</span>);<br>                String data = br.readLine();<br>                <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;e&quot;</span>.equalsIgnoreCase(data) || <span class="hljs-string">&quot;exit&quot;</span>.equalsIgnoreCase(data)) &#123;<br>                    System.out.println(<span class="hljs-string">&quot;程序结束&quot;</span>);<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br><br>                String upperCase = data.toUpperCase();<br>                System.out.println(upperCase);<br><br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">if</span> (br != <span class="hljs-keyword">null</span>) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    br.close();<br>                &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br><br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    2. 打印流：PrintStream 和PrintWriter</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    2.1 提供了一系列重载的print() 和 println()</span><br><span class="hljs-comment">    2.2 练习：</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"></span><br><span class="hljs-comment"></span><br><span class="hljs-comment">     */</span><br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test2</span><span class="hljs-params">()</span> </span>&#123;<br>        PrintStream ps = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            FileOutputStream fos = <span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;D:\\IO\\text.txt&quot;</span>));<br>            <span class="hljs-comment">// 创建打印输出流,设置为自动刷新模式(写入换行符或字节 &#x27;\n&#x27; 时都会刷新输出缓冲区)</span><br>            ps = <span class="hljs-keyword">new</span> PrintStream(fos, <span class="hljs-keyword">true</span>);<br>            <span class="hljs-keyword">if</span> (ps != <span class="hljs-keyword">null</span>) &#123;<span class="hljs-comment">// 把标准输出流(控制台输出)改成文件</span><br>                System.setOut(ps);<br>            &#125;<br><br><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">255</span>; i++) &#123; <span class="hljs-comment">// 输出ASCII字符</span><br>                System.out.print((<span class="hljs-keyword">char</span>) i);<br>                <span class="hljs-keyword">if</span> (i % <span class="hljs-number">50</span> == <span class="hljs-number">0</span>) &#123; <span class="hljs-comment">// 每50个数据一行</span><br>                    System.out.println(); <span class="hljs-comment">// 换行</span><br>                &#125;<br>            &#125;<br><br><br>        &#125; <span class="hljs-keyword">catch</span> (FileNotFoundException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">if</span> (ps != <span class="hljs-keyword">null</span>) &#123;<br>                ps.close();<br>            &#125;<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    3. 数据流</span><br><span class="hljs-comment">    3.1 DataInputStream 和 DataOutputStream</span><br><span class="hljs-comment">    3.2 作用：用于读取或写出基本数据类型的变量或字符串</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    练习：将内存中的字符串、基本数据类型的变量写出到文件中。</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    注意：处理异常的话，仍然应该使用try-catch-finally.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test3</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        <span class="hljs-comment">//1.</span><br>        DataOutputStream dos = <span class="hljs-keyword">new</span> DataOutputStream(<span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-string">&quot;data.txt&quot;</span>));<br>        <span class="hljs-comment">//2.</span><br>        dos.writeUTF(<span class="hljs-string">&quot;刘建辰&quot;</span>);<br>        dos.flush();<span class="hljs-comment">//刷新操作，将内存中的数据写入文件</span><br>        dos.writeInt(<span class="hljs-number">23</span>);<br>        dos.flush();<br>        dos.writeBoolean(<span class="hljs-keyword">true</span>);<br>        dos.flush();<br>        <span class="hljs-comment">//3.</span><br>        dos.close();<br><br><br>    &#125;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    将文件中存储的基本数据类型变量和字符串读取到内存中，保存在变量中。</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    注意点：读取不同类型的数据的顺序要与当初写入文件时，保存的数据的顺序一致！</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test4</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        <span class="hljs-comment">//1.</span><br>        DataInputStream dis = <span class="hljs-keyword">new</span> DataInputStream(<span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-string">&quot;data.txt&quot;</span>));<br>        <span class="hljs-comment">//2.</span><br>        String name = dis.readUTF();<br>        <span class="hljs-keyword">int</span> age = dis.readInt();<br>        <span class="hljs-keyword">boolean</span> isMale = dis.readBoolean();<br><br>        System.out.println(<span class="hljs-string">&quot;name = &quot;</span> + name);<br>        System.out.println(<span class="hljs-string">&quot;age = &quot;</span> + age);<br>        System.out.println(<span class="hljs-string">&quot;isMale = &quot;</span> + isMale);<br><br>        <span class="hljs-comment">//3.</span><br>        dis.close();<br><br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java核心基础30days笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java核心基础day25笔记</title>
    <link href="/2021/03/19/day25/"/>
    <url>/2021/03/19/day25/</url>
    
    <content type="html"><![CDATA[<h2 id="04-05-06-07-08-09"><a href="#04-05-06-07-08-09" class="headerlink" title="04 05 06 07 08 09"></a>04 05 06 07 08 09</h2><h3 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.util.*;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 泛型的使用</span><br><span class="hljs-comment"> * 1.jdk 5.0新增的特性</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 2.在集合中使用泛型：</span><br><span class="hljs-comment"> *  总结：</span><br><span class="hljs-comment"> *  ① 集合接口或集合类在jdk5.0时都修改为带泛型的结构。</span><br><span class="hljs-comment"> *  ② 在实例化集合类时，可以指明具体的泛型类型</span><br><span class="hljs-comment"> *  ③ 指明完以后，在集合类或接口中凡是定义类或接口时，内部结构（比如：方法、构造器、属性等）使用到类的泛型的位置，都指定为实例化的泛型类型。</span><br><span class="hljs-comment"> *    比如：add(E e)  ---&gt;实例化以后：add(Integer e)</span><br><span class="hljs-comment"> *  ④ 注意点：泛型的类型必须是类，不能是基本数据类型。需要用到基本数据类型的位置，拿包装类替换</span><br><span class="hljs-comment"> *  ⑤ 如果实例化时，没有指明泛型的类型。默认类型为java.lang.Object类型。</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 3.如何自定义泛型结构：泛型类、泛型接口；泛型方法。见 GenericTest1.java</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GenericTest</span> </span>&#123;<br><br><br>    <span class="hljs-comment">//在集合中使用泛型之前的情况：</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span></span>&#123;<br>        ArrayList list = <span class="hljs-keyword">new</span> ArrayList();<br>        <span class="hljs-comment">//需求：存放学生的成绩</span><br>        list.add(<span class="hljs-number">78</span>);<br>        list.add(<span class="hljs-number">76</span>);<br>        list.add(<span class="hljs-number">89</span>);<br>        list.add(<span class="hljs-number">88</span>);<br>        <span class="hljs-comment">//问题一：类型不安全</span><br><span class="hljs-comment">//        list.add(&quot;Tom&quot;);</span><br><br>        <span class="hljs-keyword">for</span>(Object score : list)&#123;<br>            <span class="hljs-comment">//问题二：强转时，可能出现ClassCastException</span><br>            <span class="hljs-keyword">int</span> stuScore = (Integer) score;<br><br>            System.out.println(stuScore);<br><br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-comment">//在集合中使用泛型的情况：以ArrayList为例</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test2</span><span class="hljs-params">()</span></span>&#123;<br>       ArrayList&lt;Integer&gt; list =  <span class="hljs-keyword">new</span> ArrayList&lt;Integer&gt;();<br><br>        list.add(<span class="hljs-number">78</span>);<br>        list.add(<span class="hljs-number">87</span>);<br>        list.add(<span class="hljs-number">99</span>);<br>        list.add(<span class="hljs-number">65</span>);<br>        <span class="hljs-comment">//编译时，就会进行类型检查，保证数据的安全</span><br><span class="hljs-comment">//        list.add(&quot;Tom&quot;);</span><br><br>        <span class="hljs-comment">//方式一：</span><br><span class="hljs-comment">//        for(Integer score : list)&#123;</span><br><span class="hljs-comment">//            //避免了强转操作</span><br><span class="hljs-comment">//            int stuScore = score;</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//            System.out.println(stuScore);</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//        &#125;</span><br>        <span class="hljs-comment">//方式二：</span><br>        Iterator&lt;Integer&gt; iterator = list.iterator();<br>        <span class="hljs-keyword">while</span>(iterator.hasNext())&#123;<br>            <span class="hljs-keyword">int</span> stuScore = iterator.next();<br>            System.out.println(stuScore);<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-comment">//在集合中使用泛型的情况：以HashMap为例</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test3</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-comment">//        Map&lt;String,Integer&gt; map = new HashMap&lt;String,Integer&gt;();</span><br>        <span class="hljs-comment">//jdk7新特性：类型推断</span><br>        Map&lt;String,Integer&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br><br>        map.put(<span class="hljs-string">&quot;Tom&quot;</span>,<span class="hljs-number">87</span>);<br>        map.put(<span class="hljs-string">&quot;Jerry&quot;</span>,<span class="hljs-number">87</span>);<br>        map.put(<span class="hljs-string">&quot;Jack&quot;</span>,<span class="hljs-number">67</span>);<br><br><span class="hljs-comment">//        map.put(123,&quot;ABC&quot;);</span><br>        <span class="hljs-comment">//泛型的嵌套</span><br>        Set&lt;Map.Entry&lt;String,Integer&gt;&gt; entry = map.entrySet();<br>        Iterator&lt;Map.Entry&lt;String, Integer&gt;&gt; iterator = entry.iterator();<br><br>        <span class="hljs-keyword">while</span>(iterator.hasNext())&#123;<br>            Map.Entry&lt;String, Integer&gt; e = iterator.next();<br>            String key = e.getKey();<br>            Integer value = e.getValue();<br>            System.out.println(key + <span class="hljs-string">&quot;----&quot;</span> + value);<br>        &#125;<br><br>    &#125;<br><br><br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 自定义泛型类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Order</span>&lt;<span class="hljs-title">T</span>&gt; </span>&#123;<br><br>    String orderName;<br>    <span class="hljs-keyword">int</span> orderId;<br><br>    <span class="hljs-comment">//类的内部结构就可以使用类的泛型</span><br><br>    T orderT;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Order</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">//编译不通过</span><br><span class="hljs-comment">//        T[] arr = new T[10];</span><br>        <span class="hljs-comment">//编译通过</span><br>        T[] arr = (T[]) <span class="hljs-keyword">new</span> Object[<span class="hljs-number">10</span>];<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Order</span><span class="hljs-params">(String orderName,<span class="hljs-keyword">int</span> orderId,T orderT)</span></span>&#123;<br>        <span class="hljs-keyword">this</span>.orderName = orderName;<br>        <span class="hljs-keyword">this</span>.orderId = orderId;<br>        <span class="hljs-keyword">this</span>.orderT = orderT;<br>    &#125;<br><br>    <span class="hljs-comment">//如下的三个方法都不是泛型方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> T <span class="hljs-title">getOrderT</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> orderT;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setOrderT</span><span class="hljs-params">(T orderT)</span></span>&#123;<br>        <span class="hljs-keyword">this</span>.orderT = orderT;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Order&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;orderName=&#x27;&quot;</span> + orderName + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, orderId=&quot;</span> + orderId +<br>                <span class="hljs-string">&quot;, orderT=&quot;</span> + orderT +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>    <span class="hljs-comment">//静态方法中不能使用类的泛型。</span><br><span class="hljs-comment">//    public static void show(T orderT)&#123;</span><br><span class="hljs-comment">//        System.out.println(orderT);</span><br><span class="hljs-comment">//    &#125;</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">show</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">//编译不通过</span><br><span class="hljs-comment">//        try&#123;</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//        &#125;catch(T t)&#123;</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//        &#125;</span><br><br>    &#125;<br><br>    <span class="hljs-comment">//泛型方法：在方法中出现了泛型的结构，泛型参数与类的泛型参数没有任何关系。</span><br>    <span class="hljs-comment">//换句话说，泛型方法所属的类是不是泛型类都没有关系。</span><br>    <span class="hljs-comment">//泛型方法，可以声明为静态的。原因：泛型参数是在调用方法时确定的。并非在实例化类时确定。</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;E&gt;  <span class="hljs-function">List&lt;E&gt; <span class="hljs-title">copyFromArrayToList</span><span class="hljs-params">(E[] arr)</span></span>&#123;<br><br>        ArrayList&lt;E&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br><br>        <span class="hljs-keyword">for</span>(E e : arr)&#123;<br>            list.add(e);<br>        &#125;<br>        <span class="hljs-keyword">return</span> list;<br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/** 如何自定义泛型结构：泛型类、泛型接口；泛型方法。</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 1. 关于自定义泛型类、泛型接口：</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GenericTest1</span> </span>&#123;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">//如果定义了泛型类，实例化没有指明类的泛型，则认为此泛型类型为Object类型</span><br>        <span class="hljs-comment">//要求：如果大家定义了类是带泛型的，建议在实例化时要指明类的泛型。</span><br>        Order order = <span class="hljs-keyword">new</span> Order();<br>        order.setOrderT(<span class="hljs-number">123</span>);<br>        order.setOrderT(<span class="hljs-string">&quot;ABC&quot;</span>);<br><br>        <span class="hljs-comment">//建议：实例化时指明类的泛型</span><br>        Order&lt;String&gt; order1 = <span class="hljs-keyword">new</span> Order&lt;String&gt;(<span class="hljs-string">&quot;orderAA&quot;</span>,<span class="hljs-number">1001</span>,<span class="hljs-string">&quot;order:AA&quot;</span>);<br><br>        order1.setOrderT(<span class="hljs-string">&quot;AA:hello&quot;</span>);<br><br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test2</span><span class="hljs-params">()</span></span>&#123;<br>        SubOrder sub1 = <span class="hljs-keyword">new</span> SubOrder();<br>        <span class="hljs-comment">//由于子类在继承带泛型的父类时，指明了泛型类型。则实例化子类对象时，不再需要指明泛型。</span><br>        sub1.setOrderT(<span class="hljs-number">1122</span>);<br><br>        SubOrder1&lt;String&gt; sub2 = <span class="hljs-keyword">new</span> SubOrder1&lt;&gt;();<br>        sub2.setOrderT(<span class="hljs-string">&quot;order2...&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test3</span><span class="hljs-params">()</span></span>&#123;<br><br>        ArrayList&lt;String&gt; list1 = <span class="hljs-keyword">null</span>;<br>        ArrayList&lt;Integer&gt; list2 = <span class="hljs-keyword">new</span> ArrayList&lt;Integer&gt;();<br>        <span class="hljs-comment">//泛型不同的引用不能相互赋值。</span><br><span class="hljs-comment">//        list1 = list2;</span><br><br>        Person p1 = <span class="hljs-keyword">null</span>;<br>        Person p2 = <span class="hljs-keyword">null</span>;<br>        p1 = p2;<br><br><br>    &#125;<br><br>    <span class="hljs-comment">//测试泛型方法</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test4</span><span class="hljs-params">()</span></span>&#123;<br>        Order&lt;String&gt; order = <span class="hljs-keyword">new</span> Order&lt;&gt;();<br>        Integer[] arr = <span class="hljs-keyword">new</span> Integer[]&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>&#125;;<br>        <span class="hljs-comment">//泛型方法在调用时，指明泛型参数的类型。</span><br>        List&lt;Integer&gt; list = order.copyFromArrayToList(arr);<br><br>        System.out.println(list);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="10"><a href="#10" class="headerlink" title="10"></a>10</h2><h3 id="举例泛型类和泛型方法的使用情景"><a href="#举例泛型类和泛型方法的使用情景" class="headerlink" title="举例泛型类和泛型方法的使用情景"></a>举例泛型类和泛型方法的使用情景</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.java1;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * DAO:data(base) access object</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DAO</span>&lt;<span class="hljs-title">T</span>&gt; </span>&#123;<span class="hljs-comment">//表的共性操作的DAO</span><br><br>    <span class="hljs-comment">//添加一条记录</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(T t)</span></span>&#123;<br><br>    &#125;<br><br>    <span class="hljs-comment">//删除一条记录</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">remove</span><span class="hljs-params">(<span class="hljs-keyword">int</span> index)</span></span>&#123;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//修改一条记录</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">(<span class="hljs-keyword">int</span> index,T t)</span></span>&#123;<br><br>    &#125;<br><br>    <span class="hljs-comment">//查询一条记录</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> T <span class="hljs-title">getIndex</span><span class="hljs-params">(<span class="hljs-keyword">int</span> index)</span></span>&#123;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//查询多条记录</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;T&gt; <span class="hljs-title">getForList</span><span class="hljs-params">(<span class="hljs-keyword">int</span> index)</span></span>&#123;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//泛型方法</span><br>    <span class="hljs-comment">//举例：获取表中一共有多少条记录？获取最大的员工入职时间？</span><br>    <span class="hljs-keyword">public</span> &lt;E&gt; <span class="hljs-function">E <span class="hljs-title">getValue</span><span class="hljs-params">()</span></span>&#123;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.java1;<br><br><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DAOTest</span> </span>&#123;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span></span>&#123;<br>        CustomerDAO dao1 = <span class="hljs-keyword">new</span> CustomerDAO();<br><br>        dao1.add(<span class="hljs-keyword">new</span> Customer());<br>        List&lt;Customer&gt; list = dao1.getForList(<span class="hljs-number">10</span>);<br><br><br>        StudentDAO dao2 = <span class="hljs-keyword">new</span> StudentDAO();<br>        Student student = dao2.getIndex(<span class="hljs-number">1</span>);<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h2 id="11-12-13-14"><a href="#11-12-13-14" class="headerlink" title="11 12 13 14"></a>11 12 13 14</h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.java2;<br><br><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.util.AbstractList;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Iterator;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 1. 泛型在继承方面的体现</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 2. 通配符的使用</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GenericTest</span> </span>&#123;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    1. 泛型在继承方面的体现</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">      虽然类A是类B的父类，但是G&lt;A&gt; 和G&lt;B&gt;二者不具备子父类关系，二者是并列关系。</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">       补充：类A是类B的父类，A&lt;G&gt; 是 B&lt;G&gt; 的父类</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span></span>&#123;<br><br>        Object obj = <span class="hljs-keyword">null</span>;<br>        String str = <span class="hljs-keyword">null</span>;<br>        obj = str;<br><br>        Object[] arr1 = <span class="hljs-keyword">null</span>;<br>        String[] arr2 = <span class="hljs-keyword">null</span>;<br>        arr1 = arr2;<br>        <span class="hljs-comment">//编译不通过</span><br><span class="hljs-comment">//        Date date = new Date();</span><br><span class="hljs-comment">//        str = date;</span><br>        List&lt;Object&gt; list1 = <span class="hljs-keyword">null</span>;<br>        List&lt;String&gt; list2 = <span class="hljs-keyword">new</span> ArrayList&lt;String&gt;();<br>        <span class="hljs-comment">//此时的list1和list2的类型不具有子父类关系</span><br>        <span class="hljs-comment">//编译不通过</span><br><span class="hljs-comment">//        list1 = list2;</span><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        反证法：</span><br><span class="hljs-comment">        假设list1 = list2;</span><br><span class="hljs-comment">           list1.add(123);导致混入非String的数据。出错。</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">         */</span><br><br>        show(list1);<br>        show1(list2);<br><br>    &#125;<br><br><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">show1</span><span class="hljs-params">(List&lt;String&gt; list)</span></span>&#123;<br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">show</span><span class="hljs-params">(List&lt;Object&gt; list)</span></span>&#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test2</span><span class="hljs-params">()</span></span>&#123;<br><br>        AbstractList&lt;String&gt; list1 = <span class="hljs-keyword">null</span>;<br>        List&lt;String&gt; list2 = <span class="hljs-keyword">null</span>;<br>        ArrayList&lt;String&gt; list3 = <span class="hljs-keyword">null</span>;<br><br>        list1 = list3;<br>        list2 = list3;<br><br>        List&lt;String&gt; list4 = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br><br>    &#125;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    2. 通配符的使用</span><br><span class="hljs-comment">       通配符：?</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">       类A是类B的父类，G&lt;A&gt;和G&lt;B&gt;是没有关系的，二者共同的父类是：G&lt;?&gt;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"></span><br><span class="hljs-comment">     */</span><br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test3</span><span class="hljs-params">()</span></span>&#123;<br>        List&lt;Object&gt; list1 = <span class="hljs-keyword">null</span>;<br>        List&lt;String&gt; list2 = <span class="hljs-keyword">null</span>;<br><br>        List&lt;?&gt; list = <span class="hljs-keyword">null</span>;<br><br>        list = list1;<br>        list = list2;<br>        <span class="hljs-comment">//编译通过</span><br><span class="hljs-comment">//        print(list1);</span><br><span class="hljs-comment">//        print(list2);</span><br><br><br>        <span class="hljs-comment">//</span><br>        List&lt;String&gt; list3 = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        list3.add(<span class="hljs-string">&quot;AA&quot;</span>);<br>        list3.add(<span class="hljs-string">&quot;BB&quot;</span>);<br>        list3.add(<span class="hljs-string">&quot;CC&quot;</span>);<br>        list = list3;<br>        <span class="hljs-comment">//添加(写入)：对于List&lt;?&gt;就不能向其内部添加数据。</span><br>        <span class="hljs-comment">//除了添加null之外。</span><br><span class="hljs-comment">//        list.add(&quot;DD&quot;);</span><br><span class="hljs-comment">//        list.add(&#x27;?&#x27;);</span><br><br>        list.add(<span class="hljs-keyword">null</span>);<br><br>        <span class="hljs-comment">//获取(读取)：允许读取数据，读取的数据类型为Object。</span><br>        Object o = list.get(<span class="hljs-number">0</span>);<br>        System.out.println(o);<br><br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">print</span><span class="hljs-params">(List&lt;?&gt; list)</span></span>&#123;<br>        Iterator&lt;?&gt; iterator = list.iterator();<br>        <span class="hljs-keyword">while</span>(iterator.hasNext())&#123;<br>            Object obj = iterator.next();<br>            System.out.println(obj);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    3.有限制条件的通配符的使用。</span><br><span class="hljs-comment">        ? extends A:</span><br><span class="hljs-comment">                G&lt;? extends A&gt; 可以作为G&lt;A&gt;和G&lt;B&gt;的父类，其中B是A的子类，（负无穷,A]</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        ? super A:</span><br><span class="hljs-comment">                G&lt;? super A&gt; 可以作为G&lt;A&gt;和G&lt;B&gt;的父类，其中B是A的父类，[A,正无穷)</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test4</span><span class="hljs-params">()</span></span>&#123;<br><br>        List&lt;? extends Person&gt; list1 = <span class="hljs-keyword">null</span>;<br>        List&lt;? <span class="hljs-keyword">super</span> Person&gt; list2 = <span class="hljs-keyword">null</span>;<br><br>        List&lt;Student&gt; list3 = <span class="hljs-keyword">new</span> ArrayList&lt;Student&gt;();<br>        List&lt;Person&gt; list4 = <span class="hljs-keyword">new</span> ArrayList&lt;Person&gt;();<br>        List&lt;Object&gt; list5 = <span class="hljs-keyword">new</span> ArrayList&lt;Object&gt;();<br><br>        list1 = list3;<br>        list1 = list4;<br><span class="hljs-comment">//        list1 = list5;</span><br><br><span class="hljs-comment">//        list2 = list3;</span><br>        list2 = list4;<br>        list2 = list5;<br><br>        <span class="hljs-comment">//读取数据：</span><br>        list1 = list3;<br>        Person p = list1.get(<span class="hljs-number">0</span>);<br>        <span class="hljs-comment">//编译不通过</span><br>        <span class="hljs-comment">//Student s = list1.get(0);</span><br><br>        list2 = list4;<br>        Object obj = list2.get(<span class="hljs-number">0</span>);<br>        <span class="hljs-comment">////编译不通过</span><br><span class="hljs-comment">//        Person obj = list2.get(0);</span><br><br>        <span class="hljs-comment">//写入数据：</span><br>        <span class="hljs-comment">//编译不通过</span><br><span class="hljs-comment">//        list1.add(new Student());</span><br><br>        <span class="hljs-comment">//编译通过</span><br>        list2.add(<span class="hljs-keyword">new</span> Person());<br>        list2.add(<span class="hljs-keyword">new</span> Student());<br><br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="16-17-18"><a href="#16-17-18" class="headerlink" title="16 17 18"></a>16 17 18</h2><h3 id="File类的使用"><a href="#File类的使用" class="headerlink" title="File类的使用"></a>File类的使用</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * File类的使用</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 1. File类的一个对象，代表一个文件或一个文件目录(俗称：文件夹)</span><br><span class="hljs-comment"> * 2. File类声明在java.io包下</span><br><span class="hljs-comment"> * 3. File类中涉及到关于文件或文件目录的创建、删除、重命名、修改时间、文件大小等方法，</span><br><span class="hljs-comment"> *    并未涉及到写入或读取文件内容的操作。如果需要读取或写入文件内容，必须使用IO流来完成。</span><br><span class="hljs-comment"> * 4. 后续File类的对象常会作为参数传递到流的构造器中，指明读取或写入的&quot;终点&quot;.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FileTest</span> </span>&#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    1.如何创建File类的实例</span><br><span class="hljs-comment">        File(String filePath)</span><br><span class="hljs-comment">        File(String parentPath,String childPath)</span><br><span class="hljs-comment">        File(File parentFile,String childPath)</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    2.</span><br><span class="hljs-comment">    相对路径：相较于某个路径下，指明的路径。</span><br><span class="hljs-comment">    绝对路径：包含盘符在内的文件或文件目录的路径</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    3.路径分隔符</span><br><span class="hljs-comment">     windows:\\</span><br><span class="hljs-comment">     unix:/</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">//构造器1</span><br>        File file1 = <span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;hello.txt&quot;</span>);<span class="hljs-comment">//相对于当前module</span><br>        File file2 =  <span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;D:\\workspace_idea1\\JavaSenior\\day08\\he.txt&quot;</span>);<br><br>        System.out.println(file1);<br>        System.out.println(file2);<br><br>        <span class="hljs-comment">//构造器2：</span><br>        File file3 = <span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;D:\\workspace_idea1&quot;</span>,<span class="hljs-string">&quot;JavaSenior&quot;</span>);<br>        System.out.println(file3);<br><br>        <span class="hljs-comment">//构造器3：</span><br>        File file4 = <span class="hljs-keyword">new</span> File(file3,<span class="hljs-string">&quot;hi.txt&quot;</span>);<br>        System.out.println(file4);<br>    &#125;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">public String getAbsolutePath()：获取绝对路径</span><br><span class="hljs-comment">public String getPath() ：获取路径</span><br><span class="hljs-comment">public String getName() ：获取名称</span><br><span class="hljs-comment">public String getParent()：获取上层文件目录路径。若无，返回null</span><br><span class="hljs-comment">public long length() ：获取文件长度（即：字节数）。不能获取目录的长度。</span><br><span class="hljs-comment">public long lastModified() ：获取最后一次的修改时间，毫秒值</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">如下的两个方法适用于文件目录：</span><br><span class="hljs-comment">public String[] list() ：获取指定目录下的所有文件或者文件目录的名称数组</span><br><span class="hljs-comment">public File[] listFiles() ：获取指定目录下的所有文件或者文件目录的File数组</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test2</span><span class="hljs-params">()</span></span>&#123;<br>        File file1 = <span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;hello.txt&quot;</span>);<br>        File file2 = <span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;d:\\io\\hi.txt&quot;</span>);<br><br>        System.out.println(file1.getAbsolutePath());<br>        System.out.println(file1.getPath());<br>        System.out.println(file1.getName());<br>        System.out.println(file1.getParent());<br>        System.out.println(file1.length());<br>        System.out.println(<span class="hljs-keyword">new</span> Date(file1.lastModified()));<br><br>        System.out.println();<br><br>        System.out.println(file2.getAbsolutePath());<br>        System.out.println(file2.getPath());<br>        System.out.println(file2.getName());<br>        System.out.println(file2.getParent());<br>        System.out.println(file2.length());<br>        System.out.println(file2.lastModified());<br>    &#125;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test3</span><span class="hljs-params">()</span></span>&#123;<br>        File file = <span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;D:\\workspace_idea1\\JavaSenior&quot;</span>);<br><br>        String[] list = file.list();<br>        <span class="hljs-keyword">for</span>(String s : list)&#123;<br>            System.out.println(s);<br>        &#125;<br><br>        System.out.println();<br><br>        File[] files = file.listFiles();<br>        <span class="hljs-keyword">for</span>(File f : files)&#123;<br>            System.out.println(f);<br>        &#125;<br><br>    &#125;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    public boolean renameTo(File dest):把文件重命名为指定的文件路径</span><br><span class="hljs-comment">     比如：file1.renameTo(file2)为例：</span><br><span class="hljs-comment">        要想保证返回true,需要file1在硬盘中是存在的，且file2不能在硬盘中存在。</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test4</span><span class="hljs-params">()</span></span>&#123;<br>        File file1 = <span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;hello.txt&quot;</span>);<br>        File file2 = <span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;D:\\io\\hi.txt&quot;</span>);<br><br>        <span class="hljs-keyword">boolean</span> renameTo = file2.renameTo(file1);<br>        System.out.println(renameTo);<br><br>    &#125;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">public boolean isDirectory()：判断是否是文件目录</span><br><span class="hljs-comment">public boolean isFile() ：判断是否是文件</span><br><span class="hljs-comment">public boolean exists() ：判断是否存在</span><br><span class="hljs-comment">public boolean canRead() ：判断是否可读</span><br><span class="hljs-comment">public boolean canWrite() ：判断是否可写</span><br><span class="hljs-comment">public boolean isHidden() ：判断是否隐藏</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test5</span><span class="hljs-params">()</span></span>&#123;<br>        File file1 = <span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;hello.txt&quot;</span>);<br>        file1 = <span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;hello1.txt&quot;</span>);<br><br>        System.out.println(file1.isDirectory());<br>        System.out.println(file1.isFile());<br>        System.out.println(file1.exists());<br>        System.out.println(file1.canRead());<br>        System.out.println(file1.canWrite());<br>        System.out.println(file1.isHidden());<br><br>        System.out.println();<br><br>        File file2 = <span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;d:\\io&quot;</span>);<br>        file2 = <span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;d:\\io1&quot;</span>);<br>        System.out.println(file2.isDirectory());<br>        System.out.println(file2.isFile());<br>        System.out.println(file2.exists());<br>        System.out.println(file2.canRead());<br>        System.out.println(file2.canWrite());<br>        System.out.println(file2.isHidden());<br><br>    &#125;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    创建硬盘中对应的文件或文件目录</span><br><span class="hljs-comment">public boolean createNewFile() ：创建文件。若文件存在，则不创建，返回false</span><br><span class="hljs-comment">public boolean mkdir() ：创建文件目录。如果此文件目录存在，就不创建了。如果此文件目录的上层目录不存在，也不创建。</span><br><span class="hljs-comment">public boolean mkdirs() ：创建文件目录。如果此文件目录存在，就不创建了。如果上层文件目录不存在，一并创建</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    删除磁盘中的文件或文件目录</span><br><span class="hljs-comment">public boolean delete()：删除文件或者文件夹</span><br><span class="hljs-comment">    删除注意事项：Java中的删除不走回收站。</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test6</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        File file1 = <span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;hi.txt&quot;</span>);<br>        <span class="hljs-keyword">if</span>(!file1.exists())&#123;<br>            <span class="hljs-comment">//文件的创建</span><br>            file1.createNewFile();<br>            System.out.println(<span class="hljs-string">&quot;创建成功&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<span class="hljs-comment">//文件存在</span><br>            file1.delete();<br>            System.out.println(<span class="hljs-string">&quot;删除成功&quot;</span>);<br>        &#125;<br><br><br>    &#125;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test7</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">//文件目录的创建</span><br>        File file1 = <span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;d:\\io\\io1\\io3&quot;</span>);<br><br>        <span class="hljs-keyword">boolean</span> mkdir = file1.mkdir();<br>        <span class="hljs-keyword">if</span>(mkdir)&#123;<br>            System.out.println(<span class="hljs-string">&quot;创建成功1&quot;</span>);<br>        &#125;<br><br>        File file2 = <span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;d:\\io\\io1\\io4&quot;</span>);<br><br>        <span class="hljs-keyword">boolean</span> mkdir1 = file2.mkdirs();<br>        <span class="hljs-keyword">if</span>(mkdir1)&#123;<br>            System.out.println(<span class="hljs-string">&quot;创建成功2&quot;</span>);<br>        &#125;<br>        <span class="hljs-comment">//要想删除成功，io4文件目录下不能有子目录或文件</span><br>        File file3 = <span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;D:\\io\\io1\\io4&quot;</span>);<br>        file3 = <span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;D:\\io\\io1&quot;</span>);<br>        System.out.println(file3.delete());<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java核心基础30days笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java核心基础day24笔记</title>
    <link href="/2021/03/18/day24/"/>
    <url>/2021/03/18/day24/</url>
    
    <content type="html"><![CDATA[<h2 id="06"><a href="#06" class="headerlink" title="06"></a>06</h2><h3 id="Set面试题"><a href="#Set面试题" class="headerlink" title="Set面试题"></a>Set面试题</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Collection;<br><span class="hljs-keyword">import</span> java.util.HashSet;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CollectionTest</span> </span>&#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span></span>&#123;<br>        Collection coll = <span class="hljs-keyword">new</span> ArrayList();<br><br>        coll.add(<span class="hljs-number">123</span>);<br>        coll.add(<span class="hljs-number">456</span>);<br>        coll.add(<span class="hljs-number">343</span>);<br>        coll.add(<span class="hljs-number">343</span>);<br><br>        coll.forEach(System.out::println);<br>    &#125;<br><br><br>    <span class="hljs-comment">//练习：在List内去除重复数字值，要求尽量简单</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> List <span class="hljs-title">duplicateList</span><span class="hljs-params">(List list)</span> </span>&#123;<br>        HashSet set = <span class="hljs-keyword">new</span> HashSet();<br>        set.addAll(list);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ArrayList(set);<br>    &#125;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test2</span><span class="hljs-params">()</span></span>&#123;<br>        List list = <span class="hljs-keyword">new</span> ArrayList();<br>        list.add(<span class="hljs-keyword">new</span> Integer(<span class="hljs-number">1</span>));<br>        list.add(<span class="hljs-keyword">new</span> Integer(<span class="hljs-number">2</span>));<br>        list.add(<span class="hljs-keyword">new</span> Integer(<span class="hljs-number">2</span>));<br>        list.add(<span class="hljs-keyword">new</span> Integer(<span class="hljs-number">4</span>));<br>        list.add(<span class="hljs-keyword">new</span> Integer(<span class="hljs-number">4</span>));<br>        List list2 = duplicateList(list);<br>        <span class="hljs-keyword">for</span> (Object integer : list2) &#123;<br>            System.out.println(integer);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test3</span><span class="hljs-params">()</span></span>&#123;<br>        HashSet set = <span class="hljs-keyword">new</span> HashSet();<br>        Person p1 = <span class="hljs-keyword">new</span> Person(<span class="hljs-number">1001</span>,<span class="hljs-string">&quot;AA&quot;</span>);<br>        Person p2 = <span class="hljs-keyword">new</span> Person(<span class="hljs-number">1002</span>,<span class="hljs-string">&quot;BB&quot;</span>);<br><br>        set.add(p1);<br>        set.add(p2);<br>        System.out.println(set);<br><br>        p1.name = <span class="hljs-string">&quot;CC&quot;</span>;<br>        set.remove(p1);<br>        System.out.println(set);<br>        set.add(<span class="hljs-keyword">new</span> Person(<span class="hljs-number">1001</span>,<span class="hljs-string">&quot;CC&quot;</span>));<br>        System.out.println(set);<br>        set.add(<span class="hljs-keyword">new</span> Person(<span class="hljs-number">1001</span>,<span class="hljs-string">&quot;AA&quot;</span>));<br>        System.out.println(set);<br><span class="hljs-comment">/*[Person&#123;id=1002,name=&#x27;BB&#x27;&#125;, Person&#123;id=1001,name=&#x27;AA&#x27;&#125;]</span><br><span class="hljs-comment">  [Person&#123;id=1002,name=&#x27;BB&#x27;&#125;, Person&#123;id=1001,name=&#x27;CC&#x27;&#125;]</span><br><span class="hljs-comment">  [Person&#123;id=1002,name=&#x27;BB&#x27;&#125;, Person&#123;id=1001,name=&#x27;CC&#x27;&#125;, Person&#123;id=1001,name=&#x27;CC&#x27;&#125;]</span><br><span class="hljs-comment">[Person&#123;id=1002,name=&#x27;BB&#x27;&#125;, Person&#123;id=1001,name=&#x27;CC&#x27;&#125;, Person&#123;id=1001,name=&#x27;CC&#x27;&#125;, Person&#123;id=1001, name=&#x27;AA&#x27;&#125;]</span><br><span class="hljs-comment">*/</span><br>    &#125;<br><br><br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="07-08-09-10-11-12-13-14-15-16-17"><a href="#07-08-09-10-11-12-13-14-15-16-17" class="headerlink" title="07 08 09 10 11 12 13 14 15 16 17"></a>07 08 09 10 11 12 13 14 15 16 17</h2><h3 id="Map接口"><a href="#Map接口" class="headerlink" title="Map接口"></a>Map接口</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.util.*;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 一、Map的实现类的结构：</span><br><span class="hljs-comment"> *  |----Map:双列数据，存储key-value对的数据   ---类似于高中的函数：y = f(x)</span><br><span class="hljs-comment"> *         |----HashMap:作为Map的主要实现类；线程不安全的，效率高；能存储null的key和value</span><br><span class="hljs-comment"> *              |----LinkedHashMap:保证在遍历map元素时，可以按照添加的顺序实现遍历。</span><br><span class="hljs-comment"> *                      原因：在原有的HashMap底层结构基础上，添加了一对指针，指向前一个和后一个元素。</span><br><span class="hljs-comment"> *                      对于频繁的遍历操作，此类执行效率高于HashMap。</span><br><span class="hljs-comment"> *         |----TreeMap:保证按照添加的key-value对进行排序，实现排序遍历。此时考虑key的自然排序或定制排序</span><br><span class="hljs-comment"> *                      底层使用红黑树</span><br><span class="hljs-comment"> *         |----Hashtable:作为古老的实现类；线程安全的，效率低；不能存储null的key和value</span><br><span class="hljs-comment"> *              |----Properties:常用来处理配置文件。key和value都是String类型</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *      HashMap的底层：数组+链表  （jdk7及之前）</span><br><span class="hljs-comment"> *                    数组+链表+红黑树 （jdk 8）</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *  面试题：</span><br><span class="hljs-comment"> *  1. HashMap的底层实现原理？</span><br><span class="hljs-comment"> *  2. HashMap 和 Hashtable的异同？</span><br><span class="hljs-comment"> *  3. CurrentHashMap 与 Hashtable的异同？（暂时不讲）</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *  二、Map结构的理解：</span><br><span class="hljs-comment"> *    Map中的key:无序的、不可重复的，使用Set存储所有的key  ---&gt; key所在的类要重写equals()和hashCode() （以HashMap为例）</span><br><span class="hljs-comment"> *    Map中的value:无序的、可重复的，使用Collection存储所有的value ---&gt;value所在的类要重写equals()</span><br><span class="hljs-comment"> *    一个键值对：key-value构成了一个Entry对象。</span><br><span class="hljs-comment"> *    Map中的entry:无序的、不可重复的，使用Set存储所有的entry</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *  三、HashMap的底层实现原理？以jdk7为例说明：</span><br><span class="hljs-comment"> *      HashMap map = new HashMap():</span><br><span class="hljs-comment"> *      在实例化以后，底层创建了长度是16的一维数组Entry[] table。</span><br><span class="hljs-comment"> *      ...可能已经执行过多次put...</span><br><span class="hljs-comment"> *      map.put(key1,value1):</span><br><span class="hljs-comment"> *      首先，调用key1所在类的hashCode()计算key1哈希值，此哈希值经过某种算法计算以后，得到在Entry数组中的存放位置。</span><br><span class="hljs-comment"> *      如果此位置上的数据为空，此时的key1-value1添加成功。 ----情况1</span><br><span class="hljs-comment"> *      如果此位置上的数据不为空，(意味着此位置上存在一个或多个数据(以链表形式存在)),比较key1和已经存在的一个或多个数据</span><br><span class="hljs-comment"> *      的哈希值：</span><br><span class="hljs-comment"> *              如果key1的哈希值与已经存在的数据的哈希值都不相同，此时key1-value1添加成功。----情况2</span><br><span class="hljs-comment"> *              如果key1的哈希值和已经存在的某一个数据(key2-value2)的哈希值相同，继续比较：调用key1所在类的equals(key2)方法，比较：</span><br><span class="hljs-comment"> *                      如果equals()返回false:此时key1-value1添加成功。----情况3</span><br><span class="hljs-comment"> *                      如果equals()返回true:使用value1替换value2。</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *       补充：关于情况2和情况3：此时key1-value1和原来的数据以链表的方式存储。</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *      在不断的添加过程中，会涉及到扩容问题，当超出临界值(且要存放的位置非空)时，扩容。默认的扩容方式：扩容为原来容量的2倍，并将原有的数据复制过来。</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *      jdk8 相较于jdk7在底层实现方面的不同：</span><br><span class="hljs-comment"> *      1. new HashMap():底层没有创建一个长度为16的数组</span><br><span class="hljs-comment"> *      2. jdk 8底层的数组是：Node[],而非Entry[]</span><br><span class="hljs-comment"> *      3. 首次调用put()方法时，底层创建长度为16的数组</span><br><span class="hljs-comment"> *      4. jdk7底层结构只有：数组+链表。jdk8中底层结构：数组+链表+红黑树。</span><br><span class="hljs-comment"> *         4.1 形成链表时，七上八下（jdk7:新的元素指向旧的元素。jdk8：旧的元素指向新的元素）</span><br><span class="hljs-comment">           4.2 当数组的某一个索引位置上的元素以链表形式存在的数据个数 &gt; 8 且当前数组的长度 &gt; 64时，此时此索引位置上的所数据改为使用红黑树存储。</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *      DEFAULT_INITIAL_CAPACITY : HashMap的默认容量，16</span><br><span class="hljs-comment"> *      DEFAULT_LOAD_FACTOR：HashMap的默认加载因子：0.75</span><br><span class="hljs-comment"> *      threshold：扩容的临界值，=容量*填充因子：16 * 0.75 =&gt; 12</span><br><span class="hljs-comment"> *      TREEIFY_THRESHOLD：Bucket中链表长度大于该默认值，转化为红黑树:8</span><br><span class="hljs-comment"> *      MIN_TREEIFY_CAPACITY：桶中的Node被树化时最小的hash表容量:64</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *  四、LinkedHashMap的底层实现原理（了解）</span><br><span class="hljs-comment"> *      源码中：</span><br><span class="hljs-comment"> *      static class Entry&lt;K,V&gt; extends HashMap.Node&lt;K,V&gt; &#123;</span><br><span class="hljs-comment">             Entry&lt;K,V&gt; before, after;//能够记录添加的元素的先后顺序</span><br><span class="hljs-comment">             Entry(int hash, K key, V value, Node&lt;K,V&gt; next) &#123;</span><br><span class="hljs-comment">                super(hash, key, value, next);</span><br><span class="hljs-comment">             &#125;</span><br><span class="hljs-comment">         &#125;</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *   五、Map中定义的方法：</span><br><span class="hljs-comment"> 添加、删除、修改操作：</span><br><span class="hljs-comment"> Object put(Object key,Object value)：将指定key-value添加到(或修改)当前map对象中</span><br><span class="hljs-comment"> void putAll(Map m):将m中的所有key-value对存放到当前map中</span><br><span class="hljs-comment"> Object remove(Object key)：移除指定key的key-value对，并返回value</span><br><span class="hljs-comment"> void clear()：清空当前map中的所有数据</span><br><span class="hljs-comment"> 元素查询的操作：</span><br><span class="hljs-comment"> Object get(Object key)：获取指定key对应的value</span><br><span class="hljs-comment"> boolean containsKey(Object key)：是否包含指定的key</span><br><span class="hljs-comment"> boolean containsValue(Object value)：是否包含指定的value</span><br><span class="hljs-comment"> int size()：返回map中key-value对的个数</span><br><span class="hljs-comment"> boolean isEmpty()：判断当前map是否为空</span><br><span class="hljs-comment"> boolean equals(Object obj)：判断当前map和参数对象obj是否相等</span><br><span class="hljs-comment"> 元视图操作的方法：</span><br><span class="hljs-comment"> Set keySet()：返回所有key构成的Set集合</span><br><span class="hljs-comment"> Collection values()：返回所有value构成的Collection集合</span><br><span class="hljs-comment"> Set entrySet()：返回所有key-value对构成的Set集合</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> *总结：常用方法：</span><br><span class="hljs-comment"> * 添加：put(Object key,Object value)</span><br><span class="hljs-comment"> * 删除：remove(Object key)</span><br><span class="hljs-comment"> * 修改：put(Object key,Object value)</span><br><span class="hljs-comment"> * 查询：get(Object key)</span><br><span class="hljs-comment"> * 长度：size()</span><br><span class="hljs-comment"> * 遍历：keySet() / values() / entrySet()</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MapTest</span> </span>&#123;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment"> 元视图操作的方法：</span><br><span class="hljs-comment"> Set keySet()：返回所有key构成的Set集合</span><br><span class="hljs-comment"> Collection values()：返回所有value构成的Collection集合</span><br><span class="hljs-comment"> Set entrySet()：返回所有key-value对构成的Set集合</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">     */</span><br><br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test5</span><span class="hljs-params">()</span></span>&#123;<br>        Map map = <span class="hljs-keyword">new</span> HashMap();<br>        map.put(<span class="hljs-string">&quot;AA&quot;</span>,<span class="hljs-number">123</span>);<br>        map.put(<span class="hljs-number">45</span>,<span class="hljs-number">1234</span>);<br>        map.put(<span class="hljs-string">&quot;BB&quot;</span>,<span class="hljs-number">56</span>);<br><br>        <span class="hljs-comment">//遍历所有的key集：keySet()</span><br>        Set set = map.keySet();<br>            Iterator iterator = set.iterator();<br>            <span class="hljs-keyword">while</span>(iterator.hasNext())&#123;<br>                System.out.println(iterator.next());<br>        &#125;<br>        System.out.println();<br>        <span class="hljs-comment">//遍历所有的value集：values()</span><br>        Collection values = map.values();<br>        <span class="hljs-keyword">for</span>(Object obj : values)&#123;<br>            System.out.println(obj);<br>        &#125;<br>        System.out.println();<br>        <span class="hljs-comment">//遍历所有的key-value</span><br>        <span class="hljs-comment">//方式一：entrySet()</span><br>        Set entrySet = map.entrySet();<br>        Iterator iterator1 = entrySet.iterator();<br>        <span class="hljs-keyword">while</span> (iterator1.hasNext())&#123;<br>            Object obj = iterator1.next();<br>            <span class="hljs-comment">//entrySet集合中的元素都是entry</span><br>            Map.Entry entry = (Map.Entry) obj;<br>            System.out.println(entry.getKey() + <span class="hljs-string">&quot;----&gt;&quot;</span> + entry.getValue());<br><br>        &#125;<br>        System.out.println();<br>        <span class="hljs-comment">//方式二：</span><br>        Set keySet = map.keySet();<br>        Iterator iterator2 = keySet.iterator();<br>        <span class="hljs-keyword">while</span>(iterator2.hasNext())&#123;<br>            Object key = iterator2.next();<br>            Object value = map.get(key);<br>            System.out.println(key + <span class="hljs-string">&quot;=====&quot;</span> + value);<br><br>        &#125;<br><br>    &#125;<br><br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment"> 元素查询的操作：</span><br><span class="hljs-comment"> Object get(Object key)：获取指定key对应的value</span><br><span class="hljs-comment"> boolean containsKey(Object key)：是否包含指定的key</span><br><span class="hljs-comment"> boolean containsValue(Object value)：是否包含指定的value</span><br><span class="hljs-comment"> int size()：返回map中key-value对的个数</span><br><span class="hljs-comment"> boolean isEmpty()：判断当前map是否为空</span><br><span class="hljs-comment"> boolean equals(Object obj)：判断当前map和参数对象obj是否相等</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test4</span><span class="hljs-params">()</span></span>&#123;<br>        Map map = <span class="hljs-keyword">new</span> HashMap();<br>        map.put(<span class="hljs-string">&quot;AA&quot;</span>,<span class="hljs-number">123</span>);<br>        map.put(<span class="hljs-number">45</span>,<span class="hljs-number">123</span>);<br>        map.put(<span class="hljs-string">&quot;BB&quot;</span>,<span class="hljs-number">56</span>);<br>        <span class="hljs-comment">// Object get(Object key)</span><br>        System.out.println(map.get(<span class="hljs-number">45</span>));<br>        <span class="hljs-comment">//containsKey(Object key)</span><br>        <span class="hljs-keyword">boolean</span> isExist = map.containsKey(<span class="hljs-string">&quot;BB&quot;</span>);<br>        System.out.println(isExist);<br><br>        isExist = map.containsValue(<span class="hljs-number">123</span>);<br>        System.out.println(isExist);<br><br>        map.clear();<br><br>        System.out.println(map.isEmpty());<br><br>    &#125;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     添加、删除、修改操作：</span><br><span class="hljs-comment"> Object put(Object key,Object value)：将指定key-value添加到(或修改)当前map对象中</span><br><span class="hljs-comment"> void putAll(Map m):将m中的所有key-value对存放到当前map中</span><br><span class="hljs-comment"> Object remove(Object key)：移除指定key的key-value对，并返回value</span><br><span class="hljs-comment"> void clear()：清空当前map中的所有数据</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test3</span><span class="hljs-params">()</span></span>&#123;<br>        Map map = <span class="hljs-keyword">new</span> HashMap();<br>        <span class="hljs-comment">//添加</span><br>        map.put(<span class="hljs-string">&quot;AA&quot;</span>,<span class="hljs-number">123</span>);<br>        map.put(<span class="hljs-number">45</span>,<span class="hljs-number">123</span>);<br>        map.put(<span class="hljs-string">&quot;BB&quot;</span>,<span class="hljs-number">56</span>);<br>        <span class="hljs-comment">//修改</span><br>        map.put(<span class="hljs-string">&quot;AA&quot;</span>,<span class="hljs-number">87</span>);<br><br>        System.out.println(map);<br><br>        Map map1 = <span class="hljs-keyword">new</span> HashMap();<br>        map1.put(<span class="hljs-string">&quot;CC&quot;</span>,<span class="hljs-number">123</span>);<br>        map1.put(<span class="hljs-string">&quot;DD&quot;</span>,<span class="hljs-number">123</span>);<br><br>        map.putAll(map1);<br><br>        System.out.println(map);<br><br>        <span class="hljs-comment">//remove(Object key)</span><br>        Object value = map.remove(<span class="hljs-string">&quot;CC&quot;</span>);<br>        System.out.println(value);<br>        System.out.println(map);<br><br>        <span class="hljs-comment">//clear()</span><br>        map.clear();<span class="hljs-comment">//与map = null操作不同</span><br>        System.out.println(map.size());<br>        System.out.println(map);<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test2</span><span class="hljs-params">()</span></span>&#123;<br>        Map map = <span class="hljs-keyword">new</span> HashMap();<br>        map = <span class="hljs-keyword">new</span> LinkedHashMap();<br>        map.put(<span class="hljs-number">123</span>,<span class="hljs-string">&quot;AA&quot;</span>);<br>        map.put(<span class="hljs-number">345</span>,<span class="hljs-string">&quot;BB&quot;</span>);<br>        map.put(<span class="hljs-number">12</span>,<span class="hljs-string">&quot;CC&quot;</span>);<br><br>        System.out.println(map);<br>    &#125;<br><br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span></span>&#123;<br>        Map map = <span class="hljs-keyword">new</span> HashMap();<br><span class="hljs-comment">//        map = new Hashtable();</span><br>        map.put(<span class="hljs-keyword">null</span>,<span class="hljs-number">123</span>);<br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">mport org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.util.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TreeMapTest</span> </span>&#123;<br><br>    <span class="hljs-comment">//向TreeMap中添加key-value，要求key必须是由同一个类创建的对象</span><br>    <span class="hljs-comment">//因为要按照key进行排序：自然排序 、定制排序</span><br>    <span class="hljs-comment">//自然排序</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span></span>&#123;<br>        TreeMap map = <span class="hljs-keyword">new</span> TreeMap();<br>        User u1 = <span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;Tom&quot;</span>,<span class="hljs-number">23</span>);<br>        User u2 = <span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;Jerry&quot;</span>,<span class="hljs-number">32</span>);<br>        User u3 = <span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;Jack&quot;</span>,<span class="hljs-number">20</span>);<br>        User u4 = <span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;Rose&quot;</span>,<span class="hljs-number">18</span>);<br><br>        map.put(u1,<span class="hljs-number">98</span>);<br>        map.put(u2,<span class="hljs-number">89</span>);<br>        map.put(u3,<span class="hljs-number">76</span>);<br>        map.put(u4,<span class="hljs-number">100</span>);<br><br>        Set entrySet = map.entrySet();<br>        Iterator iterator1 = entrySet.iterator();<br>        <span class="hljs-keyword">while</span> (iterator1.hasNext())&#123;<br>            Object obj = iterator1.next();<br>            Map.Entry entry = (Map.Entry) obj;<br>            System.out.println(entry.getKey() + <span class="hljs-string">&quot;----&gt;&quot;</span> + entry.getValue());<br><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//定制排序</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test2</span><span class="hljs-params">()</span></span>&#123;<br>        TreeMap map = <span class="hljs-keyword">new</span> TreeMap(<span class="hljs-keyword">new</span> Comparator() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">compare</span><span class="hljs-params">(Object o1, Object o2)</span> </span>&#123;<br>                <span class="hljs-keyword">if</span>(o1 <span class="hljs-keyword">instanceof</span> User &amp;&amp; o2 <span class="hljs-keyword">instanceof</span> User)&#123;<br>                    User u1 = (User)o1;<br>                    User u2 = (User)o2;<br>                    <span class="hljs-keyword">return</span> Integer.compare(u1.getAge(),u2.getAge());<br>                &#125;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">&quot;输入的类型不匹配！&quot;</span>);<br>            &#125;<br>        &#125;);<br>        User u1 = <span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;Tom&quot;</span>,<span class="hljs-number">23</span>);<br>        User u2 = <span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;Jerry&quot;</span>,<span class="hljs-number">32</span>);<br>        User u3 = <span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;Jack&quot;</span>,<span class="hljs-number">20</span>);<br>        User u4 = <span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;Rose&quot;</span>,<span class="hljs-number">18</span>);<br><br>        map.put(u1,<span class="hljs-number">98</span>);<br>        map.put(u2,<span class="hljs-number">89</span>);<br>        map.put(u3,<span class="hljs-number">76</span>);<br>        map.put(u4,<span class="hljs-number">100</span>);<br><br>        Set entrySet = map.entrySet();<br>        Iterator iterator1 = entrySet.iterator();<br>        <span class="hljs-keyword">while</span> (iterator1.hasNext())&#123;<br>            Object obj = iterator1.next();<br>            Map.Entry entry = (Map.Entry) obj;<br>            System.out.println(entry.getKey() + <span class="hljs-string">&quot;----&gt;&quot;</span> + entry.getValue());<br><br>        &#125;<br>    &#125;<br><br><br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.java;<br><br><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.util.Properties;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PropertiesTest</span> </span>&#123;<br><br>    <span class="hljs-comment">//Properties:常用来处理配置文件。key和value都是String类型</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span>  </span>&#123;<br>        FileInputStream fis = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Properties pros = <span class="hljs-keyword">new</span> Properties();<br><br>            fis = <span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-string">&quot;jdbc.properties&quot;</span>);<br>            pros.load(fis);<span class="hljs-comment">//加载流对应的文件</span><br><br>            String name = pros.getProperty(<span class="hljs-string">&quot;name&quot;</span>);<br>            String password = pros.getProperty(<span class="hljs-string">&quot;password&quot;</span>);<br><br>            System.out.println(<span class="hljs-string">&quot;name = &quot;</span> + name + <span class="hljs-string">&quot;, password = &quot;</span> + password);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">if</span>(fis != <span class="hljs-keyword">null</span>)&#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    fis.close();<br>                &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br><br>            &#125;<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="18"><a href="#18" class="headerlink" title="18"></a>18</h2><h3 id="Collections-操作Collection、Map的工具类"><a href="#Collections-操作Collection、Map的工具类" class="headerlink" title="Collections:操作Collection、Map的工具类"></a>Collections:操作Collection、Map的工具类</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.Collections;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Collections:操作Collection、Map的工具类</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 面试题：Collection 和 Collections的区别？</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CollectionsTest</span> </span>&#123;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">reverse(List)：反转 List 中元素的顺序</span><br><span class="hljs-comment">shuffle(List)：对 List 集合元素进行随机排序</span><br><span class="hljs-comment">sort(List)：根据元素的自然顺序对指定 List 集合元素按升序排序</span><br><span class="hljs-comment">sort(List，Comparator)：根据指定的 Comparator 产生的顺序对 List 集合元素进行排序</span><br><span class="hljs-comment">swap(List，int， int)：将指定 list 集合中的 i 处元素和 j 处元素进行交换</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">Object max(Collection)：根据元素的自然顺序，返回给定集合中的最大元素</span><br><span class="hljs-comment">Object max(Collection，Comparator)：根据 Comparator 指定的顺序，返回给定集合中的最大元素</span><br><span class="hljs-comment">Object min(Collection)</span><br><span class="hljs-comment">Object min(Collection，Comparator)</span><br><span class="hljs-comment">int frequency(Collection，Object)：返回指定集合中指定元素的出现次数</span><br><span class="hljs-comment">void copy(List dest,List src)：将src中的内容复制到dest中</span><br><span class="hljs-comment">boolean replaceAll(List list，Object oldVal，Object newVal)：使用新值替换 List 对象的所有旧值</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test2</span><span class="hljs-params">()</span></span>&#123;<br>        List list = <span class="hljs-keyword">new</span> ArrayList();<br>        list.add(<span class="hljs-number">123</span>);<br>        list.add(<span class="hljs-number">43</span>);<br>        list.add(<span class="hljs-number">765</span>);<br>        list.add(-<span class="hljs-number">97</span>);<br>        list.add(<span class="hljs-number">0</span>);<br><br>        <span class="hljs-comment">//报异常：IndexOutOfBoundsException(&quot;Source does not fit in dest&quot;)</span><br><span class="hljs-comment">//        List dest = new ArrayList();</span><br><span class="hljs-comment">//        Collections.copy(dest,list);</span><br>        <span class="hljs-comment">//正确的：</span><br>        List dest = Arrays.asList(<span class="hljs-keyword">new</span> Object[list.size()]);<br>        System.out.println(dest.size());<span class="hljs-comment">//list.size();</span><br>        Collections.copy(dest,list);<br><br>        System.out.println(dest);<br><br><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        Collections 类中提供了多个 synchronizedXxx() 方法，</span><br><span class="hljs-comment">        该方法可使将指定集合包装成线程同步的集合，从而可以解决</span><br><span class="hljs-comment">        多线程并发访问集合时的线程安全问题</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-comment">//返回的list1即为线程安全的List</span><br>        List list1 = Collections.synchronizedList(list);<br><br><br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span></span>&#123;<br>        List list = <span class="hljs-keyword">new</span> ArrayList();<br>        list.add(<span class="hljs-number">123</span>);<br>        list.add(<span class="hljs-number">43</span>);<br>        list.add(<span class="hljs-number">765</span>);<br>        list.add(<span class="hljs-number">765</span>);<br>        list.add(<span class="hljs-number">765</span>);<br>        list.add(-<span class="hljs-number">97</span>);<br>        list.add(<span class="hljs-number">0</span>);<br><br>        System.out.println(list);<br><br><span class="hljs-comment">//        Collections.reverse(list);</span><br><span class="hljs-comment">//        Collections.shuffle(list);</span><br><span class="hljs-comment">//        Collections.sort(list);</span><br><span class="hljs-comment">//        Collections.swap(list,1,2);</span><br>        <span class="hljs-keyword">int</span> frequency = Collections.frequency(list, <span class="hljs-number">123</span>);<br><br>        System.out.println(list);<br>        System.out.println(frequency);<br><br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java核心基础30days笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java核心基础day23笔记</title>
    <link href="/2021/03/17/day23/"/>
    <url>/2021/03/17/day23/</url>
    
    <content type="html"><![CDATA[<h2 id="05-06-07"><a href="#05-06-07" class="headerlink" title="05 06 07"></a>05 06 07</h2><h3 id="Collection接口中声明的方法的测试"><a href="#Collection接口中声明的方法的测试" class="headerlink" title="Collection接口中声明的方法的测试"></a>Collection接口中声明的方法的测试</h3><p>结论：向Collection接口的实现类的对象中添加数据obj时，要求obj所在类要重写equals()</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CollectionTest</span> </span>&#123;<br><br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span></span>&#123;<br>        Collection coll = <span class="hljs-keyword">new</span> ArrayList();<br>        coll.add(<span class="hljs-number">123</span>);<br>        coll.add(<span class="hljs-number">456</span>);<br><span class="hljs-comment">//        Person p = new Person(&quot;Jerry&quot;,20);</span><br><span class="hljs-comment">//        coll.add(p);</span><br>        coll.add(<span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;Jerry&quot;</span>,<span class="hljs-number">20</span>));<br>        coll.add(<span class="hljs-keyword">new</span> String(<span class="hljs-string">&quot;Tom&quot;</span>));<br>        coll.add(<span class="hljs-keyword">false</span>);<br>        <span class="hljs-comment">//1.contains(Object obj):判断当前集合中是否包含obj</span><br>        <span class="hljs-comment">//我们在判断时会调用obj对象所在类的equals()。</span><br>        <span class="hljs-keyword">boolean</span> contains = coll.contains(<span class="hljs-number">123</span>);<br>        System.out.println(contains);<br>        System.out.println(coll.contains(<span class="hljs-keyword">new</span> String(<span class="hljs-string">&quot;Tom&quot;</span>)));<br><span class="hljs-comment">//        System.out.println(coll.contains(p));//true</span><br>        System.out.println(coll.contains(<span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;Jerry&quot;</span>,<span class="hljs-number">20</span>)));<span class="hljs-comment">//false --&gt;true</span><br><br>        <span class="hljs-comment">//2.containsAll(Collection coll1):判断形参coll1中的所有元素是否都存在于当前集合中。</span><br>        Collection coll1 = Arrays.asList(<span class="hljs-number">123</span>,<span class="hljs-number">4567</span>);<br>        System.out.println(coll.containsAll(coll1));<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test2</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">//3.remove(Object obj):从当前集合中移除obj元素。</span><br>        Collection coll = <span class="hljs-keyword">new</span> ArrayList();<br>        coll.add(<span class="hljs-number">123</span>);<br>        coll.add(<span class="hljs-number">456</span>);<br>        coll.add(<span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;Jerry&quot;</span>,<span class="hljs-number">20</span>));<br>        coll.add(<span class="hljs-keyword">new</span> String(<span class="hljs-string">&quot;Tom&quot;</span>));<br>        coll.add(<span class="hljs-keyword">false</span>);<br><br>        coll.remove(<span class="hljs-number">1234</span>);<br>        System.out.println(coll);<br><br>        coll.remove(<span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;Jerry&quot;</span>,<span class="hljs-number">20</span>));<br>        System.out.println(coll);<br><br>        <span class="hljs-comment">//4. removeAll(Collection coll1):差集：从当前集合中移除coll1中所有的元素。</span><br>        Collection coll1 = Arrays.asList(<span class="hljs-number">123</span>,<span class="hljs-number">456</span>);<br>        coll.removeAll(coll1);<br>        System.out.println(coll);<br><br><br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test3</span><span class="hljs-params">()</span></span>&#123;<br>        Collection coll = <span class="hljs-keyword">new</span> ArrayList();<br>        coll.add(<span class="hljs-number">123</span>);<br>        coll.add(<span class="hljs-number">456</span>);<br>        coll.add(<span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;Jerry&quot;</span>,<span class="hljs-number">20</span>));<br>        coll.add(<span class="hljs-keyword">new</span> String(<span class="hljs-string">&quot;Tom&quot;</span>));<br>        coll.add(<span class="hljs-keyword">false</span>);<br><br>        <span class="hljs-comment">//5.retainAll(Collection coll1):交集：获取当前集合和coll1集合的交集，并返回给当前集合</span><br><span class="hljs-comment">//        Collection coll1 = Arrays.asList(123,456,789);</span><br><span class="hljs-comment">//        coll.retainAll(coll1);</span><br><span class="hljs-comment">//        System.out.println(coll);</span><br><br>        <span class="hljs-comment">//6.equals(Object obj):要想返回true，需要当前集合和形参集合的元素都相同。</span><br>        Collection coll1 = <span class="hljs-keyword">new</span> ArrayList();<br>        coll1.add(<span class="hljs-number">456</span>);<br>        coll1.add(<span class="hljs-number">123</span>);<br>        coll1.add(<span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;Jerry&quot;</span>,<span class="hljs-number">20</span>));<br>        coll1.add(<span class="hljs-keyword">new</span> String(<span class="hljs-string">&quot;Tom&quot;</span>));<br>        coll1.add(<span class="hljs-keyword">false</span>);<br><br>        System.out.println(coll.equals(coll1));<br><br><br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test4</span><span class="hljs-params">()</span></span>&#123;<br>        Collection coll = <span class="hljs-keyword">new</span> ArrayList();<br>        coll.add(<span class="hljs-number">123</span>);<br>        coll.add(<span class="hljs-number">456</span>);<br>        coll.add(<span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;Jerry&quot;</span>,<span class="hljs-number">20</span>));<br>        coll.add(<span class="hljs-keyword">new</span> String(<span class="hljs-string">&quot;Tom&quot;</span>));<br>        coll.add(<span class="hljs-keyword">false</span>);<br><br>        <span class="hljs-comment">//7.hashCode():返回当前对象的哈希值</span><br>        System.out.println(coll.hashCode());<br><br>        <span class="hljs-comment">//8.集合 ---&gt;数组：toArray()</span><br>        Object[] arr = coll.toArray();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i &lt; arr.length;i++)&#123;<br>            System.out.println(arr[i]);<br>        &#125;<br><br>        <span class="hljs-comment">//拓展：数组 ---&gt;集合:调用Arrays类的静态方法asList()</span><br>        List&lt;String&gt; list = Arrays.asList(<span class="hljs-keyword">new</span> String[]&#123;<span class="hljs-string">&quot;AA&quot;</span>, <span class="hljs-string">&quot;BB&quot;</span>, <span class="hljs-string">&quot;CC&quot;</span>&#125;);<br>        System.out.println(list);<br><br>        List arr1 = Arrays.asList(<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[]&#123;<span class="hljs-number">123</span>, <span class="hljs-number">456</span>&#125;);<br>        System.out.println(arr1.size());<span class="hljs-comment">//1</span><br><br>        List arr2 = Arrays.asList(<span class="hljs-keyword">new</span> Integer[]&#123;<span class="hljs-number">123</span>, <span class="hljs-number">456</span>&#125;);<br>        System.out.println(arr2.size());<span class="hljs-comment">//2</span><br><br>        <span class="hljs-comment">//9.iterator():返回Iterator接口的实例，用于遍历集合元素。放在IteratorTest.java中测试</span><br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="08-09-10-11"><a href="#08-09-10-11" class="headerlink" title="08 09 10 11"></a>08 09 10 11</h2><h3 id="集合元素的遍历操作，使用迭代器Iterator接口"><a href="#集合元素的遍历操作，使用迭代器Iterator接口" class="headerlink" title="集合元素的遍历操作，使用迭代器Iterator接口"></a>集合元素的遍历操作，使用迭代器Iterator接口</h3><p>1.内部的方法：hasNext() 和  next()</p><p>2.集合对象每次调用iterator()方法都得到一个全新的迭代器对象，默认游标都在集合的第一个元素之前</p><p>3.内部定义了remove(),可以在遍历的时候，删除集合中的元素。此方法不同于集合直接调用remove()</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">IteratorTest</span> </span>&#123;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span></span>&#123;<br>        Collection coll = <span class="hljs-keyword">new</span> ArrayList();<br>        coll.add(<span class="hljs-number">123</span>);<br>        coll.add(<span class="hljs-number">456</span>);<br>        coll.add(<span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;Jerry&quot;</span>,<span class="hljs-number">20</span>));<br>        coll.add(<span class="hljs-keyword">new</span> String(<span class="hljs-string">&quot;Tom&quot;</span>));<br>        coll.add(<span class="hljs-keyword">false</span>);<br><br>        Iterator iterator = coll.iterator();<br>        <span class="hljs-comment">//方式一：</span><br><span class="hljs-comment">//        System.out.println(iterator.next());</span><br><span class="hljs-comment">//        System.out.println(iterator.next());</span><br><span class="hljs-comment">//        System.out.println(iterator.next());</span><br><span class="hljs-comment">//        System.out.println(iterator.next());</span><br><span class="hljs-comment">//        System.out.println(iterator.next());</span><br><span class="hljs-comment">//        //报异常：NoSuchElementException</span><br><span class="hljs-comment">//        System.out.println(iterator.next());</span><br><br>        <span class="hljs-comment">//方式二：不推荐</span><br><span class="hljs-comment">//        for(int i = 0;i &lt; coll.size();i++)&#123;</span><br><span class="hljs-comment">//            System.out.println(iterator.next());</span><br><span class="hljs-comment">//        &#125;</span><br><br>        <span class="hljs-comment">//方式三：推荐</span><br>        <span class="hljs-comment">////hasNext():判断是否还有下一个元素</span><br>        <span class="hljs-keyword">while</span>(iterator.hasNext())&#123;<br>            <span class="hljs-comment">//next():①指针下移 ②将下移以后集合位置上的元素返回</span><br>            System.out.println(iterator.next());<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test2</span><span class="hljs-params">()</span></span>&#123;<br><br>        Collection coll = <span class="hljs-keyword">new</span> ArrayList();<br>        coll.add(<span class="hljs-number">123</span>);<br>        coll.add(<span class="hljs-number">456</span>);<br>        coll.add(<span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;Jerry&quot;</span>,<span class="hljs-number">20</span>));<br>        coll.add(<span class="hljs-keyword">new</span> String(<span class="hljs-string">&quot;Tom&quot;</span>));<br>        coll.add(<span class="hljs-keyword">false</span>);<br><br>        <span class="hljs-comment">//错误方式一：</span><br><span class="hljs-comment">//        Iterator iterator = coll.iterator();</span><br><span class="hljs-comment">//        while((iterator.next()) != null)&#123;</span><br><span class="hljs-comment">//            System.out.println(iterator.next());</span><br><span class="hljs-comment">//        &#125;</span><br><br>        <span class="hljs-comment">//错误方式二：</span><br>        <span class="hljs-comment">//集合对象每次调用iterator()方法都得到一个全新的迭代器对象，默认游标都在集合的第一个元素之前。</span><br>        <span class="hljs-keyword">while</span> (coll.iterator().hasNext())&#123;<br>            System.out.println(coll.iterator().next());<br>        &#125;<br><br><br>    &#125;<br><br>    <span class="hljs-comment">//测试Iterator中的remove()</span><br>    <span class="hljs-comment">//如果还未调用next()或在上一次调用 next 方法之后已经调用了 remove 方法，</span><br>    <span class="hljs-comment">//再调用remove都会报IllegalStateException</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test3</span><span class="hljs-params">()</span></span>&#123;<br>        Collection coll = <span class="hljs-keyword">new</span> ArrayList();<br>        coll.add(<span class="hljs-number">123</span>);<br>        coll.add(<span class="hljs-number">456</span>);<br>        coll.add(<span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;Jerry&quot;</span>,<span class="hljs-number">20</span>));<br>        coll.add(<span class="hljs-keyword">new</span> String(<span class="hljs-string">&quot;Tom&quot;</span>));<br>        coll.add(<span class="hljs-keyword">false</span>);<br><br>        <span class="hljs-comment">//删除集合中&quot;Tom&quot;</span><br>        Iterator iterator = coll.iterator();<br>        <span class="hljs-keyword">while</span> (iterator.hasNext())&#123;<br><span class="hljs-comment">//            iterator.remove();</span><br>            Object obj = iterator.next();<br>            <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;Tom&quot;</span>.equals(obj))&#123;<br>                iterator.remove();<br><span class="hljs-comment">//                iterator.remove();</span><br>            &#125;<br><br>        &#125;<br>        <span class="hljs-comment">//遍历集合</span><br>        iterator = coll.iterator();<br>        <span class="hljs-keyword">while</span> (iterator.hasNext())&#123;<br>            System.out.println(iterator.next());<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="12"><a href="#12" class="headerlink" title="12"></a>12</h2><h3 id="jdk5-0新增foreach循环，用于遍历集合、数组"><a href="#jdk5-0新增foreach循环，用于遍历集合、数组" class="headerlink" title="jdk5.0新增foreach循环，用于遍历集合、数组"></a>jdk5.0新增foreach循环，用于遍历集合、数组</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ForTest</span> </span>&#123;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span></span>&#123;<br>        Collection coll = <span class="hljs-keyword">new</span> ArrayList();<br>        coll.add(<span class="hljs-number">123</span>);<br>        coll.add(<span class="hljs-number">456</span>);<br>        coll.add(<span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;Jerry&quot;</span>,<span class="hljs-number">20</span>));<br>        coll.add(<span class="hljs-keyword">new</span> String(<span class="hljs-string">&quot;Tom&quot;</span>));<br>        coll.add(<span class="hljs-keyword">false</span>);<br><br>        <span class="hljs-comment">//for(集合元素的类型 局部变量 : 集合对象)</span><br>        <span class="hljs-comment">//内部仍然调用了迭代器</span><br>        <span class="hljs-keyword">for</span>(Object obj : coll)&#123;<br>            System.out.println(obj);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test2</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[]&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>&#125;;<br>        <span class="hljs-comment">//for(数组元素的类型 局部变量 : 数组对象)</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i : arr)&#123;<br>            System.out.println(i);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//练习题</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test3</span><span class="hljs-params">()</span></span>&#123;<br><br>        String[] arr = <span class="hljs-keyword">new</span> String[]&#123;<span class="hljs-string">&quot;MM&quot;</span>,<span class="hljs-string">&quot;MM&quot;</span>,<span class="hljs-string">&quot;MM&quot;</span>&#125;;<br><br><span class="hljs-comment">//        //方式一：普通for赋值</span><br><span class="hljs-comment">//        for(int i = 0;i &lt; arr.length;i++)&#123;</span><br><span class="hljs-comment">//            arr[i] = &quot;GG&quot;;</span><br><span class="hljs-comment">//        &#125;</span><br><br>        <span class="hljs-comment">//方式二：增强for循环</span><br>        <span class="hljs-comment">//取出arr[i]，赋值给s，原有数组元素不变</span><br>        <span class="hljs-keyword">for</span>(String s : arr)&#123;<br>            s = <span class="hljs-string">&quot;GG&quot;</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i &lt; arr.length;i++)&#123;<br>            System.out.println(arr[i]);<br>        &#125;<br><br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="13-14-15-16-17-18"><a href="#13-14-15-16-17-18" class="headerlink" title="13 14 15 16 17 18"></a>13 14 15 16 17 18</h2><h3 id="List接口"><a href="#List接口" class="headerlink" title="List接口"></a>List接口</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 1. List接口框架</span><br><span class="hljs-comment"> *    |----Collection接口：单列集合，用来存储一个一个的对象</span><br><span class="hljs-comment"> *          |----List接口：存储有序的、可重复的数据。  --&gt;“动态”数组,替换原有的数组</span><br><span class="hljs-comment"> *              |----ArrayList：作为List接口的主要实现类；线程不安全的，效率高；</span><br><span class="hljs-comment">   底层使用Object[] elementData存储</span><br><span class="hljs-comment"> *              |----LinkedList：对于频繁的插入、删除操作，使用此类效率比ArrayList高；底层使用双向链表存储</span><br><span class="hljs-comment"> *              |----Vector：作为List接口的古老实现类；线程安全的，效率低；</span><br><span class="hljs-comment">  底层使用Object[] elementData存储</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 2. ArrayList的源码分析：</span><br><span class="hljs-comment"> *  2.1 jdk 7情况下</span><br><span class="hljs-comment"> *      ArrayList list = new ArrayList();//底层创建了长度是10的Object[]数组elementData</span><br><span class="hljs-comment"> *      list.add(123);//elementData[0] = new Integer(123);</span><br><span class="hljs-comment"> *      ...</span><br><span class="hljs-comment"> *      list.add(11);//如果此次的添加导致底层elementData数组容量不够，则扩容。</span><br><span class="hljs-comment"> *      默认情况下，扩容为原来的容量的1.5倍，同时需要将原有数组中的数据复制到新的数组中。</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *      结论：建议开发中使用带参的构造器：ArrayList list = new ArrayList(int capacity)</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *   2.2 jdk 8中ArrayList的变化：</span><br><span class="hljs-comment"> *      ArrayList list = new ArrayList();//底层Object[] elementData初始化为&#123;&#125;.并没有创建长度为10的数组</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *      list.add(123);//第一次调用add()时，底层才创建了长度10的数组，并将数据123添加到elementData[0]</span><br><span class="hljs-comment"> *      ...</span><br><span class="hljs-comment"> *      后续的添加和扩容操作与jdk 7 无异。</span><br><span class="hljs-comment"> *   2.3 小结：jdk7中的ArrayList的对象的创建类似于单例的饿汉式，而jdk8中的ArrayList的对象</span><br><span class="hljs-comment"> *            的创建类似于单例的懒汉式，延迟了数组的创建，节省内存</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 3. LinkedList的源码分析：</span><br><span class="hljs-comment"> *      LinkedList list = new LinkedList(); 内部声明了Node类型的first和last属性，默认值为null</span><br><span class="hljs-comment"> *      list.add(123);//将123封装到Node中，创建了Node对象</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *      其中，Node定义为：体现了LinkedList的双向链表的说法</span><br><span class="hljs-comment"> *      private static class Node&lt;E&gt; &#123;</span><br><span class="hljs-comment">             E item;</span><br><span class="hljs-comment">             Node&lt;E&gt; next;</span><br><span class="hljs-comment">             Node&lt;E&gt; prev;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">             Node(Node&lt;E&gt; prev, E element, Node&lt;E&gt; next) &#123;</span><br><span class="hljs-comment">             this.item = element;</span><br><span class="hljs-comment">             this.next = next;</span><br><span class="hljs-comment">             this.prev = prev;</span><br><span class="hljs-comment">             &#125;</span><br><span class="hljs-comment">         &#125;</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 4. Vector的源码分析：jdk7和jdk8中通过Vector()构造器创建对象时，底层都创建了长度为10的数组。</span><br><span class="hljs-comment"> *      在扩容方面，默认扩容为原来的数组长度的2倍。</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *  面试题：ArrayList、LinkedList、Vector三者的异同？</span><br><span class="hljs-comment"> *  同：三个类都是实现了List接口，存储数据的特点相同：存储有序的、可重复的数据</span><br><span class="hljs-comment"> *  不同：见上</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *  5. List接口中的常用方法</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ListTest</span> </span>&#123;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">void add(int index, Object ele):在index位置插入ele元素</span><br><span class="hljs-comment">boolean addAll(int index, Collection eles):从index位置开始将eles中的所有元素添加进来</span><br><span class="hljs-comment">Object get(int index):获取指定index位置的元素</span><br><span class="hljs-comment">int indexOf(Object obj):返回obj在集合中首次出现的位置</span><br><span class="hljs-comment">int lastIndexOf(Object obj):返回obj在当前集合中末次出现的位置</span><br><span class="hljs-comment">Object remove(int index):移除指定index位置的元素，并返回此元素</span><br><span class="hljs-comment">Object set(int index, Object ele):设置指定index位置的元素为ele</span><br><span class="hljs-comment">List subList(int fromIndex, int toIndex):返回从fromIndex到toIndex位置的子集合</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">总结：常用方法</span><br><span class="hljs-comment">增：add(Object obj)</span><br><span class="hljs-comment">删：remove(int index) / remove(Object obj)</span><br><span class="hljs-comment">改：set(int index, Object ele)</span><br><span class="hljs-comment">查：get(int index)</span><br><span class="hljs-comment">插：add(int index, Object ele)</span><br><span class="hljs-comment">长度：size()</span><br><span class="hljs-comment">遍历：① Iterator迭代器方式</span><br><span class="hljs-comment">     ② 增强for循环</span><br><span class="hljs-comment">     ③ 普通的循环</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test3</span><span class="hljs-params">()</span></span>&#123;<br>        ArrayList list = <span class="hljs-keyword">new</span> ArrayList();<br>        list.add(<span class="hljs-number">123</span>);<br>        list.add(<span class="hljs-number">456</span>);<br>        list.add(<span class="hljs-string">&quot;AA&quot;</span>);<br><br>        <span class="hljs-comment">//方式一：Iterator迭代器方式</span><br>        Iterator iterator = list.iterator();<br>        <span class="hljs-keyword">while</span>(iterator.hasNext())&#123;<br>            System.out.println(iterator.next());<br>        &#125;<br><br>        System.out.println(<span class="hljs-string">&quot;***************&quot;</span>);<br><br>        <span class="hljs-comment">//方式二：增强for循环</span><br>        <span class="hljs-keyword">for</span>(Object obj : list)&#123;<br>            System.out.println(obj);<br>        &#125;<br><br>        System.out.println(<span class="hljs-string">&quot;***************&quot;</span>);<br><br>        <span class="hljs-comment">//方式三：普通for循环</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i &lt; list.size();i++)&#123;<br>            System.out.println(list.get(i));<br>        &#125;<br><br><br><br>    &#125;<br><br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test2</span><span class="hljs-params">()</span></span>&#123;<br>        ArrayList list = <span class="hljs-keyword">new</span> ArrayList();<br>        list.add(<span class="hljs-number">123</span>);<br>        list.add(<span class="hljs-number">456</span>);<br>        list.add(<span class="hljs-string">&quot;AA&quot;</span>);<br>        list.add(<span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;Tom&quot;</span>,<span class="hljs-number">12</span>));<br>        list.add(<span class="hljs-number">456</span>);<br>        <span class="hljs-comment">//int indexOf(Object obj):返回obj在集合中首次出现的位置。如果不存在，返回-1.</span><br>        <span class="hljs-keyword">int</span> index = list.indexOf(<span class="hljs-number">4567</span>);<br>        System.out.println(index);<br><br>        <span class="hljs-comment">//int lastIndexOf(Object obj):返回obj在当前集合中末次出现的位置。如果不存在，返回-1.</span><br>        System.out.println(list.lastIndexOf(<span class="hljs-number">456</span>));<br><br>        <span class="hljs-comment">//Object remove(int index):移除指定index位置的元素，并返回此元素</span><br>        Object obj = list.remove(<span class="hljs-number">0</span>);<br>        System.out.println(obj);<br>        System.out.println(list);<br><br>        <span class="hljs-comment">//Object set(int index, Object ele):设置指定index位置的元素为ele</span><br>        list.set(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;CC&quot;</span>);<br>        System.out.println(list);<br><br>        <span class="hljs-comment">//List subList(int fromIndex, int toIndex):返回从fromIndex到toIndex位置的左闭右开区间的子集合</span><br>        List subList = list.subList(<span class="hljs-number">2</span>, <span class="hljs-number">4</span>);<br>        System.out.println(subList);<br>        System.out.println(list);<br><br><br>    &#125;<br><br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span></span>&#123;<br>        ArrayList list = <span class="hljs-keyword">new</span> ArrayList();<br>        list.add(<span class="hljs-number">123</span>);<br>        list.add(<span class="hljs-number">456</span>);<br>        list.add(<span class="hljs-string">&quot;AA&quot;</span>);<br>        list.add(<span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;Tom&quot;</span>,<span class="hljs-number">12</span>));<br>        list.add(<span class="hljs-number">456</span>);<br><br>        System.out.println(list);<br><br>        <span class="hljs-comment">//void add(int index, Object ele):在index位置插入ele元素</span><br>        list.add(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;BB&quot;</span>);<br>        System.out.println(list);<br><br>        <span class="hljs-comment">//boolean addAll(int index, Collection eles):从index位置开始将eles中的所有元素添加进来</span><br>        List list1 = Arrays.asList(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>);<br>        list.addAll(list1);<br><span class="hljs-comment">//        list.add(list1);</span><br>        System.out.println(list.size());<span class="hljs-comment">//9</span><br><br>        <span class="hljs-comment">//Object get(int index):获取指定index位置的元素</span><br>        System.out.println(list.get(<span class="hljs-number">0</span>));<br><br>    &#125;<br><br><br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="19"><a href="#19" class="headerlink" title="19"></a>19</h2><h3 id="List的一个面试小题"><a href="#List的一个面试小题" class="headerlink" title="List的一个面试小题"></a>List的一个面试小题</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ListExer</span> </span>&#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    区分List中remove(int index)和remove(Object obj)</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testListRemove</span><span class="hljs-params">()</span> </span>&#123;<br>        List list = <span class="hljs-keyword">new</span> ArrayList();<br>        list.add(<span class="hljs-number">1</span>);<br>        list.add(<span class="hljs-number">2</span>);<br>        list.add(<span class="hljs-number">3</span>);<br>        updateList(list);<br>        System.out.println(list);<span class="hljs-comment">//</span><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">updateList</span><span class="hljs-params">(List list)</span> </span>&#123;<br><span class="hljs-comment">//        list.remove(2);//[1,2]</span><br>        list.remove(<span class="hljs-keyword">new</span> Integer(<span class="hljs-number">2</span>));<span class="hljs-comment">//[1,3]</span><br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="20-21-22-23-24-25"><a href="#20-21-22-23-24-25" class="headerlink" title="20 21 22 23 24 25"></a>20 21 22 23 24 25</h2><h3 id="Set接口"><a href="#Set接口" class="headerlink" title="Set接口"></a>Set接口</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Set接口的框架：</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * |----Collection接口：单列集合，用来存储一个一个的对象</span><br><span class="hljs-comment"> *          |----Set接口：存储无序的、不可重复的数据   --&gt;高中讲的“集合”</span><br><span class="hljs-comment"> *              |----HashSet：作为Set接口的主要实现类；线程不安全的；可以存储null值</span><br><span class="hljs-comment"> *                  |----LinkedHashSet：作为HashSet的子类；遍历其内部数据时，可以按照添加的顺序遍历</span><br><span class="hljs-comment"> *                                      对于频繁的遍历操作，LinkedHashSet效率高于HashSet</span><br><span class="hljs-comment"> *              |----TreeSet：可以按照添加对象的指定属性，进行排序</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *  1. Set接口中没有额外定义新的方法，使用的都是Collection中声明过的方法</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *  2. 要求：向Set(主要指：HashSet、LinkedHashSet)中添加的数据，其所在的类一定要重写hashCode()和equals()</span><br><span class="hljs-comment"> *     要求：重写的hashCode()和equals()尽可能保持一致性：相等的对象必须具有相等的散列码</span><br><span class="hljs-comment"> *     重写两个方法的小技巧：对象中用作 equals() 方法比较的 Field，都应该用来计算 hashCode 值</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SetTest</span> </span>&#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    一、Set：存储无序的、不可重复的数据</span><br><span class="hljs-comment">    以HashSet为例说明：</span><br><span class="hljs-comment">    1. 无序性：不等于随机性。存储的数据在底层数组中并非按照数组索引的顺序添加，而是根据数据的哈希值决定的</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    2. 不可重复性：保证添加的元素按照equals()判断时，不能返回true.即：相同的元素只能添加一个</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    二、添加元素的过程：以HashSet为例：</span><br><span class="hljs-comment">        我们向HashSet中添加元素a,首先调用元素a所在类的hashCode()方法，计算元素a的哈希值，</span><br><span class="hljs-comment">        此哈希值接着通过某种算法计算出在HashSet底层数组中的存放位置（即为：索引位置），判断</span><br><span class="hljs-comment">        数组此位置上是否已经有元素：</span><br><span class="hljs-comment">            如果此位置上没有其他元素，则元素a添加成功。 ---&gt;情况1</span><br><span class="hljs-comment">            如果此位置上有其他元素b(或以链表形式存在的多个元素），则比较元素a与元素b的hash值：</span><br><span class="hljs-comment">                如果hash值不相同，则元素a添加成功。---&gt;情况2</span><br><span class="hljs-comment">                如果hash值相同，进而需要调用元素a所在类的equals()方法：</span><br><span class="hljs-comment">                       equals()返回true,元素a添加失败</span><br><span class="hljs-comment">                       equals()返回false,则元素a添加成功。---&gt;情况3</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        对于添加成功的情况2和情况3而言：元素a 与已经存在指定索引位置上数据以链表的方式存储</span><br><span class="hljs-comment">        jdk 7 :元素a放到数组中，指向原来的元素</span><br><span class="hljs-comment">        jdk 8 :原来的元素在数组中，指向元素a</span><br><span class="hljs-comment">        总结：七上八下</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        HashSet底层：数组+链表的结构</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">     */</span><br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span></span>&#123;<br>        Set set = <span class="hljs-keyword">new</span> HashSet();<br>        set.add(<span class="hljs-number">456</span>);<br>        set.add(<span class="hljs-number">123</span>);<br>        set.add(<span class="hljs-number">123</span>);<br>        set.add(<span class="hljs-string">&quot;AA&quot;</span>);<br>        set.add(<span class="hljs-string">&quot;CC&quot;</span>);<br>        set.add(<span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;Tom&quot;</span>,<span class="hljs-number">12</span>));<br>        set.add(<span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;Tom&quot;</span>,<span class="hljs-number">12</span>));<br>        set.add(<span class="hljs-number">129</span>);<br><br>        Iterator iterator = set.iterator();<br>        <span class="hljs-keyword">while</span>(iterator.hasNext())&#123;<br>            System.out.println(iterator.next());<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//LinkedHashSet的使用</span><br>    <span class="hljs-comment">//LinkedHashSet作为HashSet的子类，在添加数据的同时，每个数据还维护了两个引用，记录此数据前一个</span><br>    <span class="hljs-comment">//数据和后一个数据。</span><br>    <span class="hljs-comment">//优点：对于频繁的遍历操作，LinkedHashSet效率高于HashSet</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test2</span><span class="hljs-params">()</span></span>&#123;<br>        Set set = <span class="hljs-keyword">new</span> LinkedHashSet();<br>        set.add(<span class="hljs-number">456</span>);<br>        set.add(<span class="hljs-number">123</span>);<br>        set.add(<span class="hljs-number">123</span>);<br>        set.add(<span class="hljs-string">&quot;AA&quot;</span>);<br>        set.add(<span class="hljs-string">&quot;CC&quot;</span>);<br>        set.add(<span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;Tom&quot;</span>,<span class="hljs-number">12</span>));<br>        set.add(<span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;Tom&quot;</span>,<span class="hljs-number">12</span>));<br>        set.add(<span class="hljs-number">129</span>);<br><br>        Iterator iterator = set.iterator();<br>        <span class="hljs-keyword">while</span>(iterator.hasNext())&#123;<br>            System.out.println(iterator.next());<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TreeSetTest</span> </span>&#123;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    1.向TreeSet中添加的数据，要求是相同类的对象。</span><br><span class="hljs-comment">    2.两种排序方式：自然排序（实现Comparable接口） 和 定制排序（Comparator）</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    3.自然排序中，比较两个对象是否相同的标准为：compareTo()返回0.不再是equals().</span><br><span class="hljs-comment">    4.定制排序中，比较两个对象是否相同的标准为：compare()返回0.不再是equals().</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span></span>&#123;<br>        TreeSet set = <span class="hljs-keyword">new</span> TreeSet();<br><br>        <span class="hljs-comment">//失败：不能添加不同类的对象</span><br><span class="hljs-comment">//        set.add(123);</span><br><span class="hljs-comment">//        set.add(456);</span><br><span class="hljs-comment">//        set.add(&quot;AA&quot;);</span><br><span class="hljs-comment">//        set.add(new User(&quot;Tom&quot;,12));</span><br><br>            <span class="hljs-comment">//举例一：</span><br><span class="hljs-comment">//        set.add(34);</span><br><span class="hljs-comment">//        set.add(-34);</span><br><span class="hljs-comment">//        set.add(43);</span><br><span class="hljs-comment">//        set.add(11);</span><br><span class="hljs-comment">//        set.add(8);</span><br><br>        <span class="hljs-comment">//举例二：</span><br>        set.add(<span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;Tom&quot;</span>,<span class="hljs-number">12</span>));<br>        set.add(<span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;Jerry&quot;</span>,<span class="hljs-number">32</span>));<br>        set.add(<span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;Jim&quot;</span>,<span class="hljs-number">2</span>));<br>        set.add(<span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;Mike&quot;</span>,<span class="hljs-number">65</span>));<br>        set.add(<span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;Jack&quot;</span>,<span class="hljs-number">33</span>));<br>        set.add(<span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;Jack&quot;</span>,<span class="hljs-number">56</span>));<br><br><br>        Iterator iterator = set.iterator();<br>        <span class="hljs-keyword">while</span>(iterator.hasNext())&#123;<br>            System.out.println(iterator.next());<br>        &#125;<br><br>    &#125;<br>    <span class="hljs-comment">/*按照姓名从大到小排列,年龄从小到大排列</span><br><span class="hljs-comment">   @Override</span><br><span class="hljs-comment">   public int compareTo(Object o) &#123;</span><br><span class="hljs-comment">    if(o instanceof User)&#123;</span><br><span class="hljs-comment">          User user = (User)o;</span><br><span class="hljs-comment">//         return -this.name.compareTo(user.name);</span><br><span class="hljs-comment">           int compare = -this.name.compareTo(user.name);</span><br><span class="hljs-comment">           if(compare != 0)&#123;</span><br><span class="hljs-comment">             return compare;</span><br><span class="hljs-comment">           &#125;else&#123;</span><br><span class="hljs-comment">               return Integer.compare(this.age,user.age);</span><br><span class="hljs-comment">           &#125;</span><br><span class="hljs-comment">       &#125;else&#123;</span><br><span class="hljs-comment">           throw new RuntimeException(&quot;输入的类型不匹配&quot;);</span><br><span class="hljs-comment">       &#125;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   &#125;</span><br><span class="hljs-comment">*/</span>  <br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test2</span><span class="hljs-params">()</span></span>&#123;<br>        Comparator com = <span class="hljs-keyword">new</span> Comparator() &#123;<br>            <span class="hljs-comment">//按照年龄从小到大排列</span><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">compare</span><span class="hljs-params">(Object o1, Object o2)</span> </span>&#123;<br>                <span class="hljs-keyword">if</span>(o1 <span class="hljs-keyword">instanceof</span> User &amp;&amp; o2 <span class="hljs-keyword">instanceof</span> User)&#123;<br>                    User u1 = (User)o1;<br>                    User u2 = (User)o2;<br>                    <span class="hljs-keyword">return</span> Integer.compare(u1.getAge(),u2.getAge());<br>                &#125;<span class="hljs-keyword">else</span>&#123;<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">&quot;输入的数据类型不匹配&quot;</span>);<br>                &#125;<br>            &#125;<br>        &#125;;<br><br>        TreeSet set = <span class="hljs-keyword">new</span> TreeSet(com);<br>        set.add(<span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;Tom&quot;</span>,<span class="hljs-number">12</span>));<br>        set.add(<span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;Jerry&quot;</span>,<span class="hljs-number">32</span>));<br>        set.add(<span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;Jim&quot;</span>,<span class="hljs-number">2</span>));<br>        set.add(<span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;Mike&quot;</span>,<span class="hljs-number">65</span>));<br>        set.add(<span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;Mary&quot;</span>,<span class="hljs-number">33</span>));<br>        set.add(<span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;Jack&quot;</span>,<span class="hljs-number">33</span>));<br>        set.add(<span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;Jack&quot;</span>,<span class="hljs-number">56</span>));<br><br><br>        Iterator iterator = set.iterator();<br>        <span class="hljs-keyword">while</span>(iterator.hasNext())&#123;<br>            System.out.println(iterator.next());<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java核心基础30days笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/03/16/day22/"/>
    <url>/2021/03/16/day22/</url>
    
    <content type="html"><![CDATA[<h2 id="04-05-06-07-08"><a href="#04-05-06-07-08" class="headerlink" title="04 05 06 07 08"></a>04 05 06 07 08</h2><h3 id="一、枚举类的使用"><a href="#一、枚举类的使用" class="headerlink" title="一、枚举类的使用"></a>一、枚举类的使用</h3><p>1.枚举类的理解：类的对象只有有限个，确定的。我们称此类为枚举类<br>2.当需要定义一组常量时，强烈建议使用枚举类<br>3.如果枚举类中只有一个对象，则可以作为单例模式的实现方式</p><h3 id="二、如何定义枚举类"><a href="#二、如何定义枚举类" class="headerlink" title="二、如何定义枚举类"></a>二、如何定义枚举类</h3><p>方式一：jdk5.0之前，自定义枚举类<br>方式二：jdk5.0之后，可以使用enum关键字定义枚举类</p><h3 id="三、Enum类中的常用方法"><a href="#三、Enum类中的常用方法" class="headerlink" title="三、Enum类中的常用方法"></a>三、Enum类中的常用方法</h3><p>values()方法：返回枚举类型的对象数组。该方法可以很方便地遍历所有的枚举值</p><p>valueOf(String str)：可以把一个字符串转为对应的枚举类对象。要求字符串必须是枚举类对象的“名字”。如不是，会有运行时异常：IllegalArgumentException</p><p>toString()：返回当前枚举类对象常量的名称</p><h3 id="四、使用enum关键字定义的枚举类实现接口的情况"><a href="#四、使用enum关键字定义的枚举类实现接口的情况" class="headerlink" title="四、使用enum关键字定义的枚举类实现接口的情况"></a>四、使用enum关键字定义的枚举类实现接口的情况</h3><p>情况一：实现接口，在enum类中实现抽象方法</p><p>情况二：让枚举类的对象分别实现接口中的抽象方法</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 使用enum关键字定义枚举类</span><br><span class="hljs-comment">* 说明：定义的枚举类默认继承于java.lang.Enum类</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SeasonTest1</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Season1 summer = Season1.SUMMER;<br>        <span class="hljs-comment">//toString():返回枚举类对象的名称</span><br>        System.out.println(summer.toString());<br><br><span class="hljs-comment">//        System.out.println(Season1.class.getSuperclass());</span><br>        System.out.println(<span class="hljs-string">&quot;****************&quot;</span>);<br>        <span class="hljs-comment">//values():返回所有的枚举类对象构成的数组</span><br>        Season1[] values = Season1.values();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i &lt; values.length;i++)&#123;<br>            System.out.println(values[i]);<br>            values[i].show();<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;****************&quot;</span>);<br>        Thread.State[] values1 = Thread.State.values();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; values1.length; i++) &#123;<br>            System.out.println(values1[i]);<br>        &#125;<br><br>        <span class="hljs-comment">//valueOf(String objName):返回枚举类中对象名是objName的对象。</span><br>        Season1 winter = Season1.valueOf(<span class="hljs-string">&quot;WINTER&quot;</span>);<br>        <span class="hljs-comment">//如果没有objName的枚举类对象，则抛异常：IllegalArgumentException</span><br><span class="hljs-comment">//        Season1 winter = Season1.valueOf(&quot;WINTER1&quot;);</span><br>        System.out.println(winter);<br>        winter.show();<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Info</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">show</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br><span class="hljs-comment">//使用enum关键字枚举类</span><br><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">Season1</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Info</span></span>&#123;<br>    <span class="hljs-comment">//1.提供当前枚举类的对象，多个对象之间用&quot;,&quot;隔开，末尾对象&quot;;&quot;结束</span><br>    SPRING(<span class="hljs-string">&quot;春天&quot;</span>,<span class="hljs-string">&quot;春暖花开&quot;</span>)&#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">show</span><span class="hljs-params">()</span> </span>&#123;<br>            System.out.println(<span class="hljs-string">&quot;春天在哪里？&quot;</span>);<br>        &#125;<br>    &#125;,<br>    SUMMER(<span class="hljs-string">&quot;夏天&quot;</span>,<span class="hljs-string">&quot;夏日炎炎&quot;</span>)&#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">show</span><span class="hljs-params">()</span> </span>&#123;<br>            System.out.println(<span class="hljs-string">&quot;宁夏&quot;</span>);<br>        &#125;<br>    &#125;,<br>    AUTUMN(<span class="hljs-string">&quot;秋天&quot;</span>,<span class="hljs-string">&quot;秋高气爽&quot;</span>)&#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">show</span><span class="hljs-params">()</span> </span>&#123;<br>            System.out.println(<span class="hljs-string">&quot;秋天不回来&quot;</span>);<br>        &#125;<br>    &#125;,<br>    WINTER(<span class="hljs-string">&quot;冬天&quot;</span>,<span class="hljs-string">&quot;冰天雪地&quot;</span>)&#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">show</span><span class="hljs-params">()</span> </span>&#123;<br>            System.out.println(<span class="hljs-string">&quot;大约在冬季&quot;</span>);<br>        &#125;<br>    &#125;;<br><br>    <span class="hljs-comment">//2.声明Season对象的属性:private final修饰</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String seasonName;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String seasonDesc;<br><br>    <span class="hljs-comment">//2.私有化类的构造器,并给对象属性赋值</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Season1</span><span class="hljs-params">(String seasonName,String seasonDesc)</span></span>&#123;<br>        <span class="hljs-keyword">this</span>.seasonName = seasonName;<br>        <span class="hljs-keyword">this</span>.seasonDesc = seasonDesc;<br>    &#125;<br><br>    <span class="hljs-comment">//4.其他诉求1：获取枚举类对象的属性</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getSeasonName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> seasonName;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getSeasonDesc</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> seasonDesc;<br>    &#125;<br><span class="hljs-comment">//    //4.其他诉求1：提供toString()</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//    @Override</span><br><span class="hljs-comment">//    public String toString() &#123;</span><br><span class="hljs-comment">//        return &quot;Season1&#123;&quot; +</span><br><span class="hljs-comment">//                &quot;seasonName=&#x27;&quot; + seasonName + &#x27;\&#x27;&#x27; +</span><br><span class="hljs-comment">//                &quot;, seasonDesc=&#x27;&quot; + seasonDesc + &#x27;\&#x27;&#x27; +</span><br><span class="hljs-comment">//                &#x27;&#125;&#x27;;</span><br><span class="hljs-comment">//    &#125;</span><br><br><br><span class="hljs-comment">//    @Override</span><br><span class="hljs-comment">//    public void show() &#123;</span><br><span class="hljs-comment">//        System.out.println(&quot;这是一个季节&quot;);</span><br><span class="hljs-comment">//    &#125;</span><br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="11-12-13-16-17"><a href="#11-12-13-16-17" class="headerlink" title="11 12 13 16 17"></a>11 12 13 16 17</h2><h3 id="注解的使用"><a href="#注解的使用" class="headerlink" title="注解的使用"></a>注解的使用</h3><p>1.理解Annotation</p><p>① jdk 5.0 新增的功能<br>② Annotation 其实就是代码里的特殊标记, 这些标记可以在编译, 类加载, 运行时被读取, 并执行相应的处理。通过使用 Annotation,程序员可以在不改变原有逻辑的情况下, 在源文件中嵌入一些补充信息<br>③在JavaSE中，注解的使用目的比较简单，例如标记过时的功能，忽略警告等。在JavaEE/Android中注解占据了更重要的角色，例如用来配置应用程序的任何切面，代替JavaEE旧版中所遗留的繁冗代码和XML配置等</p><p>2.Annocation的使用示例</p><p>示例一：生成文档相关的注解<br>示例二：在编译时进行格式检查(JDK内置的三个基本注解)<br>@Override: 限定重写父类方法, 该注解只能用于方法<br>@Deprecated: 用于表示所修饰的元素(类, 方法等)已过时。通常是因为所修饰的结构危险或存在更好的选择<br>@SuppressWarnings: 抑制编译器警告<br>示例三：跟踪代码依赖性，实现替代配置文件功能</p><p>3.如何自定义注解：参照@SuppressWarnings定义</p><p>① 注解声明为：@interface<br>② 内部定义成员，通常使用value表示<br>③ 可以指定成员的默认值，使用default定义<br>④ 如果自定义注解没有成员，表明是一个标识作用<br>如果注解有成员，在使用注解时，需要指明成员的值<br>自定义注解必须配上注解的信息处理流程(使用反射)才有意义<br>自定义注解通过都会指明两个元注解：Retention、Target</p><p>4.jdk提供的4种元注解</p><p>元注解：对现有的注解进行解释说明的注解</p><p>Retention：指定所修饰的 Annotation 的生命周期：SOURCE\CLASS（默认行为）\RUNTIME<br>    只有声明为RUNTIME生命周期的注解，才能通过反射获取。<br>Target:用于指定被修饰的 Annotation 能用于修饰哪些程序元素<br>Documented:表示所修饰的注解在被javadoc解析时，保留下来（出现频率较低）<br>Inherited:被它修饰的 Annotation 将具有继承性（出现频率较低）</p><p>5.通过反射获取注解信息—到反射内容时系统讲解</p><p>6.jdk 8 中注解的新特性：可重复注解、类型注解<br>    6.1可重复注解：① 在MyAnnotation上声明@Repeatable，成员值为MyAnnotations.class<br>                               ② MyAnnotation的Target和Retention等元注解与MyAnnotations相同</p><p>​    6.2类型注解：<br>​        ElementType.TYPE_PARAMETER表示该注解能写在类型变量的声明语句中（如：泛型声明）<br>​        ElementType.TYPE_USE表示该注解能写在使用类型的任何语句中</p><h2 id="19"><a href="#19" class="headerlink" title="19"></a>19</h2><h3 id="一、集合框架的概述"><a href="#一、集合框架的概述" class="headerlink" title="一、集合框架的概述"></a>一、集合框架的概述</h3><p>1.集合、数组都是对多个数据进行存储操作的结构，简称Java容器<br>    说明：此时的存储，主要指的是内存层面的存储，不涉及到持久化的存储（.txt,.jpg,.avi，数据库中）</p><p>2.数组在存储多个数据方面的特点：<br>    2.1一旦初始化以后，其长度就确定了<br>    2.2数组一旦定义好，其元素的类型也就确定了。我们也就只能操作指定类型的数据了<br>        比如：String[] arr;int[] arr1;Object[] arr2;</p><p>3.数组在存储多个数据方面的缺点：<br>    3.1一旦初始化以后，其长度就不可修改<br>    3.2数组中提供的方法非常有限，对于添加、删除、插入数据等操作，非常不便，同时效率不高<br>    3.3获取数组中实际元素的个数的需求，数组没有现成的属性或方法可用<br>    3.4数组存储数据的特点：有序、可重复。对于无序、不可重复的需求，不能满足</p><h3 id="二、集合框架"><a href="#二、集合框架" class="headerlink" title="二、集合框架"></a>二、集合框架</h3><p>|—-Collection接口：单列集合，用来存储一个一个的对象<br>    |—-List接口：存储有序的、可重复的数据–&gt;“动态”数组<br>        |—-ArrayList、LinkedList、Vector<br>    |—-Set接口：存储无序的、不可重复的数据–&gt;高中讲的“集合”<br>        HashSet、LinkedHashSet、TreeSet</p><p>|—-Map接口：双列集合，用来存储一对(key - value)一对的数据–&gt;高中函数：y = f(x)<br>    |—-HashMap、LinkedHashMap、TreeMap、Hashtable、Properties</p><h3 id="三、Collection接口中的方法的使用"><a href="#三、Collection接口中的方法的使用" class="headerlink" title="三、Collection接口中的方法的使用"></a>三、Collection接口中的方法的使用</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CollectionTest</span> </span>&#123;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span></span>&#123;<br>        Collection coll = <span class="hljs-keyword">new</span> ArrayList();<br><br>        <span class="hljs-comment">//add(Object e):将元素e添加到集合coll中</span><br>        coll.add(<span class="hljs-string">&quot;AA&quot;</span>);<br>        coll.add(<span class="hljs-string">&quot;BB&quot;</span>);<br>        coll.add(<span class="hljs-number">123</span>);<span class="hljs-comment">//自动装箱</span><br>        coll.add(<span class="hljs-keyword">new</span> Date());<br><br>        <span class="hljs-comment">//size():获取添加的元素的个数</span><br>        System.out.println(coll.size());<span class="hljs-comment">//4</span><br><br>        <span class="hljs-comment">//addAll(Collection coll1):将coll1集合中的元素添加到当前的集合中</span><br>        Collection coll1 = <span class="hljs-keyword">new</span> ArrayList();<br>        coll1.add(<span class="hljs-number">456</span>);<br>        coll1.add(<span class="hljs-string">&quot;CC&quot;</span>);<br>        coll.addAll(coll1);<br><br>        System.out.println(coll.size());<span class="hljs-comment">//6</span><br>        System.out.println(coll);<br><br>        <span class="hljs-comment">//clear():清空集合元素</span><br>        coll.clear();<br><br>        <span class="hljs-comment">//isEmpty():判断当前集合是否为空</span><br>        System.out.println(coll.isEmpty());<br><br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java核心基础30days笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java核心基础day21笔记</title>
    <link href="/2021/03/15/day21/"/>
    <url>/2021/03/15/day21/</url>
    
    <content type="html"><![CDATA[<h2 id="07"><a href="#07" class="headerlink" title="07"></a>07</h2><h3 id="获取两个字符串中最大相同子串（只有一个最大相同子串）"><a href="#获取两个字符串中最大相同子串（只有一个最大相同子串）" class="headerlink" title="获取两个字符串中最大相同子串（只有一个最大相同子串）"></a>获取两个字符串中最大相同子串（只有一个最大相同子串）</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">获取两个字符串中最大相同子串。比如：str1 = &quot;abcwerthelloyuiodefabcdef&quot;;str2 = &quot;cvhellobnm&quot;</span><br><span class="hljs-comment">提示：将短的那个串进行长度依次递减的子串与较长的串比较。</span><br><span class="hljs-comment">*/</span><br><span class="hljs-comment">//前提：两个字符串中只有一个最大相同子串</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getMaxSameString</span><span class="hljs-params">(String str1,String str2)</span> </span>&#123;<br><span class="hljs-keyword">if</span>(str1 != <span class="hljs-keyword">null</span> &amp;&amp; str2 != <span class="hljs-keyword">null</span>) &#123;<br>    String maxStr = (str1.length() &gt;= str2.length())? str1 : str2;<br>        String minStr = (str1.length() &lt; str2.length())? str1 : str2;<br>        <span class="hljs-keyword">int</span> length = minStr.length();<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i &lt; length;i++) &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>,y = length - i;y &lt;= length;x++,y++) &#123;<br>            String subStr = minStr.substring(x,y);<br>                <span class="hljs-keyword">if</span>(maxStr.contains(subStr))&#123;<br>                    <span class="hljs-keyword">return</span> subStr;<br>                &#125;<br><br>            &#125;<br>        &#125;<br><br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="08"><a href="#08" class="headerlink" title="08"></a>08</h2><h3 id="获取两个字符串中最大相同子串（存在多个长度相同的最大相同子串）"><a href="#获取两个字符串中最大相同子串（存在多个长度相同的最大相同子串）" class="headerlink" title="获取两个字符串中最大相同子串（存在多个长度相同的最大相同子串）"></a>获取两个字符串中最大相同子串（存在多个长度相同的最大相同子串）</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">// 此时先返回String[]，后面可以用集合中的ArrayList替换，较方便</span><br><span class="hljs-keyword">public</span> String[] getMaxSameString1(String str1, String str2) &#123;<br>    <span class="hljs-keyword">if</span> (str1 != <span class="hljs-keyword">null</span> &amp;&amp; str2 != <span class="hljs-keyword">null</span>) &#123;<br>        StringBuffer sBuffer = <span class="hljs-keyword">new</span> StringBuffer();<br>        String maxString = (str1.length() &gt; str2.length()) ? str1 : str2;<br>        String minString = (str1.length() &gt; str2.length()) ? str2 : str1;<br><br>        <span class="hljs-keyword">int</span> len = minString.length();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>, y = len - i; y &lt;= len; x++, y++) &#123;<br>                String subString = minString.substring(x, y);<br>                <span class="hljs-keyword">if</span> (maxString.contains(subString)) &#123;<br>                    sBuffer.append(subString + <span class="hljs-string">&quot;,&quot;</span>);<br>                &#125;<br>            &#125;<br>          <span class="hljs-comment">//System.out.println(sBuffer);</span><br>            <span class="hljs-keyword">if</span> (sBuffer.length() != <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        String[] split = sBuffer.toString().replaceAll(<span class="hljs-string">&quot;,$&quot;</span>, <span class="hljs-string">&quot;&quot;</span>).split(<span class="hljs-string">&quot;\\,&quot;</span>);<br>        <span class="hljs-keyword">return</span> split;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>&#125;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testGetMaxSameString</span><span class="hljs-params">()</span></span>&#123;<br>    String str1 = <span class="hljs-string">&quot;abcwerthello1yuiodefabcdef&quot;</span>;<br>    String str2 = <span class="hljs-string">&quot;cvhello1bnmabcdef&quot;</span>;<br>    String[] maxSameStrings = getMaxSameString1(str1, str2);<br>    System.out.println(Arrays.toString(maxSameStrings));<br><br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="15-16-17"><a href="#15-16-17" class="headerlink" title="15 16 17"></a>15 16 17</h2><h3 id="jdk8中日期时间API"><a href="#jdk8中日期时间API" class="headerlink" title="jdk8中日期时间API"></a>jdk8中日期时间API</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JDK8DateTimeTest</span> </span>&#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    LocalDate、LocalTime、LocalDateTime 的使用</span><br><span class="hljs-comment">    说明：</span><br><span class="hljs-comment">        1.LocalDateTime相较于LocalDate、LocalTime，使用频率要高</span><br><span class="hljs-comment">        2.类似于Calendar</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">//now():获取当前的日期、时间、日期+时间</span><br>        LocalDate localDate = LocalDate.now();<br>        LocalTime localTime = LocalTime.now();<br>        LocalDateTime localDateTime = LocalDateTime.now();<br><br>        System.out.println(localDate);<br>        System.out.println(localTime);<br>        System.out.println(localDateTime);<br><br>        <span class="hljs-comment">//of():设置指定的年、月、日、时、分、秒。没有偏移量</span><br>        LocalDateTime localDateTime1 = LocalDateTime.of(<span class="hljs-number">2020</span>, <span class="hljs-number">10</span>, <span class="hljs-number">6</span>, <span class="hljs-number">13</span>, <span class="hljs-number">23</span>, <span class="hljs-number">43</span>);<br>        System.out.println(localDateTime1);<br><br><br>        <span class="hljs-comment">//getXxx()：获取相关的属性</span><br>        System.out.println(localDateTime.getDayOfMonth());<br>        System.out.println(localDateTime.getDayOfWeek());<br>        System.out.println(localDateTime.getMonth());<br>        System.out.println(localDateTime.getMonthValue());<br>        System.out.println(localDateTime.getMinute());<br><br>        <span class="hljs-comment">//体现不可变性</span><br>        <span class="hljs-comment">//withXxx():设置相关的属性</span><br>        LocalDate localDate1 = localDate.withDayOfMonth(<span class="hljs-number">22</span>);<br>        System.out.println(localDate);<br>        System.out.println(localDate1);<br><br><br>        LocalDateTime localDateTime2 = localDateTime.withHour(<span class="hljs-number">4</span>);<br>        System.out.println(localDateTime);<br>        System.out.println(localDateTime2);<br><br>        <span class="hljs-comment">//不可变性</span><br>        LocalDateTime localDateTime3 = localDateTime.plusMonths(<span class="hljs-number">3</span>);<br>        System.out.println(localDateTime);<br>        System.out.println(localDateTime3);<br><br>        LocalDateTime localDateTime4 = localDateTime.minusDays(<span class="hljs-number">6</span>);<br>        System.out.println(localDateTime);<br>        System.out.println(localDateTime4);<br>    &#125;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    Instant的使用</span><br><span class="hljs-comment">    类似于 java.util.Date类</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test2</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">//now():获取本初子午线对应的标准时间</span><br>        Instant instant = Instant.now();<br>        System.out.println(instant);<span class="hljs-comment">//2019-02-18T07:29:41.719Z</span><br><br>        <span class="hljs-comment">//添加时间的偏移量</span><br>        OffsetDateTime offsetDateTime = instant.atOffset(ZoneOffset.ofHours(<span class="hljs-number">8</span>));<br>        System.out.println(offsetDateTime);<span class="hljs-comment">//2019-02-18T15:32:50.611+08:00</span><br><br>        <span class="hljs-comment">//toEpochMilli():获取自1970年1月1日0时0分0秒（UTC）开始的毫秒数  ---&gt; Date类的getTime()</span><br>        <span class="hljs-keyword">long</span> milli = instant.toEpochMilli();<br>        System.out.println(milli);<br><br>        <span class="hljs-comment">//ofEpochMilli():通过给定的毫秒数，获取Instant实例  --&gt;Date(long millis)</span><br>        Instant instant1 = Instant.ofEpochMilli(<span class="hljs-number">1550475314878L</span>);<br>        System.out.println(instant1);<br>    &#125;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    DateTimeFormatter:格式化或解析日期、时间</span><br><span class="hljs-comment">    类似于SimpleDateFormat</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">     */</span><br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test3</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-comment">//        方式一：预定义的标准格式。如：ISO_LOCAL_DATE_TIME;ISO_LOCAL_DATE;ISO_LOCAL_TIME</span><br>        DateTimeFormatter formatter = DateTimeFormatter.ISO_LOCAL_DATE_TIME;<br>        <span class="hljs-comment">//格式化:日期--&gt;字符串</span><br>        LocalDateTime localDateTime = LocalDateTime.now();<br>        String str1 = formatter.format(localDateTime);<br>        System.out.println(localDateTime);<br>        System.out.println(str1);<span class="hljs-comment">//2019-02-18T15:42:18.797</span><br><br>        <span class="hljs-comment">//解析：字符串 --&gt;日期</span><br>        TemporalAccessor parse = formatter.parse(<span class="hljs-string">&quot;2019-02-18T15:42:18.797&quot;</span>);<br>        System.out.println(parse);<br><br><span class="hljs-comment">//        方式二：</span><br><span class="hljs-comment">//        本地化相关的格式。如：ofLocalizedDateTime()</span><br><span class="hljs-comment">//        FormatStyle.LONG / FormatStyle.MEDIUM / FormatStyle.SHORT :适用于LocalDateTime</span><br>        DateTimeFormatter formatter1 = DateTimeFormatter.ofLocalizedDateTime(FormatStyle.LONG);<br>        <span class="hljs-comment">//格式化</span><br>        String str2 = formatter1.format(localDateTime);<br>        System.out.println(str2);<span class="hljs-comment">//2019年2月18日 下午03时47分16秒</span><br><br><br><span class="hljs-comment">//      本地化相关的格式。如：ofLocalizedDate()</span><br><span class="hljs-comment">//      FormatStyle.FULL / FormatStyle.LONG / FormatStyle.MEDIUM / FormatStyle.SHORT : 适用于LocalDate</span><br>        DateTimeFormatter formatter2 = DateTimeFormatter.ofLocalizedDate(FormatStyle.MEDIUM);<br>        <span class="hljs-comment">//格式化</span><br>        String str3 = formatter2.format(LocalDate.now());<br>        System.out.println(str3);<span class="hljs-comment">//2019-2-18</span><br><br><br><span class="hljs-comment">//       重点： 方式三：自定义的格式。如：ofPattern(“yyyy-MM-dd hh:mm:ss”)</span><br>        DateTimeFormatter formatter3 = DateTimeFormatter.ofPattern(<span class="hljs-string">&quot;yyyy-MM-dd hh:mm:ss&quot;</span>);<br>        <span class="hljs-comment">//格式化</span><br>        String str4 = formatter3.format(LocalDateTime.now());<br>        System.out.println(str4);<span class="hljs-comment">//2019-02-18 03:52:09</span><br><br>        <span class="hljs-comment">//解析</span><br>        TemporalAccessor accessor = formatter3.parse(<span class="hljs-string">&quot;2019-02-18 03:52:09&quot;</span>);<br>        System.out.println(accessor);<br><br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="20-21-22-23"><a href="#20-21-22-23" class="headerlink" title="20 21 22 23"></a>20 21 22 23</h2><h3 id="Java比较器"><a href="#Java比较器" class="headerlink" title="Java比较器"></a>Java比较器</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 一、说明：Java中的对象，正常情况下，只能进行比较：==  或  != 。不能使用 &gt; 或 &lt; 的</span><br><span class="hljs-comment"> *          但是在开发场景中，我们需要对多个对象进行排序，言外之意，就需要比较对象的大小。</span><br><span class="hljs-comment"> *          如何实现？使用两个接口中的任何一个：Comparable 或 Comparator</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 二、Comparable接口与Comparator的使用的对比：</span><br><span class="hljs-comment"> *    Comparable接口的方式一旦一定，保证Comparable接口实现类的对象在任何位置都可以比较大小。</span><br><span class="hljs-comment"> *    Comparator接口属于临时性的比较。</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CompareTest</span> </span>&#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    Comparable接口的使用举例：  自然排序</span><br><span class="hljs-comment">    1.像String、包装类等实现了Comparable接口，重写了compareTo(obj)方法，给出了比较两个对象大小的方式。</span><br><span class="hljs-comment">    2.像String、包装类重写compareTo()方法以后，进行了从小到大的排列</span><br><span class="hljs-comment">    3. 重写compareTo(obj)的规则：</span><br><span class="hljs-comment">        如果当前对象this大于形参对象obj，则返回正整数，</span><br><span class="hljs-comment">        如果当前对象this小于形参对象obj，则返回负整数，</span><br><span class="hljs-comment">        如果当前对象this等于形参对象obj，则返回零。</span><br><span class="hljs-comment">    4. 对于自定义类来说，如果需要排序，我们可以让自定义类实现Comparable接口，重写compareTo(obj)方法。</span><br><span class="hljs-comment">       在compareTo(obj)方法中指明如何排序</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span></span>&#123;<br>        String[] arr = <span class="hljs-keyword">new</span> String[]&#123;<span class="hljs-string">&quot;AA&quot;</span>,<span class="hljs-string">&quot;CC&quot;</span>,<span class="hljs-string">&quot;KK&quot;</span>,<span class="hljs-string">&quot;MM&quot;</span>,<span class="hljs-string">&quot;GG&quot;</span>,<span class="hljs-string">&quot;JJ&quot;</span>,<span class="hljs-string">&quot;DD&quot;</span>&#125;;<br>        <span class="hljs-comment">//</span><br>        Arrays.sort(arr);<br><br>        System.out.println(Arrays.toString(arr));<br><br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test2</span><span class="hljs-params">()</span></span>&#123;<br>        Goods[] arr = <span class="hljs-keyword">new</span> Goods[<span class="hljs-number">5</span>];<br>        arr[<span class="hljs-number">0</span>] = <span class="hljs-keyword">new</span> Goods(<span class="hljs-string">&quot;lenovoMouse&quot;</span>,<span class="hljs-number">34</span>);<br>        arr[<span class="hljs-number">1</span>] = <span class="hljs-keyword">new</span> Goods(<span class="hljs-string">&quot;dellMouse&quot;</span>,<span class="hljs-number">43</span>);<br>        arr[<span class="hljs-number">2</span>] = <span class="hljs-keyword">new</span> Goods(<span class="hljs-string">&quot;xiaomiMouse&quot;</span>,<span class="hljs-number">12</span>);<br>        arr[<span class="hljs-number">3</span>] = <span class="hljs-keyword">new</span> Goods(<span class="hljs-string">&quot;huaweiMouse&quot;</span>,<span class="hljs-number">65</span>);<br>        arr[<span class="hljs-number">4</span>] = <span class="hljs-keyword">new</span> Goods(<span class="hljs-string">&quot;microsoftMouse&quot;</span>,<span class="hljs-number">43</span>);<br><br>        Arrays.sort(arr);<br><br>        System.out.println(Arrays.toString(arr));<br>    &#125;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    Comparator接口的使用：定制排序</span><br><span class="hljs-comment">    1.背景：</span><br><span class="hljs-comment">    当元素的类型没有实现java.lang.Comparable接口而又不方便修改代码，</span><br><span class="hljs-comment">    或者实现了java.lang.Comparable接口的排序规则不适合当前的操作，</span><br><span class="hljs-comment">    那么可以考虑使用 Comparator 的对象来排序</span><br><span class="hljs-comment">    2.重写compare(Object o1,Object o2)方法，比较o1和o2的大小：</span><br><span class="hljs-comment">    如果方法返回正整数，则表示o1大于o2；</span><br><span class="hljs-comment">    如果返回0，表示相等；</span><br><span class="hljs-comment">    返回负整数，表示o1小于o2。</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test3</span><span class="hljs-params">()</span></span>&#123;<br>        String[] arr = <span class="hljs-keyword">new</span> String[]&#123;<span class="hljs-string">&quot;AA&quot;</span>,<span class="hljs-string">&quot;CC&quot;</span>,<span class="hljs-string">&quot;KK&quot;</span>,<span class="hljs-string">&quot;MM&quot;</span>,<span class="hljs-string">&quot;GG&quot;</span>,<span class="hljs-string">&quot;JJ&quot;</span>,<span class="hljs-string">&quot;DD&quot;</span>&#125;;<br>        Arrays.sort(arr,<span class="hljs-keyword">new</span> Comparator()&#123;<br><br>            <span class="hljs-comment">//按照字符串从大到小的顺序排列</span><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">compare</span><span class="hljs-params">(Object o1, Object o2)</span> </span>&#123;<br>                <span class="hljs-keyword">if</span>(o1 <span class="hljs-keyword">instanceof</span> String &amp;&amp; o2 <span class="hljs-keyword">instanceof</span>  String)&#123;<br>                    String s1 = (String) o1;<br>                    String s2 = (String) o2;<br>                    <span class="hljs-keyword">return</span> -s1.compareTo(s2);<br>                &#125;<br><span class="hljs-comment">//                return 0;</span><br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">&quot;输入的数据类型不一致&quot;</span>);<br>            &#125;<br>        &#125;);<br>        System.out.println(Arrays.toString(arr));<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test4</span><span class="hljs-params">()</span></span>&#123;<br>        Goods[] arr = <span class="hljs-keyword">new</span> Goods[<span class="hljs-number">6</span>];<br>        arr[<span class="hljs-number">0</span>] = <span class="hljs-keyword">new</span> Goods(<span class="hljs-string">&quot;lenovoMouse&quot;</span>,<span class="hljs-number">34</span>);<br>        arr[<span class="hljs-number">1</span>] = <span class="hljs-keyword">new</span> Goods(<span class="hljs-string">&quot;dellMouse&quot;</span>,<span class="hljs-number">43</span>);<br>        arr[<span class="hljs-number">2</span>] = <span class="hljs-keyword">new</span> Goods(<span class="hljs-string">&quot;xiaomiMouse&quot;</span>,<span class="hljs-number">12</span>);<br>        arr[<span class="hljs-number">3</span>] = <span class="hljs-keyword">new</span> Goods(<span class="hljs-string">&quot;huaweiMouse&quot;</span>,<span class="hljs-number">65</span>);<br>        arr[<span class="hljs-number">4</span>] = <span class="hljs-keyword">new</span> Goods(<span class="hljs-string">&quot;huaweiMouse&quot;</span>,<span class="hljs-number">224</span>);<br>        arr[<span class="hljs-number">5</span>] = <span class="hljs-keyword">new</span> Goods(<span class="hljs-string">&quot;microsoftMouse&quot;</span>,<span class="hljs-number">43</span>);<br><br>        Arrays.sort(arr, <span class="hljs-keyword">new</span> Comparator() &#123;<br>            <span class="hljs-comment">//指明商品比较大小的方式:按照产品名称从低到高排序,再按照价格从高到低排序</span><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">compare</span><span class="hljs-params">(Object o1, Object o2)</span> </span>&#123;<br>                <span class="hljs-keyword">if</span>(o1 <span class="hljs-keyword">instanceof</span> Goods &amp;&amp; o2 <span class="hljs-keyword">instanceof</span> Goods)&#123;<br>                    Goods g1 = (Goods)o1;<br>                    Goods g2 = (Goods)o2;<br>                    <span class="hljs-keyword">if</span>(g1.getName().equals(g2.getName()))&#123;<br>                        <span class="hljs-keyword">return</span> -Double.compare(g1.getPrice(),g2.getPrice());<br>                    &#125;<span class="hljs-keyword">else</span>&#123;<br>                        <span class="hljs-keyword">return</span> g1.getName().compareTo(g2.getName());<br>                    &#125;<br>                &#125;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">&quot;输入的数据类型不一致&quot;</span>);<br>            &#125;<br>        &#125;);<br><br>        System.out.println(Arrays.toString(arr));<br>    &#125;<br><br>&#125;<br><br><span class="hljs-comment">//商品类</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Goods</span> <span class="hljs-keyword">implements</span>  <span class="hljs-title">Comparable</span></span>&#123;<br><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">double</span> price;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Goods</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Goods</span><span class="hljs-params">(String name, <span class="hljs-keyword">double</span> price)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>        <span class="hljs-keyword">this</span>.price = price;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">double</span> <span class="hljs-title">getPrice</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> price;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setPrice</span><span class="hljs-params">(<span class="hljs-keyword">double</span> price)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.price = price;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Goods&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, price=&quot;</span> + price +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//指明商品比较大小的方式:按照价格从低到高排序,再按照产品名称从高到低排序</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">compareTo</span><span class="hljs-params">(Object o)</span> </span>&#123;<br><span class="hljs-comment">//        System.out.println(&quot;**************&quot;);</span><br>        <span class="hljs-keyword">if</span>(o <span class="hljs-keyword">instanceof</span> Goods)&#123;<br>            Goods goods = (Goods)o;<br>            <span class="hljs-comment">//方式一：</span><br>            <span class="hljs-keyword">if</span>(<span class="hljs-keyword">this</span>.price &gt; goods.price)&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-keyword">this</span>.price &lt; goods.price)&#123;<br>                <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-comment">//                return 0;</span><br>               <span class="hljs-keyword">return</span> -<span class="hljs-keyword">this</span>.name.compareTo(goods.name);<br>            &#125;<br>            <span class="hljs-comment">//方式二：</span><br><span class="hljs-comment">//           return Double.compare(this.price,goods.price);</span><br>        &#125;<br><span class="hljs-comment">//        return 0;</span><br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">&quot;传入的数据类型不一致！&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="24"><a href="#24" class="headerlink" title="24"></a>24</h2><h3 id="System、Math、BigInteger和BigDecimal类的使用"><a href="#System、Math、BigInteger和BigDecimal类的使用" class="headerlink" title="System、Math、BigInteger和BigDecimal类的使用"></a>System、Math、BigInteger和BigDecimal类的使用</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OtherClassTest</span> </span>&#123;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span> </span>&#123;<br>        String javaVersion = System.getProperty(<span class="hljs-string">&quot;java.version&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;java的version:&quot;</span> + javaVersion);<br><br>        String javaHome = System.getProperty(<span class="hljs-string">&quot;java.home&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;java的home:&quot;</span> + javaHome);<br><br>        String osName = System.getProperty(<span class="hljs-string">&quot;os.name&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;os的name:&quot;</span> + osName);<br><br>        String osVersion = System.getProperty(<span class="hljs-string">&quot;os.version&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;os的version:&quot;</span> + osVersion);<br><br>        String userName = System.getProperty(<span class="hljs-string">&quot;user.name&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;user的name:&quot;</span> + userName);<br><br>        String userHome = System.getProperty(<span class="hljs-string">&quot;user.home&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;user的home:&quot;</span> + userHome);<br><br>        String userDir = System.getProperty(<span class="hljs-string">&quot;user.dir&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;user的dir:&quot;</span> + userDir);<br><br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test2</span><span class="hljs-params">()</span> </span>&#123;<br>        BigInteger bi = <span class="hljs-keyword">new</span> BigInteger(<span class="hljs-string">&quot;1243324112234324324325235245346567657653&quot;</span>);<br>        BigDecimal bd = <span class="hljs-keyword">new</span> BigDecimal(<span class="hljs-string">&quot;12435.351&quot;</span>);<br>        BigDecimal bd2 = <span class="hljs-keyword">new</span> BigDecimal(<span class="hljs-string">&quot;11&quot;</span>);<br>        System.out.println(bi);<br><span class="hljs-comment">//         System.out.println(bd.divide(bd2));</span><br>        System.out.println(bd.divide(bd2, BigDecimal.ROUND_HALF_UP));<br>        System.out.println(bd.divide(bd2, <span class="hljs-number">25</span>, BigDecimal.ROUND_HALF_UP));<br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java核心基础30days笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java核心基础day20笔记</title>
    <link href="/2021/03/14/day20/"/>
    <url>/2021/03/14/day20/</url>
    
    <content type="html"><![CDATA[<h2 id="05-06"><a href="#05-06" class="headerlink" title="05 06"></a>05 06</h2><h3 id="String的使用"><a href="#String的使用" class="headerlink" title="String的使用"></a>String的使用</h3><p>String:字符串，使用一对””引起来表示<br>1.String声明为final的，不可被继承<br>2.String实现了Serializable接口：表示字符串是支持序列化的<br>             实现了Comparable接口：表示String可以比较大小<br>3.String内部定义了final char[] value用于存储字符串数据<br>4.String:代表不可变的字符序列。简称：不可变性<br>    体现：1.当对字符串重新赋值时，需要重写指定内存区域赋值，不能使用原有的value进行赋值。<br>               2.当对现有的字符串进行连接操作时，也需要重新指定内存区域赋值，不能使用原有的value进行赋值。<br>用String的replace()方法修改指定字符或字符串时，也需要重新指定内存区域赋值，不能使用原有的value进行赋值。<br>5.通过字面量的方式（区别于new）给一个字符串赋值，此时的字符串值声明在字符串常量池中。<br>6.字符串常量池中是不会存储相同内容的字符串的。</p><h2 id="07"><a href="#07" class="headerlink" title="07"></a>07</h2><h3 id="String的实例化方式"><a href="#String的实例化方式" class="headerlink" title="String的实例化方式"></a>String的实例化方式</h3><p>方式一：通过字面量定义的方式<br>方式二：通过new + 构造器的方式</p><p>面试题：<br>    String s = new String(“abc”);方式创建对象，在内存中创建了几个对象？<br>    两个:一个是堆空间中new结构，另一个是char[]对应的常量池中的数据：”abc”</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test2</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-comment">//通过字面量定义的方式：此时的s1和s2的数据javaEE声明在方法区中的字符串常量池中。</span><br>    String s1 = <span class="hljs-string">&quot;javaEE&quot;</span>;<br>    String s2 = <span class="hljs-string">&quot;javaEE&quot;</span>;<br>    <span class="hljs-comment">//通过new + 构造器的方式:此时的s3和s4保存的地址值，是数据在堆空间中开辟空间以后对应的地址值。</span><br>    String s3 = <span class="hljs-keyword">new</span> String(<span class="hljs-string">&quot;javaEE&quot;</span>);<br>    String s4 = <span class="hljs-keyword">new</span> String(<span class="hljs-string">&quot;javaEE&quot;</span>);<br><br>    System.out.println(s1 == s2);<span class="hljs-comment">//true</span><br>    System.out.println(s1 == s3);<span class="hljs-comment">//false</span><br>    System.out.println(s1 == s4);<span class="hljs-comment">//false</span><br>    System.out.println(s3 == s4);<span class="hljs-comment">//false</span><br><br>    System.out.println(<span class="hljs-string">&quot;***********************&quot;</span>);<br>    Person p1 = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;Tom&quot;</span>,<span class="hljs-number">12</span>);<br>    Person p2 = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;Tom&quot;</span>,<span class="hljs-number">12</span>);<br><br>    System.out.println(p1.name.equals(p2.name));<span class="hljs-comment">//true</span><br>    System.out.println(p1.name == p2.name);<span class="hljs-comment">//true</span><br><br>    p1.name = <span class="hljs-string">&quot;Jerry&quot;</span>;<br>    System.out.println(p2.name);<span class="hljs-comment">//Tom</span><br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="08"><a href="#08" class="headerlink" title="08"></a>08</h2><h3 id="String不同拼接操作的对比"><a href="#String不同拼接操作的对比" class="headerlink" title="String不同拼接操作的对比"></a>String不同拼接操作的对比</h3><p>结论：<br>1.常量与常量的拼接结果在常量池。且常量池中不会存在相同内容的常量。<br>2.只要其中有一个是变量，结果就在堆中。<br>3.如果拼接的结果调用intern()方法，返回值就在常量池中</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test4</span><span class="hljs-params">()</span></span>&#123;<br>    String s1 = <span class="hljs-string">&quot;javaEEhadoop&quot;</span>;<br>    String s2 = <span class="hljs-string">&quot;javaEE&quot;</span>;<br>    String s3 = s2 + <span class="hljs-string">&quot;hadoop&quot;</span>;<br>    System.out.println(s1 == s3);<span class="hljs-comment">//false</span><br><br>    <span class="hljs-keyword">final</span> String s4 = <span class="hljs-string">&quot;javaEE&quot;</span>;<span class="hljs-comment">//s4:常量</span><br>    String s5 = s4 + <span class="hljs-string">&quot;hadoop&quot;</span>;<br>    System.out.println(s1 == s5);<span class="hljs-comment">//true</span><br><br>&#125;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test3</span><span class="hljs-params">()</span></span>&#123;<br>    String s1 = <span class="hljs-string">&quot;javaEE&quot;</span>;<br>    String s2 = <span class="hljs-string">&quot;hadoop&quot;</span>;<br><br>    String s3 = <span class="hljs-string">&quot;javaEEhadoop&quot;</span>;<br>    String s4 = <span class="hljs-string">&quot;javaEE&quot;</span> + <span class="hljs-string">&quot;hadoop&quot;</span>;<br>    String s5 = s1 + <span class="hljs-string">&quot;hadoop&quot;</span>;<br>    String s6 = <span class="hljs-string">&quot;javaEE&quot;</span> + s2;<br>    String s7 = s1 + s2;<br><br>    System.out.println(s3 == s4);<span class="hljs-comment">//true</span><br>    System.out.println(s3 == s5);<span class="hljs-comment">//false</span><br>    System.out.println(s3 == s6);<span class="hljs-comment">//false</span><br>    System.out.println(s3 == s7);<span class="hljs-comment">//false</span><br>    System.out.println(s5 == s6);<span class="hljs-comment">//false</span><br>    System.out.println(s5 == s7);<span class="hljs-comment">//false</span><br>    System.out.println(s6 == s7);<span class="hljs-comment">//false</span><br><br>    String s8 = s6.intern();<span class="hljs-comment">//返回值得到的s8使用的常量池中已经存在的“javaEEhadoop”</span><br>    System.out.println(s3 == s8);<span class="hljs-comment">//true</span><br><br><br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="09"><a href="#09" class="headerlink" title="09"></a>09</h2><h3 id="String的一道面试题"><a href="#String的一道面试题" class="headerlink" title="String的一道面试题"></a>String的一道面试题</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">StringTest</span> </span>&#123;<br><br>    String str = <span class="hljs-keyword">new</span> String(<span class="hljs-string">&quot;good&quot;</span>);<br>    <span class="hljs-keyword">char</span>[] ch = &#123; <span class="hljs-string">&#x27;t&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>, <span class="hljs-string">&#x27;s&#x27;</span>, <span class="hljs-string">&#x27;t&#x27;</span> &#125;;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">change</span><span class="hljs-params">(String str, <span class="hljs-keyword">char</span> ch[])</span> </span>&#123;<br>        str = <span class="hljs-string">&quot;test ok&quot;</span>;<br>        ch[<span class="hljs-number">0</span>] = <span class="hljs-string">&#x27;b&#x27;</span>;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        StringTest ex = <span class="hljs-keyword">new</span> StringTest();<br>        ex.change(ex.str, ex.ch);<br>        System.out.println(ex.str);<span class="hljs-comment">//good</span><br>        System.out.println(ex.ch);<span class="hljs-comment">//best</span><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>解释见<a href="https://blog.csdn.net/weixin_42338707/article/details/107497840?utm_medium=distribute.pc_relevant.none-task-blog-baidujs_title-0&amp;spm=1001.2101.3001.4242">https://blog.csdn.net/weixin_42338707/article/details/107497840?utm_medium=distribute.pc_relevant.none-task-blog-baidujs_title-0&amp;spm=1001.2101.3001.4242</a></p><h2 id="11-12-13"><a href="#11-12-13" class="headerlink" title="11 12 13"></a>11 12 13</h2><h3 id="String的常用方法"><a href="#String的常用方法" class="headerlink" title="String的常用方法"></a>String的常用方法</h3><p>int length()：返回字符串的长度： return value.length<br>char charAt(int index)： 返回某索引处的字符return value[index]<br>boolean isEmpty()：判断是否是空字符串：return value.length == 0<br>String toLowerCase()：使用默认语言环境，将 String 中的所有字符转换为小写<br>String toUpperCase()：使用默认语言环境，将 String 中的所有字符转换为大写<br>String trim()：返回字符串的副本，忽略前导空白和尾部空白<br>boolean equals(Object obj)：比较字符串的内容是否相同<br>boolean equalsIgnoreCase(String anotherString)：与equals方法类似，忽略大小写<br>String concat(String str)：将指定字符串连接到此字符串的结尾。 等价于用“+”<br>int compareTo(String anotherString)：比较两个字符串的大小<br>String substring(int beginIndex)：返回一个新的字符串，它是此字符串的从beginIndex开始截取到最后的一个子字符串<br>String substring(int beginIndex, int endIndex) ：返回一个新字符串，它是此字符串从beginIndex开始截取到endIndex(不包含)的一个子字符串</p><p>boolean endsWith(String suffix)：测试此字符串是否以指定的后缀结束<br>boolean startsWith(String prefix)：测试此字符串是否以指定的前缀开始<br>boolean startsWith(String prefix, int toffset)：测试此字符串从指定索引开始的子字符串是否以指定前缀开始<br>boolean contains(CharSequence s)：当且仅当此字符串包含指定的 char 值序列时，返回 true<br>int indexOf(String str)：返回指定子字符串在此字符串中第一次出现处的索引<br>int indexOf(String str, int fromIndex)：返回指定子字符串在此字符串中第一次出现处的索引，从指定的索引开始<br>int lastIndexOf(String str)：返回指定子字符串在此字符串中最右边出现处的索引<br>int lastIndexOf(String str, int fromIndex)：返回指定子字符串在此字符串中最后一次出现处的索引，从指定的索引开始反向搜索<br>注：indexOf和lastIndexOf方法如果未找到都是返回-1</p><p>替换：<br>String replace(char oldChar, char newChar)：返回一个新的字符串，它是通过用 newChar 替换此字符串中出现的所有 oldChar 得到的<br>String replace(CharSequence target, CharSequence replacement)：使用指定的字面值替换序列替换此字符串所有匹配字面值目标序列的子字符串<br>String replaceAll(String regex, String replacement)：使用给定的 replacement 替换此字符串所有匹配给定的正则表达式的子字符串<br>String replaceFirst(String regex, String replacement)：使用给定的 replacement 替换此字符串匹配给定的正则表达式的第一个子字符串<br>匹配:<br>boolean matches(String regex)：告知此字符串是否匹配给定的正则表达式<br>切片：<br>String[] split(String regex)：根据给定正则表达式的匹配拆分此字符串<br>String[] split(String regex, int limit)：根据匹配给定的正则表达式来拆分此字符串，最多不超过limit个，如果超过了，剩下的全部都放到最后一个元素中</p><h2 id="14-15-16"><a href="#14-15-16" class="headerlink" title="14 15 16"></a>14 15 16</h2><h3 id="String类与其他结构之间的转换"><a href="#String类与其他结构之间的转换" class="headerlink" title="String类与其他结构之间的转换"></a>String类与其他结构之间的转换</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">StringTest1</span> </span>&#123;<br><br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    String 与 byte[]之间的转换</span><br><span class="hljs-comment">    编码：String --&gt; byte[]:调用String的getBytes()</span><br><span class="hljs-comment">    解码：byte[] --&gt; String:调用String的构造器</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    编码：字符串 --&gt;字节</span><br><span class="hljs-comment">    解码：编码的逆过程，字节 --&gt; 字符串</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    说明：解码时，要求解码使用的字符集必须与编码时使用的字符集一致，否则会出现乱码。</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test3</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> UnsupportedEncodingException </span>&#123;<br>        String str1 = <span class="hljs-string">&quot;abc123中国&quot;</span>;<br>        <span class="hljs-keyword">byte</span>[] bytes = str1.getBytes();<span class="hljs-comment">//使用默认的字符集，进行编码。</span><br>        System.out.println(Arrays.toString(bytes));<br><br>        <span class="hljs-keyword">byte</span>[] gbks = str1.getBytes(<span class="hljs-string">&quot;gbk&quot;</span>);<span class="hljs-comment">//使用gbk字符集进行编码。</span><br>        System.out.println(Arrays.toString(gbks));<br><br>        System.out.println(<span class="hljs-string">&quot;******************&quot;</span>);<br><br>        String str2 = <span class="hljs-keyword">new</span> String(bytes);<span class="hljs-comment">//使用默认的字符集，进行解码。</span><br>        System.out.println(str2);<br><br>        String str3 = <span class="hljs-keyword">new</span> String(gbks);<br>        System.out.println(str3);<span class="hljs-comment">//出现乱码。原因：编码集和解码集不一致！</span><br><br><br>        String str4 = <span class="hljs-keyword">new</span> String(gbks, <span class="hljs-string">&quot;gbk&quot;</span>);<br>        System.out.println(str4);<span class="hljs-comment">//没有出现乱码。原因：编码集和解码集一致！</span><br><br><br>    &#125;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    String 与 char[]之间的转换</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    String --&gt; char[]:调用String的toCharArray()</span><br><span class="hljs-comment">    char[] --&gt; String:调用String的构造器</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test2</span><span class="hljs-params">()</span></span>&#123;<br>        String str1 = <span class="hljs-string">&quot;abc123&quot;</span>;  <span class="hljs-comment">//题目： a21cb3</span><br><br>        <span class="hljs-keyword">char</span>[] charArray = str1.toCharArray();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; charArray.length; i++) &#123;<br>            System.out.println(charArray[i]);<br>        &#125;<br><br>        <span class="hljs-keyword">char</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-keyword">char</span>[]&#123;<span class="hljs-string">&#x27;h&#x27;</span>,<span class="hljs-string">&#x27;e&#x27;</span>,<span class="hljs-string">&#x27;l&#x27;</span>,<span class="hljs-string">&#x27;l&#x27;</span>,<span class="hljs-string">&#x27;o&#x27;</span>&#125;;<br>        String str2 = <span class="hljs-keyword">new</span> String(arr);<br>        System.out.println(str2);<br>    &#125;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    复习：</span><br><span class="hljs-comment">    String 与基本数据类型、包装类之间的转换。</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    String --&gt; 基本数据类型、包装类：调用包装类的静态方法：parseXxx(str)</span><br><span class="hljs-comment">    基本数据类型、包装类 --&gt; String:调用String重载的valueOf(xxx)</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span></span>&#123;<br>        String str1 = <span class="hljs-string">&quot;123&quot;</span>;<br><span class="hljs-comment">//        int num = (int)str1;//错误的</span><br>        <span class="hljs-keyword">int</span> num = Integer.parseInt(str1);<br><br>        String str2 = String.valueOf(num);<span class="hljs-comment">//&quot;123&quot;</span><br>        String str3 = num + <span class="hljs-string">&quot;&quot;</span>;<br><br>        System.out.println(str1 == str3);<br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="19-21-22"><a href="#19-21-22" class="headerlink" title="19 21 22"></a>19 21 22</h2><h3 id="StringBuffer和StringBuilder的使用"><a href="#StringBuffer和StringBuilder的使用" class="headerlink" title="StringBuffer和StringBuilder的使用"></a>StringBuffer和StringBuilder的使用</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">StringBufferBuilderTest</span> </span>&#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    对比String、StringBuffer、StringBuilder三者的效率：</span><br><span class="hljs-comment">    从高到低排列：StringBuilder &gt; StringBuffer &gt; String</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test3</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">//初始设置</span><br>        <span class="hljs-keyword">long</span> startTime = <span class="hljs-number">0L</span>;<br>        <span class="hljs-keyword">long</span> endTime = <span class="hljs-number">0L</span>;<br>        String text = <span class="hljs-string">&quot;&quot;</span>;<br>        StringBuffer buffer = <span class="hljs-keyword">new</span> StringBuffer(<span class="hljs-string">&quot;&quot;</span>);<br>        StringBuilder builder = <span class="hljs-keyword">new</span> StringBuilder(<span class="hljs-string">&quot;&quot;</span>);<br>        <span class="hljs-comment">//开始对比</span><br>        startTime = System.currentTimeMillis();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">20000</span>; i++) &#123;<br>            buffer.append(String.valueOf(i));<br>        &#125;<br>        endTime = System.currentTimeMillis();<br>        System.out.println(<span class="hljs-string">&quot;StringBuffer的执行时间：&quot;</span> + (endTime - startTime));<br><br>        startTime = System.currentTimeMillis();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">20000</span>; i++) &#123;<br>            builder.append(String.valueOf(i));<br>        &#125;<br>        endTime = System.currentTimeMillis();<br>        System.out.println(<span class="hljs-string">&quot;StringBuilder的执行时间：&quot;</span> + (endTime - startTime));<br><br>        startTime = System.currentTimeMillis();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">20000</span>; i++) &#123;<br>            text = text + i;<br>        &#125;<br>        endTime = System.currentTimeMillis();<br>        System.out.println(<span class="hljs-string">&quot;String的执行时间：&quot;</span> + (endTime - startTime));<br><br>    &#125;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    StringBuffer的常用方法：</span><br><span class="hljs-comment">StringBuffer append(xxx)：提供了很多的append()方法，用于进行字符串拼接</span><br><span class="hljs-comment">StringBuffer delete(int start,int end)：删除指定位置的内容</span><br><span class="hljs-comment">StringBuffer replace(int start, int end, String str)：把[start,end)位置替换为str</span><br><span class="hljs-comment">StringBuffer insert(int offset, xxx)：在指定位置插入xxx</span><br><span class="hljs-comment">StringBuffer reverse() ：把当前字符序列逆转</span><br><span class="hljs-comment">public int indexOf(String str)</span><br><span class="hljs-comment">public String substring(int start,int end):返回一个从start开始到end索引结束的左闭右开区间的子字符串</span><br><span class="hljs-comment">public int length()</span><br><span class="hljs-comment">public char charAt(int n )</span><br><span class="hljs-comment">public void setCharAt(int n ,char ch)</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        总结：</span><br><span class="hljs-comment">        增：append(xxx)</span><br><span class="hljs-comment">        删：delete(int start,int end)</span><br><span class="hljs-comment">        改：setCharAt(int n ,char ch) / replace(int start, int end, String str)</span><br><span class="hljs-comment">        查：charAt(int n )</span><br><span class="hljs-comment">        插：insert(int offset, xxx)</span><br><span class="hljs-comment">        长度：length();</span><br><span class="hljs-comment">        *遍历：for() + charAt() / toString()</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test2</span><span class="hljs-params">()</span></span>&#123;<br>        StringBuffer s1 = <span class="hljs-keyword">new</span> StringBuffer(<span class="hljs-string">&quot;abc&quot;</span>);<br>        s1.append(<span class="hljs-number">1</span>);<br>        s1.append(<span class="hljs-string">&#x27;1&#x27;</span>);<br>        System.out.println(s1);<br><span class="hljs-comment">//        s1.delete(2,4);</span><br><span class="hljs-comment">//        s1.replace(2,4,&quot;hello&quot;);</span><br><span class="hljs-comment">//        s1.insert(2,false);</span><br><span class="hljs-comment">//        s1.reverse();</span><br>        String s2 = s1.substring(<span class="hljs-number">1</span>, <span class="hljs-number">3</span>);<br>        System.out.println(s1);<br>        System.out.println(s1.length());<br>        System.out.println(s2);<br>    &#125;<br><br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    String、StringBuffer、StringBuilder三者的异同？</span><br><span class="hljs-comment">    String:不可变的字符序列；底层使用char[]存储</span><br><span class="hljs-comment">    StringBuffer:可变的字符序列；线程安全的，效率低；底层使用char[]存储</span><br><span class="hljs-comment">    StringBuilder:可变的字符序列；jdk5.0新增的，线程不安全的，效率高；底层使用char[]存储</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    源码分析：</span><br><span class="hljs-comment">    String str = new String();//char[] value = new char[0];</span><br><span class="hljs-comment">    String str1 = new String(&quot;abc&quot;);//char[] value = new char[]&#123;&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;&#125;;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    StringBuffer sb1 = new StringBuffer();//char[] value = new char[16];底层创建了一个长度是16的数组。</span><br><span class="hljs-comment">    System.out.println(sb1.length());//</span><br><span class="hljs-comment">    sb1.append(&#x27;a&#x27;);//value[0] = &#x27;a&#x27;;</span><br><span class="hljs-comment">    sb1.append(&#x27;b&#x27;);//value[1] = &#x27;b&#x27;;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    StringBuffer sb2 = new StringBuffer(&quot;abc&quot;);//char[] value = new char[&quot;abc&quot;.length() + 16];</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    //问题1. System.out.println(sb2.length());//3</span><br><span class="hljs-comment">    //问题2. 扩容问题:如果要添加的数据底层数组盛不下了，那就需要扩容底层的数组。</span><br><span class="hljs-comment">             默认情况下，扩容为原来容量的2倍 + 2，同时将原有数组中的元素复制到新的数组中。</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">            指导意义：开发中建议大家使用：StringBuffer(int capacity) 或 StringBuilder(int capacity)</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span></span>&#123;<br>        StringBuffer sb1 = <span class="hljs-keyword">new</span> StringBuffer(<span class="hljs-string">&quot;abc&quot;</span>);<br>        sb1.setCharAt(<span class="hljs-number">0</span>,<span class="hljs-string">&#x27;m&#x27;</span>);<br>        System.out.println(sb1);<br><br>        StringBuffer sb2 = <span class="hljs-keyword">new</span> StringBuffer();<br>        System.out.println(sb2.length());<span class="hljs-comment">//0</span><br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java核心基础30days笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java核心基础day19笔记</title>
    <link href="/2021/03/13/day19/"/>
    <url>/2021/03/13/day19/</url>
    
    <content type="html"><![CDATA[<h2 id="06"><a href="#06" class="headerlink" title="06"></a>06</h2><h3 id="同步机制"><a href="#同步机制" class="headerlink" title="同步机制"></a>同步机制</h3><p>例子：创建三个窗口卖票，总票数为100张.使用实现Runnable接口的方式</p><p>1.问题：卖票过程中，出现了重票、错票 –&gt;出现了线程的安全问题</p><p>2.问题出现的原因：当某个线程操作车票的过程中，尚未操作完成时，其他线程参与进来，也操作车票</p><p>3.如何解决：当一个线程a在操作ticket的时候，其他线程不能参与进来。直到线程a操作完ticket时，其他</p><p>线程才可以开始操作ticket。这种情况即使线程a出现了阻塞，也不能被改变</p><p>4.在Java中，我们通过同步机制，来解决线程的安全问题</p><p>5.同步的方式，解决了线程的安全问题—好处<br>   操作同步代码时，只能有一个线程参与，其他线程等待。相当于是一个单线程的过程，效率低 —局限性</p><h2 id="07-08-09-10"><a href="#07-08-09-10" class="headerlink" title="07 08 09 10"></a>07 08 09 10</h2><h3 id="方式一：同步代码块"><a href="#方式一：同步代码块" class="headerlink" title="方式一：同步代码块"></a>方式一：同步代码块</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">synchronized</span>(同步监视器) &#123;<br><span class="hljs-comment">//需要被同步的代码</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p>说明：<br>①操作共享数据的代码，即为需要被同步的代码。  –&gt;不能包含代码多了，也不能包含代码少了<br>②共享数据：多个线程共同操作的变量。比如：ticket就是共享数据<br>③同步监视器，俗称：锁。任何一个类的对象，都可以充当锁<br>   要求：多个线程必须要共用同一把锁<br>   补充：在实现Runnable接口创建多线程的方式中，我们可以考虑使用this充当同步监视器</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Window1</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> ticket = <span class="hljs-number">100</span>;<br><span class="hljs-comment">//    Object obj = new Object();</span><br><span class="hljs-comment">//    Dog dog = new Dog();</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-comment">//        Object obj = new Object();</span><br>        <span class="hljs-keyword">while</span>(<span class="hljs-keyword">true</span>)&#123;<br>            <span class="hljs-keyword">synchronized</span> (<span class="hljs-keyword">this</span>) &#123;<span class="hljs-comment">//此时的this:唯一的Window1的对象   //方式二：synchronized (dog) &#123;</span><br><br>                <span class="hljs-keyword">if</span> (ticket &gt; <span class="hljs-number">0</span>) &#123;<br><br>                    <span class="hljs-keyword">try</span> &#123;<br>                        Thread.sleep(<span class="hljs-number">100</span>);<br>                    &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                        e.printStackTrace();<br>                    &#125;<br><br>                    System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;:卖票，票号为：&quot;</span> + ticket);<br><br><br>                    ticket--;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WindowTest1</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Window1 w = <span class="hljs-keyword">new</span> Window1();<br><br>        Thread t1 = <span class="hljs-keyword">new</span> Thread(w);<br>        Thread t2 = <span class="hljs-keyword">new</span> Thread(w);<br>        Thread t3 = <span class="hljs-keyword">new</span> Thread(w);<br><br>        t1.setName(<span class="hljs-string">&quot;窗口1&quot;</span>);<br>        t2.setName(<span class="hljs-string">&quot;窗口2&quot;</span>);<br>        t3.setName(<span class="hljs-string">&quot;窗口3&quot;</span>);<br><br>        t1.start();<br>        t2.start();<br>        t3.start();<br><br>        <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dog</span></span>&#123;<br><br>        &#125;   &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure><p>使用同步代码块解决继承Thread类的方式的线程安全问题</p><p>例子：创建三个窗口卖票，总票数为100张.使用继承Thread类的方式<br>说明：在继承Thread类创建多线程的方式中，慎用this充当同步监视器，考虑使用当前类充当同步监视器。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Window2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Thread</span></span>&#123;<br><br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> ticket = <span class="hljs-number">100</span>;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Object obj = <span class="hljs-keyword">new</span> Object();<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br><br>        <span class="hljs-keyword">while</span>(<span class="hljs-keyword">true</span>)&#123;<br>            <span class="hljs-comment">//正确的</span><br><span class="hljs-comment">//            synchronized (obj)&#123;</span><br>            <span class="hljs-keyword">synchronized</span> (Window2.class)&#123;<span class="hljs-comment">//Class clazz = Window2.class,Window2.class只会加载一次</span><br>                <span class="hljs-comment">//错误的方式：this代表着t1,t2,t3三个对象</span><br><span class="hljs-comment">//              synchronized (this)&#123;</span><br><br>                <span class="hljs-keyword">if</span>(ticket &gt; <span class="hljs-number">0</span>)&#123;<br><br>                    <span class="hljs-keyword">try</span> &#123;<br>                        Thread.sleep(<span class="hljs-number">100</span>);<br>                    &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                        e.printStackTrace();<br>                    &#125;<br><br>                    System.out.println(getName() + <span class="hljs-string">&quot;：卖票，票号为：&quot;</span> + ticket);<br>                    ticket--;<br>                &#125;<span class="hljs-keyword">else</span>&#123;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br><br>        &#125;<br><br>    &#125;<br>&#125;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WindowTest2</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Window2 t1 = <span class="hljs-keyword">new</span> Window2();<br>        Window2 t2 = <span class="hljs-keyword">new</span> Window2();<br>        Window2 t3 = <span class="hljs-keyword">new</span> Window2();<br><br><br>        t1.setName(<span class="hljs-string">&quot;窗口1&quot;</span>);<br>        t2.setName(<span class="hljs-string">&quot;窗口2&quot;</span>);<br>        t3.setName(<span class="hljs-string">&quot;窗口3&quot;</span>);<br><br>        t1.start();<br>        t2.start();<br>        t3.start();<br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="方式二：同步方法"><a href="#方式二：同步方法" class="headerlink" title="方式二：同步方法"></a>方式二：同步方法</h3><p>如果操作共享数据的代码完整的声明在一个方法中，我们不妨将此方法声明同步的</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.java;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 使用同步方法解决实现Runnable接口的线程安全问题</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *  关于同步方法的总结：</span><br><span class="hljs-comment"> *  1. 同步方法仍然涉及到同步监视器，只是不需要我们显式的声明。</span><br><span class="hljs-comment"> *  2. 非静态的同步方法，同步监视器是：this</span><br><span class="hljs-comment"> *     静态的同步方法，同步监视器是：当前类本身</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Window3</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> ticket = <span class="hljs-number">100</span>;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>) &#123;<br><br>            show();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title">show</span><span class="hljs-params">()</span></span>&#123;<span class="hljs-comment">//同步监视器：this</span><br>        <span class="hljs-comment">//synchronized (this)&#123;</span><br><br>            <span class="hljs-keyword">if</span> (ticket &gt; <span class="hljs-number">0</span>) &#123;<br><br>                <span class="hljs-keyword">try</span> &#123;<br>                    Thread.sleep(<span class="hljs-number">100</span>);<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br><br>                System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;:卖票，票号为：&quot;</span> + ticket);<br><br>                ticket--;<br>            &#125;<br>        <span class="hljs-comment">//&#125;</span><br>    &#125;<br>&#125;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WindowTest3</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Window3 w = <span class="hljs-keyword">new</span> Window3();<br><br>        Thread t1 = <span class="hljs-keyword">new</span> Thread(w);<br>        Thread t2 = <span class="hljs-keyword">new</span> Thread(w);<br>        Thread t3 = <span class="hljs-keyword">new</span> Thread(w);<br><br>        t1.setName(<span class="hljs-string">&quot;窗口1&quot;</span>);<br>        t2.setName(<span class="hljs-string">&quot;窗口2&quot;</span>);<br>        t3.setName(<span class="hljs-string">&quot;窗口3&quot;</span>);<br><br>        t1.start();<br>        t2.start();<br>        t3.start();<br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 使用同步方法处理继承Thread类的方式中的线程安全问题</span><br><span class="hljs-comment"> */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Window4</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Thread</span> </span>&#123;<br><br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> ticket = <span class="hljs-number">100</span>;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br><br>        <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>) &#123;<br><br>            show();<br>        &#125;<br><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title">show</span><span class="hljs-params">()</span></span>&#123;<span class="hljs-comment">//同步监视器：Window4.class</span><br>        <span class="hljs-comment">//private synchronized void show()&#123; //同步监视器：t1,t2,t3。此种解决方式是错误的</span><br>        <span class="hljs-keyword">if</span> (ticket &gt; <span class="hljs-number">0</span>) &#123;<br><br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">100</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br><br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;：卖票，票号为：&quot;</span> + ticket);<br>            ticket--;<br>        &#125;<br>    &#125;<br>&#125;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WindowTest4</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Window4 t1 = <span class="hljs-keyword">new</span> Window4();<br>        Window4 t2 = <span class="hljs-keyword">new</span> Window4();<br>        Window4 t3 = <span class="hljs-keyword">new</span> Window4();<br><br><br>        t1.setName(<span class="hljs-string">&quot;窗口1&quot;</span>);<br>        t2.setName(<span class="hljs-string">&quot;窗口2&quot;</span>);<br>        t3.setName(<span class="hljs-string">&quot;窗口3&quot;</span>);<br><br>        t1.start();<br>        t2.start();<br>        t3.start();<br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>关于同步方法的总结：<br>1.同步方法仍然涉及到同步监视器，只是不需要我们显式的声明<br>2.非静态的同步方法，同步监视器是：this<br>   静态的同步方法，同步监视器是：当前类本身</p><h2 id="11"><a href="#11" class="headerlink" title="11"></a>11</h2><h3 id="使用同步机制将单例模式中的懒汉式改写为线程安全的"><a href="#使用同步机制将单例模式中的懒汉式改写为线程安全的" class="headerlink" title="使用同步机制将单例模式中的懒汉式改写为线程安全的"></a>使用同步机制将单例模式中的懒汉式改写为线程安全的</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BankTest</span> </span>&#123;<br><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Bank</span></span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Bank</span><span class="hljs-params">()</span></span>&#123;&#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Bank instance = <span class="hljs-keyword">null</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Bank <span class="hljs-title">getInstance</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">//方式一：效率稍差</span><br><span class="hljs-comment">//        synchronized (Bank.class) &#123;</span><br><span class="hljs-comment">//            if(instance == null)&#123;</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//                instance = new Bank();</span><br><span class="hljs-comment">//            &#125;</span><br><span class="hljs-comment">//            return instance;</span><br><span class="hljs-comment">//        &#125;</span><br>        <span class="hljs-comment">//方式二：效率更高</span><br>        <span class="hljs-keyword">if</span>(instance == <span class="hljs-keyword">null</span>)&#123;<br><br>            <span class="hljs-keyword">synchronized</span> (Bank.class) &#123;<br>                <span class="hljs-keyword">if</span>(instance == <span class="hljs-keyword">null</span>)&#123;<br><br>                    instance = <span class="hljs-keyword">new</span> Bank();<br>                &#125;<br><br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> instance;<br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="12"><a href="#12" class="headerlink" title="12"></a>12</h2><h3 id="演示线程的死锁问题"><a href="#演示线程的死锁问题" class="headerlink" title="演示线程的死锁问题"></a>演示线程的死锁问题</h3><p>1.死锁的理解：不同的线程分别占用对方需要的同步资源不放弃，都在等待对方放弃自己需要的同步资源，就形成了线程的死锁</p><p>2.说明：<br>1）出现死锁后，不会出现异常，不会出现提示，只是所有的线程都处于阻塞状态，无法继续<br>2）我们使用同步时，要避免出现死锁。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ThreadTest</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>        StringBuffer s1 = <span class="hljs-keyword">new</span> StringBuffer();<br>        StringBuffer s2 = <span class="hljs-keyword">new</span> StringBuffer();<br><br><br>        <span class="hljs-keyword">new</span> Thread()&#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br><br>                <span class="hljs-keyword">synchronized</span> (s1)&#123;<br><br>                    s1.append(<span class="hljs-string">&quot;a&quot;</span>);<br>                    s2.append(<span class="hljs-string">&quot;1&quot;</span>);<br><br>                    <span class="hljs-keyword">try</span> &#123;<br>                        Thread.sleep(<span class="hljs-number">100</span>);<br>                    &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                        e.printStackTrace();<br>                    &#125;<br><br><br>                    <span class="hljs-keyword">synchronized</span> (s2)&#123;<br>                        s1.append(<span class="hljs-string">&quot;b&quot;</span>);<br>                        s2.append(<span class="hljs-string">&quot;2&quot;</span>);<br><br>                        System.out.println(s1);<br>                        System.out.println(s2);<br>                    &#125;<br><br><br>                &#125;<br><br>            &#125;<br>        &#125;.start();<br><br><br>        <span class="hljs-keyword">new</span> Thread(<span class="hljs-keyword">new</span> Runnable() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>                <span class="hljs-keyword">synchronized</span> (s2)&#123;<br><br>                    s1.append(<span class="hljs-string">&quot;c&quot;</span>);<br>                    s2.append(<span class="hljs-string">&quot;3&quot;</span>);<br><br>                    <span class="hljs-keyword">try</span> &#123;<br>                        Thread.sleep(<span class="hljs-number">100</span>);<br>                    &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                        e.printStackTrace();<br>                    &#125;<br><br>                    <span class="hljs-keyword">synchronized</span> (s1)&#123;<br>                        s1.append(<span class="hljs-string">&quot;d&quot;</span>);<br>                        s2.append(<span class="hljs-string">&quot;4&quot;</span>);<br><br>                        System.out.println(s1);<br>                        System.out.println(s2);<br>                    &#125;<br><br><br>                &#125;<br><br><br><br>            &#125;<br>        &#125;).start();<br><br><br>    &#125;<br><br><br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="13"><a href="#13" class="headerlink" title="13"></a>13</h2><h3 id="解决线程安全问题的方式三：Lock锁-—-JDK5-0新增"><a href="#解决线程安全问题的方式三：Lock锁-—-JDK5-0新增" class="headerlink" title="解决线程安全问题的方式三：Lock锁  — JDK5.0新增"></a>解决线程安全问题的方式三：Lock锁  — JDK5.0新增</h3><p>1.面试题：synchronized 与 Lock的异同？<br>    相同：二者都可以解决线程安全问题<br>    不同：synchronized机制在执行完相应的同步代码以后，自动的释放同步监视器<br>              Lock需要手动的启动同步（lock()），同时结束同步也需要手动的实现（unlock()）<br>              使用Lock锁，JVM将花费较少的时间来调度线程，性能更好。并且具有更好的扩展性（提供更多的子类）</p><p>2.优先使用顺序：<br>Lock    -&gt;    同步代码块（已经进入了方法体，分配了相应资源）    -&gt;     同步方法（在方法体之外）</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Window</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span></span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> ticket = <span class="hljs-number">100</span>;<br>    <span class="hljs-comment">//1.实例化ReentrantLock</span><br>    <span class="hljs-keyword">private</span> ReentrantLock lock = <span class="hljs-keyword">new</span> ReentrantLock();<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">while</span>(<span class="hljs-keyword">true</span>)&#123;<br>            <span class="hljs-keyword">try</span>&#123;<br><br>                <span class="hljs-comment">//2.调用锁定方法lock()</span><br>                lock.lock();<br><br>                <span class="hljs-keyword">if</span>(ticket &gt; <span class="hljs-number">0</span>)&#123;<br><br>                    <span class="hljs-keyword">try</span> &#123;<br>                        Thread.sleep(<span class="hljs-number">100</span>);<br>                    &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                        e.printStackTrace();<br>                    &#125;<br><br>                    System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;：售票，票号为：&quot;</span> + ticket);<br>                    ticket--;<br>                &#125;<span class="hljs-keyword">else</span>&#123;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<span class="hljs-keyword">finally</span> &#123;<br>                <span class="hljs-comment">//3.调用解锁方法：unlock()</span><br>                lock.unlock();<br>            &#125;<br><br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LockTest</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Window w = <span class="hljs-keyword">new</span> Window();<br><br>        Thread t1 = <span class="hljs-keyword">new</span> Thread(w);<br>        Thread t2 = <span class="hljs-keyword">new</span> Thread(w);<br>        Thread t3 = <span class="hljs-keyword">new</span> Thread(w);<br><br>        t1.setName(<span class="hljs-string">&quot;窗口1&quot;</span>);<br>        t2.setName(<span class="hljs-string">&quot;窗口2&quot;</span>);<br>        t3.setName(<span class="hljs-string">&quot;窗口3&quot;</span>);<br><br>        t1.start();<br>        t2.start();<br>        t3.start();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="15"><a href="#15" class="headerlink" title="15"></a>15</h2><h3 id="线程通信涉及到的三个方法"><a href="#线程通信涉及到的三个方法" class="headerlink" title="线程通信涉及到的三个方法"></a>线程通信涉及到的三个方法</h3><p>wait():一旦执行此方法，当前线程就进入阻塞状态，并释放同步监视器。</p><p>notify():一旦执行此方法，就会唤醒被wait的一个线程。如果有多个线程被wait，就唤醒优先级高的那个</p><p>notifyAll():一旦执行此方法，就会唤醒所有被wait的线程</p><p>说明：</p><p>1.wait()，notify()，notifyAll()三个方法必须使用在同步代码块或同步方法中</p><p>2.wait()，notify()，notifyAll()三个方法的调用者必须是同步代码块或同步方法中的同步监视器。否则，会出现IllegalMonitorStateException异常</p><p>3.wait()，notify()，notifyAll()三个方法是定义在java.lang.Object类中</p><p>面试题：sleep() 和 wait()的异同？</p><p>1.相同点：一旦执行方法，都可以使得当前的线程进入阻塞状态</p><p>2.不同点：<br>    1）两个方法声明的位置不同：Thread类中声明sleep() , Object类中声明wait()<br>    2）调用的要求不同：sleep()可以在任何需要的场景下调用。 wait()必须使用在同步代码块或同步方法中<br>    3）关于是否释放同步监视器：如果两个方法都使用在同步代码块或同步方法中，sleep()不会释放锁，wait()会释放锁</p><h2 id="17"><a href="#17" class="headerlink" title="17"></a>17</h2><h3 id="线程通信的应用：经典例题：生产者-消费者问题"><a href="#线程通信的应用：经典例题：生产者-消费者问题" class="headerlink" title="线程通信的应用：经典例题：生产者/消费者问题"></a>线程通信的应用：经典例题：生产者/消费者问题</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 生产者(Productor)将产品交给店员(Clerk)，而消费者(Customer)从店员处取走产品，</span><br><span class="hljs-comment"> * 店员一次只能持有固定数量的产品(比如:20），如果生产者试图生产更多的产品，店员</span><br><span class="hljs-comment"> * 会叫生产者停一下，如果店中有空位放产品了再通知生产者继续生产；如果店中没有产品</span><br><span class="hljs-comment"> * 了，店员会告诉消费者等一下，如果店中有产品了再通知消费者来取走产品。</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 分析：</span><br><span class="hljs-comment"> * 1. 是否是多线程问题？是，生产者线程，消费者线程</span><br><span class="hljs-comment"> * 2. 是否有共享数据？是，店员（或产品）</span><br><span class="hljs-comment"> * 3. 如何解决线程的安全问题？同步机制,有三种方法</span><br><span class="hljs-comment"> * 4. 是否涉及线程的通信？是</span><br><span class="hljs-comment"> */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Clerk</span></span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> productCount = <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">//生产产品</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title">produceProduct</span><span class="hljs-params">()</span> </span>&#123;<br><br>        <span class="hljs-keyword">if</span>(productCount &lt; <span class="hljs-number">20</span>)&#123;<br>            productCount++;<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;:开始生产第&quot;</span> + productCount + <span class="hljs-string">&quot;个产品&quot;</span>);<br><br>            notify();<br><br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-comment">//等待</span><br>            <span class="hljs-keyword">try</span> &#123;<br>                wait();<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br><br>    &#125;<br>    <span class="hljs-comment">//消费产品</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title">consumeProduct</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">if</span>(productCount &gt; <span class="hljs-number">0</span>)&#123;<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;:开始消费第&quot;</span> + productCount + <span class="hljs-string">&quot;个产品&quot;</span>);<br>            productCount--;<br><br>            notify();<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-comment">//等待</span><br>            <span class="hljs-keyword">try</span> &#123;<br>                wait();<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br><br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Producer</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Thread</span></span>&#123;<span class="hljs-comment">//生产者</span><br><br>    <span class="hljs-keyword">private</span> Clerk clerk;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Producer</span><span class="hljs-params">(Clerk clerk)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.clerk = clerk;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(getName() + <span class="hljs-string">&quot;:开始生产产品.....&quot;</span>);<br><br>        <span class="hljs-keyword">while</span>(<span class="hljs-keyword">true</span>)&#123;<br><br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">10</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br><br>            clerk.produceProduct();<br>        &#125;<br><br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Consumer</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Thread</span></span>&#123;<span class="hljs-comment">//消费者</span><br>    <span class="hljs-keyword">private</span> Clerk clerk;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Consumer</span><span class="hljs-params">(Clerk clerk)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.clerk = clerk;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(getName() + <span class="hljs-string">&quot;:开始消费产品.....&quot;</span>);<br><br>        <span class="hljs-keyword">while</span>(<span class="hljs-keyword">true</span>)&#123;<br><br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">20</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br><br>            clerk.consumeProduct();<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ProductTest</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Clerk clerk = <span class="hljs-keyword">new</span> Clerk();<br><br>        Producer p1 = <span class="hljs-keyword">new</span> Producer(clerk);<br>        p1.setName(<span class="hljs-string">&quot;生产者1&quot;</span>);<br><br>        Consumer c1 = <span class="hljs-keyword">new</span> Consumer(clerk);<br>        c1.setName(<span class="hljs-string">&quot;消费者1&quot;</span>);<br>        Consumer c2 = <span class="hljs-keyword">new</span> Consumer(clerk);<br>        c2.setName(<span class="hljs-string">&quot;消费者2&quot;</span>);<br><br>        p1.start();<br>        c1.start();<br>        c2.start();<br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="18"><a href="#18" class="headerlink" title="18"></a>18</h2><h3 id="创建线程的方式三：实现Callable接口-—-JDK-5-0新增"><a href="#创建线程的方式三：实现Callable接口-—-JDK-5-0新增" class="headerlink" title="创建线程的方式三：实现Callable接口 — JDK 5.0新增"></a>创建线程的方式三：实现Callable接口 — JDK 5.0新增</h3><p>如何理解实现Callable接口的方式创建多线程比实现Runnable接口创建多线程方式强大？</p><p>1.call()可以有返回值的</p><p>2.call()可以抛出异常，被外面的操作捕获，获取异常的信息</p><p>3.Callable是支持泛型的</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//1.创建一个实现Callable的实现类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NumThread</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Callable</span></span>&#123;<br>    <span class="hljs-comment">//2.实现call方法，将此线程需要执行的操作声明在call()中</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">call</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        <span class="hljs-keyword">int</span> sum = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">100</span>; i++) &#123;<br>            <span class="hljs-keyword">if</span>(i % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>)&#123;<br>                System.out.println(i);<br>                sum += i;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> sum;<br>    &#125;<br>&#125;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ThreadNew</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//3.创建Callable接口实现类的对象</span><br>        NumThread numThread = <span class="hljs-keyword">new</span> NumThread();<br>        <span class="hljs-comment">//4.将此Callable接口实现类的对象作为传递到FutureTask构造器中，创建FutureTask的对象</span><br>        FutureTask futureTask = <span class="hljs-keyword">new</span> FutureTask(numThread);<br>        <span class="hljs-comment">//5.将FutureTask的对象作为参数传递到Thread类的构造器中，创建Thread对象，并调用start()</span><br>        <span class="hljs-keyword">new</span> Thread(futureTask).start();<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//6.获取Callable中call方法的返回值</span><br>            <span class="hljs-comment">//get()返回值即为FutureTask构造器参数Callable实现类重写的call()的返回值。</span><br>            Object sum = futureTask.get();<br>            System.out.println(<span class="hljs-string">&quot;总和为：&quot;</span> + sum);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (ExecutionException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="19-20"><a href="#19-20" class="headerlink" title="19 20"></a>19 20</h2><h3 id="创建线程的方式四：使用线程池"><a href="#创建线程的方式四：使用线程池" class="headerlink" title="创建线程的方式四：使用线程池"></a>创建线程的方式四：使用线程池</h3><p>好处：</p><p>1.提高响应速度（减少了创建新线程的时间）</p><p>2.降低资源消耗（重复利用线程池中线程，不需要每次都创建）</p><p>3.便于线程管理</p><p>corePoolSize：核心池的大小</p><p>maximumPoolSize：最大线程数</p><p>keepAliveTime：线程没有任务时最多保持多长时间后会终止</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NumberThread</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span></span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i &lt;= <span class="hljs-number">100</span>;i++)&#123;<br>            <span class="hljs-keyword">if</span>(i % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>)&#123;<br>                System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;: &quot;</span> + i);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NumberThread1</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span></span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i &lt;= <span class="hljs-number">100</span>;i++)&#123;<br>            <span class="hljs-keyword">if</span>(i % <span class="hljs-number">2</span> != <span class="hljs-number">0</span>)&#123;<br>                System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;: &quot;</span> + i);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ThreadPool</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//1. 提供指定线程数量的线程池</span><br>        ExecutorService service = Executors.newFixedThreadPool(<span class="hljs-number">10</span>);<br>        ThreadPoolExecutor service1 = (ThreadPoolExecutor) service;<br>        <span class="hljs-comment">//设置线程池的属性</span><br><span class="hljs-comment">//        System.out.println(service.getClass());</span><br><span class="hljs-comment">//        service1.setCorePoolSize(15);</span><br><span class="hljs-comment">//        service1.setKeepAliveTime();</span><br><br><br>        <span class="hljs-comment">//2.执行指定的线程的操作。需要提供实现Runnable接口或Callable接口实现类的对象</span><br>        service.execute(<span class="hljs-keyword">new</span> NumberThread());<span class="hljs-comment">//适合适用于Runnable</span><br>        service.execute(<span class="hljs-keyword">new</span> NumberThread1());<span class="hljs-comment">//适合适用于Runnable</span><br><br><span class="hljs-comment">//        service.submit(Callable callable);//适合使用于Callable</span><br>        <span class="hljs-comment">//3.关闭连接池</span><br>        service.shutdown();<br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java核心基础30days笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java核心基础day18笔记</title>
    <link href="/2021/03/12/day18/"/>
    <url>/2021/03/12/day18/</url>
    
    <content type="html"><![CDATA[<h2 id="06"><a href="#06" class="headerlink" title="06"></a>06</h2><h3 id="创建模块-Module"><a href="#创建模块-Module" class="headerlink" title="创建模块(Module)"></a>创建模块(Module)</h3><p>1.在Eclipse中我们有Workspace（工作空间）和Project（工程的概念），在IDEA中只有Project（工程）和Module（模块）的概念，这里的对应关系为<br>    Eclipse 中 workspace 相当于 IDEA 中的 Project<br>    Eclipse 中 Project       相当于 IDEA 中的Module</p><h2 id="13-14-15"><a href="#13-14-15" class="headerlink" title="13 14 15"></a>13 14 15</h2><h3 id="多线程的创建方式一：继承于Thread类"><a href="#多线程的创建方式一：继承于Thread类" class="headerlink" title="多线程的创建方式一：继承于Thread类"></a>多线程的创建方式一：继承于Thread类</h3><p>1.创建一个继承于Thread类的子类<br>2.重写Thread类的run() –&gt; 将此线程执行的操作声明在run()中<br>3.创建Thread类的子类的对象<br>4.通过此对象调用start()：①启动当前线程②调用当前线程的run()</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//例子：遍历100以内的所有偶数</span><br><span class="hljs-comment">//1.创建一个继承于Thread类的子类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Thread</span> </span>&#123;<br>    <span class="hljs-comment">//2.重写Thread类的run()</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">另一种写法</span><br><span class="hljs-comment">new Thread() &#123;</span><br><span class="hljs-comment">@Override</span><br><span class="hljs-comment">public void run() &#123;</span><br><span class="hljs-comment">super.run();</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">&#125;.start();</span><br><span class="hljs-comment">*/</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>            <span class="hljs-keyword">if</span> (i % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>) &#123;<br>                System.out.println(i);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ThreadTest</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//3.创建Thread类的子类的对象</span><br>        MyThread t1 = <span class="hljs-keyword">new</span> MyThread();<br>        <span class="hljs-comment">//4.通过此对象调用start()：①启动当前线程②调用当前线程的run()</span><br>      <span class="hljs-comment">//问题一：我们不能通过直接调用run()的方法启动线程</span><br>      <span class="hljs-comment">//问题二：再启动一个线程，遍历100以内的偶数。不可以还让已经start()的线程去执行，会报IllegalThreadStateException，需要重新创建一个线程的对象</span><br>        t1.start();<br>      <span class="hljs-comment">//如下操作仍然是在main线程中执行的</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>            <span class="hljs-keyword">if</span> (i % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>) &#123;<br>                System.out.println(i + <span class="hljs-string">&quot;*********main()***********&quot;</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="16"><a href="#16" class="headerlink" title="16"></a>16</h2><h3 id="Thread中的常用方法"><a href="#Thread中的常用方法" class="headerlink" title="Thread中的常用方法"></a>Thread中的常用方法</h3><p>1.start()：启动当前线程，调用当前线程的run()</p><p>2.run()：通常需要重写Thread类中的此方法，将创建的线程要执行的操作声明在此方法中</p><p>3.currentThread()：静态方法，返回执行当前代码的线程</p><p>4.getName()：获取当前线程的名字</p><p>5.setName()：设置当前线程的名字</p><p>6.yield()：释放当前cpu的执行权（可能下一刻又被分配）</p><p>7.join()：在线程a中调用线程b的join()，此时线程a就进入阻塞状态，直到线程b完全执行完以后，线              程a才结束阻塞状态</p><p>8.sleep(long millitime)：让当前线程阻塞指定的millitime毫秒</p><p>9.isAlive()：判断当前线程是否存活</p><h2 id="17"><a href="#17" class="headerlink" title="17"></a>17</h2><h3 id="线程的优先级"><a href="#线程的优先级" class="headerlink" title="线程的优先级"></a>线程的优先级</h3><p>1.优先级常量（定义在Thread类中）<br>MAX_PRIORITY:10<br>MIN_PRIORITY:1<br>NORM_PRIORITY:5（默认优先级）</p><p>2.如何获取和设置当前线程的优先级<br>getPriority():获取线程的优先级<br>setPriority(int p):设置线程的优先级<br>说明：高优先级的线程要抢占低优先级线程cpu的执行权。但是只是从概率上讲，高优先级的线程高概率的情况下被执行。并不意味着只有当高优先级的线程执行完以后，低优先级的线程才执行</p><h2 id="19"><a href="#19" class="headerlink" title="19"></a>19</h2><h3 id="多线程的创建方式二：实现Runnable接口"><a href="#多线程的创建方式二：实现Runnable接口" class="headerlink" title="多线程的创建方式二：实现Runnable接口"></a>多线程的创建方式二：实现Runnable接口</h3><p>1.创建一个实现了Runnable接口的类<br>2.实现类去实现Runnable中的抽象方法：run()<br>3.创建实现类的对象<br>4.将此对象作为参数传递到Thread类的构造器中，创建Thread类的对象<br>5.通过Thread类的对象调用start()：①启动当前线程②调用当前线程的run()–&gt;调用了Runnable类型的target的run()</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//1.创建一个实现了Runnable接口的类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MThread</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span> </span>&#123;<br>    <span class="hljs-comment">//2.实现类去实现Runnable中的抽象方法：run()</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>            <span class="hljs-keyword">if</span> (i % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>) &#123;<br>                System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;:&quot;</span> + i);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ThreadTest1</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//3.创建实现类的对象</span><br>        MThread mThread = <span class="hljs-keyword">new</span> MThread();<br>        <span class="hljs-comment">//4.将此对象作为参数传递到Thread类的构造器中，创建Thread类的对象</span><br>        Thread t1 = <span class="hljs-keyword">new</span> Thread(mThread);<br>        t1.setName(<span class="hljs-string">&quot;线程1&quot;</span>);<br>        <span class="hljs-comment">//5.通过Thread类的对象调用start()：①启动当前线程②调用当前线程的run()--&gt;调用了Runnable类型的target的run()</span><br>        t1.start();<br>        <span class="hljs-comment">//再启动一个线程，遍历100以内的偶数</span><br>        Thread t2 = <span class="hljs-keyword">new</span> Thread(mThread);<br>        t1.setName(<span class="hljs-string">&quot;线程2&quot;</span>);<br>        t2.start();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="21"><a href="#21" class="headerlink" title="21"></a>21</h2><h3 id="比较创建线程的两种方式"><a href="#比较创建线程的两种方式" class="headerlink" title="比较创建线程的两种方式"></a>比较创建线程的两种方式</h3><p>开发中：优先选择实现Runnable接口的方式</p><p>原因：<br>1.实现的方式没有类的单继承性的局限性<br>2.实现的方式更适合来处理多个线程有共享数据的情况</p><p>联系：public class Thread implements Runnable</p><p>相同：两种方式都需要重写run()，将线程要执行的逻辑声明在run()中</p>]]></content>
    
    
    <categories>
      
      <category>Java核心基础30days笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java核心基础day16笔记</title>
    <link href="/2021/03/10/day16/"/>
    <url>/2021/03/10/day16/</url>
    
    <content type="html"><![CDATA[<h2 id="05"><a href="#05" class="headerlink" title="05"></a>05</h2><h3 id="局部内部类使用的一个注意点"><a href="#局部内部类使用的一个注意点" class="headerlink" title="局部内部类使用的一个注意点"></a>局部内部类使用的一个注意点</h3><p>注意点：<br>    在局部内部类的方法中（比如：show如果调用局部内部类所声明的方法（比如：method）中的局部变量（比如：num）的话，要求    此局部变量声明为final）<br>    jdk7及之前版本：要求此局部变量显式的声明为final<br>    jdk8及以后版本：可以省略final的声明</p><h2 id="06"><a href="#06" class="headerlink" title="06"></a>06</h2><h3 id="异常事件"><a href="#异常事件" class="headerlink" title="异常事件"></a>异常事件</h3><p>Error：Java虚拟机无法解决的严重问题。如：JVM系统内部错误、资源耗尽等严重情况。比如：StackOverflowError和OOM。一般不编写针对性的代码进行处理</p><p>Exception：其他因编程错误或偶然的外在因素导致的一般性问题，可以使用针对性的代码进行处理，例如：空指针访问、试图读取不存在的文件、网络连接中断、数组角标越界</p><h2 id="07"><a href="#07" class="headerlink" title="07"></a>07</h2><h3 id="异常体系结构"><a href="#异常体系结构" class="headerlink" title="异常体系结构"></a>异常体系结构</h3><p>java.lang.Throwable<br>        java.lang.Error：一般不编写针对性的代码进行处理<br>        java.lang.Exception：可以进行异常的处理<br>                编译时异常（checked）<br>                        IOException<br>                                FileNotFoundException<br>                        ClassNotFoundException<br>                运行时异常（unchecked）<br>                        NullPointerException<br>                        ArrayIndexOutOfBoundsException<br>                        ClassCastException<br>                        NumberFormatException<br>                        InputMismatchException<br>                        ArithmeticException</p><h2 id="09-10-16"><a href="#09-10-16" class="headerlink" title="09 10 16"></a>09 10 16</h2><h3 id="异常的处理：抓抛模型"><a href="#异常的处理：抓抛模型" class="headerlink" title="异常的处理：抓抛模型"></a>异常的处理：抓抛模型</h3><p>过程一，“抛”：<br>    程序在正常执行的过程中，一旦出现异常，就会在异常代码处生成一个对应异常类的对象，并将此对象抛出。一旦抛出    对象以后，其后    的代码就不再执行<br>    关于异常对象的产生：1⃣️系统自动生成的异常对象2⃣️手动的生成一个异常对象，并抛出（throw）</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> Exception/RuntimeException;<br></code></pre></div></td></tr></table></figure><p>过程二，“抓”：<br>    可以理解为异常的处理方式：1⃣️try-catch-finally 2⃣️throws</p><h3 id="try-catch-finally的使用"><a href="#try-catch-finally的使用" class="headerlink" title="try-catch-finally的使用"></a>try-catch-finally的使用</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-comment">//可能出现异常的代码</span><br>&#125; <span class="hljs-keyword">catch</span>(异常类型<span class="hljs-number">1</span> 变量名<span class="hljs-number">1</span>) &#123;<br>    <span class="hljs-comment">//处理异常的方式1</span><br>&#125; <span class="hljs-keyword">catch</span>(异常类型<span class="hljs-number">2</span> 变量名<span class="hljs-number">2</span>) &#123;<br>    <span class="hljs-comment">//处理异常的方式2</span><br>&#125; <span class="hljs-keyword">catch</span>(异常类型<span class="hljs-number">3</span> 变量名<span class="hljs-number">3</span>) &#123;<br>    <span class="hljs-comment">//处理异常的方式4</span><br>&#125;<br>...<br><span class="hljs-keyword">finally</span> &#123;<br>    <span class="hljs-comment">//一定会执行的代码</span><br>&#125;<br><span class="hljs-comment">/*说明：</span><br><span class="hljs-comment">1.finally是可选的</span><br><span class="hljs-comment">2.使用try将可能出现异常的代码包装起来，在执行过程中，一旦出现异常，就会生成一个对应异常类的对象，根据此对象的类型，去catch中进行匹配</span><br><span class="hljs-comment">3.一旦try中的异常对象匹配到某一个catch时，就进入catch中进行异常处理。一旦处理完成，就跳出当前的try-catch结构（在没有写finally的情况），继续执行其后的代码</span><br><span class="hljs-comment">4.catch中的异常类型如果没有子父类关系，则谁声明在上，谁声明在下无所谓</span><br><span class="hljs-comment">  catch中的异常类型如果满足子父类关系，则要求子类一定声明在父类的上面，否则报错</span><br><span class="hljs-comment">5.常用的异常对象处理的方式：1⃣️String getMessage()2⃣️printStackTrace()</span><br><span class="hljs-comment">6.在try结构中声明的变量，再出了try结构以后，就不能再被调用</span><br><span class="hljs-comment">7.try-catch-finally结构可以相互嵌套</span><br><span class="hljs-comment">开发中，由于运行时异常比较常见，所以我们通常不针对运行时异常编写try-catch-finally了。针对于编译时异常，一定要考虑异常的处理</span><br><span class="hljs-comment">/*</span><br></code></pre></div></td></tr></table></figure><h2 id="11"><a href="#11" class="headerlink" title="11"></a>11</h2><h3 id="try-catch-finally中finally的使用："><a href="#try-catch-finally中finally的使用：" class="headerlink" title="try-catch-finally中finally的使用："></a>try-catch-finally中finally的使用：</h3><p>1.finally是可选的</p><p>2.finally中声明的是一定会被执行的代码，即使catch中出现异常了，try中有return语句，catch中有return语句等情况，且在其之前</p><p>3.像数据库连接、输入输出流、网络编程Socket等资源，JVM是不能自动的回收的，我们需要自己手动的进行资源的释放。此时的资源释放，就需要声明在finally中</p><h2 id="13-15"><a href="#13-15" class="headerlink" title="13 15"></a>13 15</h2><h3 id="throws的使用"><a href="#throws的使用" class="headerlink" title="throws的使用"></a>throws的使用</h3><p>1.”throws 异常类型”写在方法的声明处。指明此方法执行时，可能会抛出的异常类型。一旦方法体执行时，出现异常，仍会在异常代码处生成一个异常类的对象，此对象满足throws后异常类型时，就会被抛出。异常代码后续的代码就不再执行</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method1</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> FileNotFoundException,IOException</span><br></code></pre></div></td></tr></table></figure><p>2.try-catch-finally：真正的将异常处理掉了<br>   throws的方式只是将异常抛给了方法的调用者，并没有真正将异常处理掉</p><p>3.开发中如何选择使用try-catch-finally还是使用throws？<br>    3.1如果父类中被重写的方法没有throws方法处理异常，则子类重写的方法也不能使用throws，意味着如果子类重写的    方法中有异常，必须使用try-catch-finally方式处理<br>    3.2执行的方法a中，先后又调用了另外的几个方法，这几个方法是递进关系执行的。我们建议这几个方法使用throws的    方法进行处理。而执行的方法a可以考虑使用try-catch-finally方式进行处理</p><h2 id="14"><a href="#14" class="headerlink" title="14"></a>14</h2><h3 id="方法重写的规则"><a href="#方法重写的规则" class="headerlink" title="方法重写的规则"></a>方法重写的规则</h3><p>子类重写的方法抛出的异常类型不大于父类被重写的方法抛出的异常类型</p><h2 id="17"><a href="#17" class="headerlink" title="17"></a>17</h2><h3 id="如何自定义异常类？"><a href="#如何自定义异常类？" class="headerlink" title="如何自定义异常类？"></a>如何自定义异常类？</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//1.继承于现有的异常结构：RuntimeException、Exception</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyException</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Exception</span></span>&#123;<br><br>    <span class="hljs-comment">//2.提供全局常量：serialVersionUID（标识类，证明一样</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> serialVersionUID = -<span class="hljs-number">7034897193246939L</span>;<br><br>    <span class="hljs-comment">//3.提供重载的构造器</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MyException</span><span class="hljs-params">()</span></span>&#123;<br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MyException</span><span class="hljs-params">(String msg)</span></span>&#123;<br>    <span class="hljs-keyword">super</span>(msg);<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> </span>&#123;<br>    ...<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> MyException(<span class="hljs-string">&quot;您输入的数据非法！&quot;</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java核心基础30days笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java核心基础day15笔记</title>
    <link href="/2021/03/09/day15/"/>
    <url>/2021/03/09/day15/</url>
    
    <content type="html"><![CDATA[<h2 id="06"><a href="#06" class="headerlink" title="06"></a>06</h2><h3 id="abstract关键字的使用"><a href="#abstract关键字的使用" class="headerlink" title="abstract关键字的使用"></a>abstract关键字的使用</h3><p>abstract可以用来修饰的结构：类、方法</p><p>abstract修饰类：抽象类<br>    此类不能实例化<br>    抽象类中一定有构造器，便于子类实例化的时候调用（涉及：子类对象实例化的全过程）<br>    开发中，都会提供抽象类的子类，让子类对象实例化，完成相关的操作</p><p>abstract修饰方法：抽象方法<br>    抽象方法只有方法的声明，没有方法体<br>    包含抽象方法的类，一定是一个抽象类。反之，抽象类中可以没有抽象方法<br>    若子类重写了父类中的所有抽象方法，此子类方可实例化；若没有，则此子类也是一个抽象类，需要使用abstract修饰</p><p>abstract使用上的注意点：<br>1.abstract不能用来修饰：属性、构造器等结构<br>2.abstract不能用来修饰私有方法、静态方法、final的方法、final的类</p><h2 id="13-14-15-22"><a href="#13-14-15-22" class="headerlink" title="13 14 15 22"></a>13 14 15 22</h2><h3 id="接口的使用"><a href="#接口的使用" class="headerlink" title="接口的使用"></a>接口的使用</h3><p>1.接口使用interface来定义</p><p>2.Java中，接口和类是并列的两个结构</p><p>3.如何定义接口：定义接口中的成员<br>    3.1JDK7及以前：只能定义全局常量和抽象方法<br>        全局常量：public static final的，但是书写时，可以省略不写<br>        抽象方法：public abstract的，但是书写时，可以省略不写<br>    3.2JDK8:除了定义全局常量和抽象方法之外，还可以定义静态方法、默认方法（略）</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//知识点1:接口中定义的静态方法，只能通过接口来调用</span><br>CompareA.method1();<br><span class="hljs-comment">//知识点2:通过实现类的对象，可以调用接口中的默认方法</span><br><span class="hljs-comment">//如果实现类重写了接口中的默认方法，调用时，仍然调用的是重写以后的方法</span><br>s.method2();<br><span class="hljs-comment">//知识点3:如果子类（或实现类）继承的父类和实现的接口中声明了同名同参数的方法，那么子类在没有重写此方法的情况下，默认调用的是父类中的同名同参数的方法--&gt;类优先原则</span><br><span class="hljs-comment">//知识点4:如果实现类实现了多个接口，而这多个接口中定义了同名同参数的默认方法，那么在实现类没有重写此方法的情况下，报错--&gt;接口冲突，这就需要我们必须在实现类中重写此方法</span><br><span class="hljs-comment">//知识点5:如何在子类（或实现类）的方法中调用父类、接口中被重写的方法</span><br>CompareA.<span class="hljs-keyword">super</span>.method3();<br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Flyable</span> </span>&#123;<br>    <br>&#125;<br></code></pre></div></td></tr></table></figure><p>4.接口中不能定义构造器，意味着接口不可以实例化</p><p>5.Java开发中，接口通过让类去实现（implements）的方式来使用<br>    如果实现类覆盖了接口中的所有抽象方法，则此实现类就可以实例化<br>    如果实现类没有覆盖接口中所有的抽象方法，则此实现类仍为一个抽象类</p><p>6.Java类可以实现多个接口，弥补了Java单继承性的局限性</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//格式</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AA</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">BB</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">CC</span>,<span class="hljs-title">DD</span>,<span class="hljs-title">EE</span></span><br></code></pre></div></td></tr></table></figure><p>7.接口与接口之间可以继承，而且可以多继承</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">CC</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AA</span>, <span class="hljs-title">BB</span> </span>&#123;<br>  <br>&#125;<br></code></pre></div></td></tr></table></figure><p>8.接口具体的使用，体现多态性</p><p>9.接口，实际上可以看作是一种规范</p><h2 id="24-25"><a href="#24-25" class="headerlink" title="24 25"></a>24 25</h2><h3 id="类的内部成员之五：内部类"><a href="#类的内部成员之五：内部类" class="headerlink" title="类的内部成员之五：内部类"></a>类的内部成员之五：内部类</h3><p>1.Java中允许将一个类A声明在另一个类B中，则类A就是内部类，类B称为外部类</p><p>2.内部类的分类：成员内部类（类内，静态、非静态） vs 局部内部类（方法内、代码块内、构造器内）</p><p>3.成员内部类：<br>    一方面，作为外部类的成员：<br>        调用外部类的结构<br>        可以被static修饰<br>        可以被4种不同的权限修饰<br>    另一方面，作为一个类：<br>        类内可以定义属性、方法、构造器等<br>        可以被final修饰，表示此类不能被继承。言外之意，不使用final继承，就可以被继承<br>        可以被abstract修饰</p><p>4.关注如下的2个问题<br>    4.1如何实例化成员内部类的对象</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//创建Dog实例（静态类的成员内部类）：</span><br>Person.Dog dog = <span class="hljs-keyword">new</span> Person.Dog();<br>dog.show();<br><span class="hljs-comment">//创建Bird实例（非静态类的成员内部类）：</span><br>Person p = <span class="hljs-keyword">new</span> Person();<br>Person.Bird bird = p.<span class="hljs-function">new <span class="hljs-title">Bird</span><span class="hljs-params">()</span></span>;<br>bird.sing();<br></code></pre></div></td></tr></table></figure><p>​    4.2如何在成员内部类中区分调用外部类的结构</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">display</span><span class="hljs-params">(String name)</span> </span>&#123;<br>    sysout(name);<span class="hljs-comment">//方法的形参</span><br>    sysout(<span class="hljs-keyword">this</span>.name);<span class="hljs-comment">//内部类的属性</span><br>    sysout(Person.<span class="hljs-keyword">this</span>.name);<span class="hljs-comment">//外部类的属性</span><br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java核心基础30days笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java核心基础day13笔记</title>
    <link href="/2021/03/07/day13/"/>
    <url>/2021/03/07/day13/</url>
    
    <content type="html"><![CDATA[<h2 id="04-05-06"><a href="#04-05-06" class="headerlink" title="04 05 06"></a>04 05 06</h2><p>有了对象的多态性以后，内存中实际上是加载了子类特有的属性和方法的，但是由于变量声明为父类类型，导致编译时，只能调用父类中声明的属性和方法。子类特有的属性和方法不能调用</p><p>Q:如何才能调用子类特有的属性和方法？</p><p>A:向下转型：使用强制类型转换符 </p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">Man m1 = (Man)p2;<br></code></pre></div></td></tr></table></figure><p>使用强转时，可能出现ClassCastException的异常</p><p>instanceof关键字的使用</p><p>a instanceof A:判断对象a是否是类A的实例。如果是，返回true；如果不是，返回false</p><p>使用情境：为了避免在向下转型时出现ClassCastException的异常，我们在向下转型之前，先进行instanceof的判断，一旦返回true，就进行向下转型。如果返回false，不进行向下转型</p><p>如果a instanceof A返回true，则a instanceof B也返回true，其中类B是类A的父类</p><p>Q1:编译时通过，运行时不通过</p><p>EG1:</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">Person p3 = <span class="hljs-keyword">new</span> Woman();<br>Man m3 = (Man)p3;<br></code></pre></div></td></tr></table></figure><p>EG2:</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">Person p4 = <span class="hljs-keyword">new</span> Person();<br>Man m4 = (Man)p4;<br></code></pre></div></td></tr></table></figure><p>Q2:编译通过，运行也通过</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">Object obj = <span class="hljs-keyword">new</span> Woman();<br>Person p = (Person)obj;<br></code></pre></div></td></tr></table></figure><p>Q3:编译不过</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">Man m5 = <span class="hljs-keyword">new</span> Woman();<br></code></pre></div></td></tr></table></figure><h2 id="07"><a href="#07" class="headerlink" title="07"></a>07</h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 练习：</span><br><span class="hljs-comment"> * 1.若子类重写了父类方法，就意味着子类里定义的方法彻底覆盖了父类里的同名方法，</span><br><span class="hljs-comment"> * 系统将不可能把父类里的方法转移到子类中：编译看左边，运行看右边</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * 2.对于实例变量则不存在这样的现象，即使子类里定义了与父类完全相同的实例变量，</span><br><span class="hljs-comment"> * 这个实例变量依然不可能覆盖父类中定义的实例变量：编译运行都看左边 </span><br><span class="hljs-comment"> */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Base</span> </span>&#123;<br><span class="hljs-keyword">int</span> count = <span class="hljs-number">10</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">display</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-keyword">this</span>.count);<br>&#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Sub</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Base</span> </span>&#123;<br><span class="hljs-keyword">int</span> count = <span class="hljs-number">20</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">display</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-keyword">this</span>.count);<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FieldMethodTest</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>Sub s = <span class="hljs-keyword">new</span> Sub();<br>System.out.println(s.count);<span class="hljs-comment">//20</span><br>s.display();<span class="hljs-comment">//20</span><br><br>Base b = s;<span class="hljs-comment">//多态性</span><br><span class="hljs-comment">//==：对于引用数据类型来讲，比较的是两个引用数据类型变量的地址值是否相同</span><br>System.out.println(b == s);<span class="hljs-comment">//true</span><br>System.out.println(b.count);<span class="hljs-comment">//10</span><br>b.display();<span class="hljs-comment">//20</span><br>&#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="11"><a href="#11" class="headerlink" title="11"></a>11</h2><h3 id="java-lang-Object类"><a href="#java-lang-Object类" class="headerlink" title="java.lang.Object类"></a>java.lang.Object类</h3><p>1.Object类是所有Java类的根父类</p><p>2.如果在类的声明中未使用extends关键字指明其父类，则默认父类为java.long.Object类</p><p>3.Object类中的功能（属性、方法）就具有通用性</p><p>​    属性：无</p><p>​    方法：equals() / toString() / getClass() / hashCode() / clone() / finalize() / wait () / notify() / notifyAll()</p><p>​    垃圾回收前会调用finalize()方法</p><p>​    ==和equals()的区别</p><p>​    一、回顾==的使用：</p><p>​    ==：运算符</p><p>​    1.可以使用在基本数据类型变量和引用数据类型变量中</p><p>​    2.如果比较的是基本数据类型变量：比较两个变量保存的数据是否相等（不一定类型要相同）</p><p>​    补充：==符号使用时，必须保证符号左右两边的变量类型一致</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">int</span> i = <span class="hljs-number">10</span>;<br><span class="hljs-keyword">double</span> d = <span class="hljs-number">10.0</span>;<br>sysout(i == d);<span class="hljs-comment">//true</span><br><span class="hljs-keyword">boolean</span> b = <span class="hljs-keyword">true</span>;<br>sysout(i == b);<span class="hljs-comment">//编译报错</span><br><span class="hljs-keyword">char</span> c = <span class="hljs-number">10</span>;<br>sysout(i == c);<span class="hljs-comment">//true</span><br></code></pre></div></td></tr></table></figure><p>​       如果比较的是引用数据类型变量：比较两个对象的地址值是否相同，即两个引用是否指向同一个对象实体</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">Customer cust1 = <span class="hljs-keyword">new</span> Customer(<span class="hljs-string">&quot;Tom&quot;</span>, <span class="hljs-number">21</span>);<br>Customer cust2 = <span class="hljs-keyword">new</span> Customer(<span class="hljs-string">&quot;Tom&quot;</span>, <span class="hljs-number">21</span>);<br>sysout(cust1 == cust2);<span class="hljs-comment">//false</span><br></code></pre></div></td></tr></table></figure><p>​    二、equals()方法的使用：</p><p>​    1.是一个方法，而非运算符</p><p>​    2.只能适用于引用数据类型</p><p>​    3.Object类中equals()定义：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">equals</span><span class="hljs-params">(Object obj)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> (<span class="hljs-keyword">this</span> == obj);<br>&#125; <br></code></pre></div></td></tr></table></figure><p>说明：Object类中定义的equals()和==的作用是相同的：比较两个对象的地址值是否相同，即两个引用是否指向同一个对象实体</p><p>​    4.像String、Date、File、包装类等都重写了Object类中的equals()方法。重写以后，比较的不是两个引用的地址是否相同，而是比较两    个对象的实体内容是否相同】</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">sysout(cust1.equals(cust2));<span class="hljs-comment">//false</span><br>sysout(str1.equals(str2));<span class="hljs-comment">//true</span><br></code></pre></div></td></tr></table></figure><p>​    5.通常情况下，我们自定义的类如果使用equals()的话，也通常是比较两个对象的“实体内容”是否相同。那么，我们就需要对Object类中    的equals()进行重写<br>​    重写的原则：比较两个对象的实体内容（即：name和age）是否相同    </p><p>4.Object类只声明了一个空参的构造器</p><h2 id="16"><a href="#16" class="headerlink" title="16"></a>16</h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//常量池中相同字符串地址唯一</span><br>String s1 = <span class="hljs-string">&quot;BB&quot;</span>;<br>String s2 = <span class="hljs-string">&quot;BB&quot;</span>;<br>sysout(s1 == s2);<span class="hljs-comment">//true</span><br></code></pre></div></td></tr></table></figure><h2 id="18"><a href="#18" class="headerlink" title="18"></a>18</h2><h3 id="Object类中toString-的使用"><a href="#Object类中toString-的使用" class="headerlink" title="Object类中toString()的使用"></a>Object类中toString()的使用</h3><p>1.当我们输出一个对象的引用时，实际上就是调用当前对象的toString()</p><p>2.Object类中toString()的定义：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> getClass().getName() + <span class="hljs-string">&quot;@&quot;</span> + Integer.toHexString(hashCode());<br>&#125;<br></code></pre></div></td></tr></table></figure><p>3.像String、Date、File、包装类等都重写了Object类中toString()方法，使得在调用对象的toString()时，返回“实体内容”信息</p><p>4.自定义类也可以重写toString()方法，当调用此方法时，返回对象的“实体内容”</p><h2 id="20"><a href="#20" class="headerlink" title="20"></a>20</h2><h3 id="Java中的JUnit单元测试"><a href="#Java中的JUnit单元测试" class="headerlink" title="Java中的JUnit单元测试"></a>Java中的JUnit单元测试</h3><p>步骤：</p><p>1.选中当前工程 - 右键选择：build path - add libraries - JUnit 4 - 下一步</p><p>2.创建Java类，进行单元测试</p><p>​    此时的Java类要求：1⃣️此类是public的2⃣️此类是公共的无参的构造器</p><p>3.此类中声明单元测试方法：方法的权限是public，没有返回值，没有形参</p><p>4.此单元测试方法上需要声明注解：@Test，并在单元测试类中导入：import org.junit.Test;</p><p>5.声明好单元测试方法以后，就可以在方法体内测试相关的代码</p><p>6.写完代码以后，左键双击单元测试方法名，右键：run as - JUnit Test</p><p>说明：</p><p>1.如果执行结果没有任何异常：绿条</p><p>2.如果执行结果出现异常：红条</p><h2 id="22"><a href="#22" class="headerlink" title="22"></a>22</h2><h3 id="包装类的使用"><a href="#包装类的使用" class="headerlink" title="包装类的使用"></a>包装类的使用</h3><p>1.java提供了8种基本数据类型对应的包装类，使得基本数据类型的变量具有类的特征</p><p>2.基本数据类型、包装类、String三者之间的相互转换</p><p><img src="/Users/swish/Desktop/%E6%88%AA%E5%B1%8F2021-02-22%20%E4%B8%8B%E5%8D%883.02.32.png" alt="截屏2021-02-22 下午3.02.32"></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//JDK5.0新特性：自动装箱于自动拆箱</span><br><span class="hljs-keyword">int</span> num2 = <span class="hljs-number">10</span>;<br>Integer in1 = num2;<span class="hljs-comment">//自动装箱</span><br><span class="hljs-keyword">int</span> num3 = in1;<span class="hljs-comment">//自动拆箱</span><br></code></pre></div></td></tr></table></figure><h2 id="26"><a href="#26" class="headerlink" title="26"></a>26</h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">Object o1 = <span class="hljs-keyword">true</span> ? <span class="hljs-keyword">new</span> Integer(<span class="hljs-number">1</span>) : <span class="hljs-keyword">new</span> Double(<span class="hljs-number">2.0</span>);<br>sysout(o1);<span class="hljs-comment">//1.0,编译时统一类型</span><br>Object o2;<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">true</span>)<br>    o2 = <span class="hljs-keyword">new</span> Integer(<span class="hljs-number">1</span>);<br><span class="hljs-keyword">else</span><br>    o2 = <span class="hljs-keyword">new</span> Double(<span class="hljs-number">2.0</span>);<br>System.out.println(o2);<span class="hljs-comment">//1</span><br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">Integer i = <span class="hljs-keyword">new</span> Integer(<span class="hljs-number">1</span>);<br>Integer j = <span class="hljs-keyword">new</span> Integer(<span class="hljs-number">1</span>);<br>System.out.println(i == j);<span class="hljs-comment">//false</span><br><br><span class="hljs-comment">//Integer内部定义了IntegerCache结构，IntegerCache中定义了Integer[],</span><br><span class="hljs-comment">//保存了从-128~127范围的整数。如果我们使用自动装箱的方式，给Integer赋值的范围在</span><br><span class="hljs-comment">//-128~127范围内时，可以直接使用数组中的元素，不用再去new了。目的：提高效率</span><br><br>Integer m = <span class="hljs-number">1</span>;<br>Integer n = <span class="hljs-number">1</span>;<br>System.out.println(m == n);<span class="hljs-comment">//true</span><br><br>Integer x = <span class="hljs-number">128</span>;<span class="hljs-comment">//相当于new了一个Integer对象</span><br>Integer y = <span class="hljs-number">128</span>;<span class="hljs-comment">//相当于new了一个Integer对象</span><br>System.out.println(x == y);<span class="hljs-comment">//false</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java核心基础30days笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java核心基础day12笔记</title>
    <link href="/2021/03/06/day12/"/>
    <url>/2021/03/06/day12/</url>
    
    <content type="html"><![CDATA[<h2 id="09-10"><a href="#09-10" class="headerlink" title="09 10"></a>09 10</h2><h3 id="方法的重写-override-overwrite"><a href="#方法的重写-override-overwrite" class="headerlink" title="方法的重写(override/overwrite)"></a>方法的重写(override/overwrite)</h3><p>1.重写：子类继承父类以后，可以对父类中同名同参数的方法，进行覆盖操作</p><p>2.应用：重写以后，当创建子类对象以后，通过子类对象调用子父类中同名同参数的方法时，实际执行的是子类重写父类的方法</p><p>3.重写的规定：</p><p>方法的声明：</p><p>权限修饰符 返回值类型 方法名(形参列表) {</p><p>​    //方法体</p><p>}</p><p>约定俗成：</p><p>子类中叫重写的方法，父类中叫被重写的方法</p><p>1⃣️子类重写的方法的方法名和形参列表与父类被重写的方法名和形参列表相同</p><p>2⃣️子类重写的方法的权限修饰符不小于父类被重写的方法的权限修饰符</p><p>特殊情况：子类不能重写父类声明为private权限的方法</p><p>3⃣️返回值类型：</p><p>父类被重写的方法的返回值类型是void，则子类重写的方法的返回值类型只能是void</p><p>父类被重写的方法的返回值类型是A类型，则子类重写的方法的返回值类型可以是A类或A类的子类</p><p>父类被重写的方法的返回值类型是基本数据类型，则子类重写的方法的返回值类型必须是相同的基本数据类型</p><p>4⃣️子类重写的方法抛出的异常类型不大于父类被重写的方法抛出的异常类型</p><p>子类和父类中的同名同参数的方法要么都声明为非static的（考虑重写），要么都声明为static的（不是重写）</p><h2 id="13-14"><a href="#13-14" class="headerlink" title="13 14"></a>13 14</h2><h3 id="super关键字的使用"><a href="#super关键字的使用" class="headerlink" title="super关键字的使用"></a>super关键字的使用</h3><p>1.super理解为：父类的</p><p>2.super可以用来调用：属性、方法、构造器</p><p>3.super的使用</p><p>​    3.1我们可以在子类的方法或构造器中，通过使用”super.属性”或”super.方法”的方式，显示的调用父类中声明的属性或方法。但是，通常情况下，我们习惯省略”super.”</p><p>​    3.2特殊情况：当子类和父类中定义了同名的属性时，我们要想在子类中调用父类中声明的属性，则必须显式的使用”super.属性”的方式，表明调用的是父类中声明的属性</p><p>​    3.3特殊情况：当子类重写了父类中的方法以后，我们想在子类的方法中调用父类中被重写的方法时，则必须显式的使用”super.属性”的方式，表明调用的是父类中被重写的方法</p><p>​    super从父类向子类开始找，this从子类向父类开始找</p><p>4.super调用构造器</p><p>​    4.1我们可以在子类的构造器中显示的使用”super(形参列表)”的方式，调用父类中声明的指定的构造器</p><p>​    4.2”super(形参列表)”的使用，必须声明在子类构造器的首行</p><p>​    4.3我们在类的构造器中，针对于”this(形参列表)”或”super(形参列表)”只能二选一，不能同时出现</p><p>​    4.4在构造器的首行，没有显式的声明”this(形参列表)”或”super(形参列表)”，则默认调用的是父类中空参的构造器：super()</p><p>​    4.5在类的多个构造器中，至少有一个类的构造器中使用了”super(形参列表)”，调用父类中的构造器</p><h2 id="15"><a href="#15" class="headerlink" title="15"></a>15</h2><h3 id="子类对象实例化的全过程"><a href="#子类对象实例化的全过程" class="headerlink" title="子类对象实例化的全过程"></a>子类对象实例化的全过程</h3><p>1.从结果上来看：子类继承父类以后，就获取了父类中声明的属性或方法。创建子类的对象，在堆空间中，就会加载所有父类中声明的属性</p><p>2.从过程上来看：当我们通过子类的构造器创建子类对象时，我们一定会直接或间接的调用其父类的构造器，进而调用父类的父类的构造器，直到调用了java.lang.Object类中空参的构造器为止。正因为加载过所有的父类的结构，所以才可以看到内存中有父类的结构，子类对象才可以考虑进行调用</p><p>明确：虽然创建子类对象时，调用了父类构造器，但是自始至终就创建过一个对象，即为new的子类对象</p><h2 id="17-18-19"><a href="#17-18-19" class="headerlink" title="17 18 19"></a>17 18 19</h2><h3 id="面向对象特征之三：多态性"><a href="#面向对象特征之三：多态性" class="headerlink" title="面向对象特征之三：多态性"></a>面向对象特征之三：多态性</h3><p>1.理解多态性：可以理解为一个事物的多种形态</p><p>2.何为多态性：</p><p>​    对象的多态性：父类的引用指向子类的对象（或子类的对象赋给父类的引用）</p><p>3.多态的使用：虚拟方法调用</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">Person p2 = <span class="hljs-keyword">new</span> Man();<br></code></pre></div></td></tr></table></figure><p>​    有了对象的多态性以后，我们在编译期，只能调用父类中声明的方法，但在运行期，我们实际执行的是子类重写父类的方法</p><p>​    总结：编译看左边，运行看右边</p><p>4.多态性的使用前提：</p><p>​    1⃣️类的继承关系</p><p>​    2⃣️方法的重写</p><p>5.对象的多态性，只适用于方法，不适用于属性（编译和运行都看左边）</p><h2 id="20"><a href="#20" class="headerlink" title="20"></a>20</h2><p>重载：在方法调用之前，编译器就已经确定了索要调用的方法，这称为“早绑定”或“静态绑定”</p><p>多态：只有等方法调用的那一刻，解释运行器才会确定所要调用的具体方法，这称为“晚绑定”或“动态绑定”</p><p>Bruce Eckel：“不要犯傻，如果它不是晚绑定，它就不是多态”</p>]]></content>
    
    
    <categories>
      
      <category>Java核心基础30days笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java核心基础day11笔记</title>
    <link href="/2021/03/05/day11/"/>
    <url>/2021/03/05/day11/</url>
    
    <content type="html"><![CDATA[<h2 id="20-21"><a href="#20-21" class="headerlink" title="20 21"></a>20 21</h2><h3 id="继承性"><a href="#继承性" class="headerlink" title="继承性"></a>继承性</h3><h4 id="一、继承性的好处"><a href="#一、继承性的好处" class="headerlink" title="一、继承性的好处"></a>一、继承性的好处</h4><p>1.减少了代码的冗余，提高了代码的复用性</p><p>2.便于功能的扩展</p><p>3.为之后多态性的使用，提供了前提</p><h4 id="二、继承性的格式：class-A-extends-B"><a href="#二、继承性的格式：class-A-extends-B" class="headerlink" title="二、继承性的格式：class A extends B {}"></a>二、继承性的格式：class A extends B {}</h4><p>A:子类、派生类、subclass</p><p>B:父类、超类、基类、superclass</p><p>1.体现：一旦子类A继承父类B以后，子类A中就获取了父类B中声明的所有属性、方法。特别的，父类中声明为private的属性或方法，子类继承父类以后，仍然认为获取了父类中私有的结构。只是因为封装性的影响，使得子类不能直接调用父类的结构而已</p><p>2.子类继承父类以后，还可以声明自己特有的属性或方法：实现功能的扩展</p><h4 id="三、继承性的规定"><a href="#三、继承性的规定" class="headerlink" title="三、继承性的规定"></a>三、继承性的规定</h4><p>1.一个类可以被多个子类继承</p><p>2.Java中类的单继承性：一个类只能有一个父类</p><p>3.子父类是相对的概念</p><p>4.子类直接继承的父类，称为：直接父类。间接继承的父类，称为：间接父类</p><p>5.子类继承父类以后，就获取了直接父类以及所有间接父类中声明的属性和方法</p><h4 id="四、"><a href="#四、" class="headerlink" title="四、"></a>四、</h4><p>1.如果我们没有显示的声明一个类的父类的话，则此类继承于java.lang.Object类</p><p>2.所有java类（除java.lang.Object类之外）都直接或间接的继承于java.lang.Object类</p><p>3.意味着，所有的java类具有java.lang.Object类声明的功能</p>]]></content>
    
    
    <categories>
      
      <category>Java核心基础30days笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java核心基础day10笔记</title>
    <link href="/2021/03/04/day10/"/>
    <url>/2021/03/04/day10/</url>
    
    <content type="html"><![CDATA[<h2 id="04-05-06-07"><a href="#04-05-06-07" class="headerlink" title="04 05 06 07"></a>04 05 06 07</h2><h3 id="面向对象的特征一：封装与隐藏"><a href="#面向对象的特征一：封装与隐藏" class="headerlink" title="面向对象的特征一：封装与隐藏"></a>面向对象的特征一：封装与隐藏</h3><h4 id="一、问题的引入："><a href="#一、问题的引入：" class="headerlink" title="一、问题的引入："></a>一、问题的引入：</h4><p>当我们创建一个类的对象以后，我们可以通过“对象.属性”的方式，对对象的属性进行赋值。这里，赋值操作要受到属性的数据类型和存储范围的制约。除此之外，没有其他制约条件。但是，在实际问题中，我们往往需要给属性加入额外的限制条件。这个条件就不能在属性声明时体现，我们只能通过方法进行限制条件的添加<br>同时，我们需要避免用户再次使用“对象.属性”的方式对属性进行赋值。<br>则需要将属性声明为私有的(private)</p><p>此时，针对属性就体现了封装性</p><h4 id="二、封装性的体现："><a href="#二、封装性的体现：" class="headerlink" title="二、封装性的体现："></a>二、封装性的体现：</h4><p>我们将类的属性xxx私有化(private)，同时，提供公共的(public)方法来获取(getXxx)和设置此属性(setXxx)的值</p><p>不对外暴露的私有的方法</p><h4 id="三、封装性的体现，需要权限修饰符来配合"><a href="#三、封装性的体现，需要权限修饰符来配合" class="headerlink" title="三、封装性的体现，需要权限修饰符来配合"></a>三、封装性的体现，需要权限修饰符来配合</h4><p>1.Java规定的4种权限（从小到大排列）：private、缺省、protected、public</p><p>置于类的成员定义前，用来限定对象对该类成员对访问权限</p><table><thead><tr><th>修饰符</th><th>类内部</th><th>同一个包</th><th>不同包的子类(继承)</th><th>同一个工程</th></tr></thead><tbody><tr><td>private(-)</td><td>Yes</td><td></td><td></td><td></td></tr><tr><td>(缺省)</td><td>Yes</td><td>Yes</td><td></td><td></td></tr><tr><td>protected(#)</td><td>Yes</td><td>Yes</td><td>Yes</td><td></td></tr><tr><td>public(+)</td><td>Yes</td><td>Yes</td><td>Yes</td><td>Yes</td></tr></tbody></table><p>2.四种权限都可以修饰类的内部结构：属性、方法、构造器、内部类</p><p>3.修饰类只能使用：缺省、public</p><p>总结封装性：Java提供了4种权限修饰符来修饰类及类的内部结构，体现类及类内部结构被调用时可见性的大小</p><h2 id="09-10"><a href="#09-10" class="headerlink" title="09 10"></a>09 10</h2><h3 id="构造器（或构造方法、constructor）的使用"><a href="#构造器（或构造方法、constructor）的使用" class="headerlink" title="构造器（或构造方法、constructor）的使用"></a>构造器（或构造方法、constructor）的使用</h3><h4 id="一、构造器的作用："><a href="#一、构造器的作用：" class="headerlink" title="一、构造器的作用："></a>一、构造器的作用：</h4><p>创建对象</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">// 创建类的对象：new + 构造器</span><br>Person p = <span class="hljs-keyword">new</span> Person();<br></code></pre></div></td></tr></table></figure><h4 id="二、说明："><a href="#二、说明：" class="headerlink" title="二、说明："></a>二、说明：</h4><p>1.如果没有显式的定义类的构造器的话，则系统默认提供一个空参的构造器,构造器权限跟类的权限相同</p><p>2.定义构造器的格式：权限修饰符 类名(形参列表) {}</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//构造器 不加void</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Person</span><span class="hljs-params">()</span> </span>&#123;&#125;<br></code></pre></div></td></tr></table></figure><p>3.一个类中定义的多个构造器，彼此构成重载</p><p>4.一旦我们显式的定义了类的构造器之后，系统就不再提供默认的空参构造器</p><p>5.一个类中，至少会有一个构造器</p><p>6.方法名和类名相同</p><h2 id="13"><a href="#13" class="headerlink" title="13"></a>13</h2><h3 id="属性赋值的先后顺序"><a href="#属性赋值的先后顺序" class="headerlink" title="属性赋值的先后顺序"></a>属性赋值的先后顺序</h3><p>1.默认初始化</p><p>2.显式初始化</p><p>3.构造器中赋值</p><p>4.通过”对象.方法”或”对象.属性”的方式赋值</p><p>以上操作的先后顺序：1234</p><h2 id="14"><a href="#14" class="headerlink" title="14"></a>14</h2><h3 id="javaBean：指符合如下标准的Java类"><a href="#javaBean：指符合如下标准的Java类" class="headerlink" title="javaBean：指符合如下标准的Java类"></a>javaBean：指符合如下标准的Java类</h3><p>类是公共的</p><p>有一个无参的公共的构造器</p><p>有属性，且有对应的get、set方法</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Customer</span> </span>&#123;<br>    <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Customer</span><span class="hljs-params">()</span> </span>&#123;<br>        <br>    &#125;<br>  <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setId</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i)</span> </span>&#123;<br>        id = i;<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getId</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> id;<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String n)</span> </span>&#123;<br>        name = n;<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br>  <br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="15"><a href="#15" class="headerlink" title="15"></a>15</h2><h3 id="UML类图"><a href="#UML类图" class="headerlink" title="UML类图"></a>UML类图</h3><table><thead><tr><th align="left">Account</th></tr></thead><tbody><tr><td align="left">-balance:double</td></tr><tr><td align="left">+<u>Account(init_balance:double)</u><br />+getBalance():double<br />+deposit(amt:double)<br />+withdraw(amt:double)</td></tr></tbody></table><p>+表示public类型，-表示private类型，#表示protected类型</p><h4 id="类名"><a href="#类名" class="headerlink" title="类名"></a>类名</h4><p>Account</p><h4 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h4><p>:前是属性名 :后是属性的类型</p><h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><p>写法：方法的类型(+、-)方法名(参数名:参数类型):返回值类型</p><p>若方法有下划线表示为构造器</p><h2 id="16"><a href="#16" class="headerlink" title="16"></a>16</h2><h3 id="this关键字的使用"><a href="#this关键字的使用" class="headerlink" title="this关键字的使用"></a>this关键字的使用</h3><p>1.this可以用来修饰：属性、方法、构造器</p><p>2.this修饰属性和方法：</p><p>   this理解为：当前对象</p><p>   在类的方法/构造器中，我们可以使用”this.属性”或”this.方法”的方式，调用当前对象的属性或方法/当前正在创建的对象属性或方法。但是，通常情况下，我们都选择省略”this.”。特殊情况下，如果方法/构造器的形参和类的属性重名，我们必须显式的使用”this.变量”的方式，表明此变量是属性，而非形参</p><p>3.this调用构造器</p><p>   我们在类的构造器中，可以显示的使用”this(形参列表)”方式，调用本类中指定的其他构造器</p><p>   构造器中不能通过”this(形参列表)”方式调用自己</p><p>   如果一个类中有n个构造器，则最多有n-1个构造器中使用了”this(形参列表)”</p><p>   规定：”this(形参列表)”必须声明在当前构造器的首行</p><p>   构造器内部，最多只能声明一个”this(形参列表)”，用来调用其他的构造器</p><h2 id="21"><a href="#21" class="headerlink" title="21"></a>21</h2><h3 id="package关键字的使用"><a href="#package关键字的使用" class="headerlink" title="package关键字的使用"></a>package关键字的使用</h3><p>1.为了更好的实现项目类的管理，提出包的概念</p><p>2.使用package声明类或借口所属的包，声明在源文件的首行</p><p>3.属于标识符，遵循标识符的命名规范、规则、“见名知意”</p><p>4.每”.”一次，就代表一层文件目录</p><p>补充：同一个包下，不能命名同名的接口、类</p><p>​           不同的包下，可以命名同名的接口、类</p><h2 id="23"><a href="#23" class="headerlink" title="23"></a>23</h2><h3 id="import关键字的使用"><a href="#import关键字的使用" class="headerlink" title="import关键字的使用"></a>import关键字的使用</h3><p>1.在源文件中显式的使用import结构导入指定包下的类、接口</p><p>2.声明在包的声明和类的声明之间</p><p>3.如果需要导入多个结构，则并列写出即可</p><p>4.可以使用”xxx.*”的方式，表示可以导入xxx包下的所有结构。但是如果使用的是xxx子包下的结构，则仍需要显式导入</p><p>5.如果使用的类或接口是java.lang包下定义的，则可以省略import结构</p><p>6.如果使用的类或接口是本包下定义的，则可以省略import结构</p><p>7.如果在源文件中，使用了不同包下的同名的类，则必须至少有一个类需要以全类名的方式显示(如com.atguigu.exer3.Account)</p><p>8.import static:导入指定类或接口中的静态结构：属性或方法</p>]]></content>
    
    
    <categories>
      
      <category>Java核心基础30days笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java核心基础day09笔记</title>
    <link href="/2021/03/03/day09/"/>
    <url>/2021/03/03/day09/</url>
    
    <content type="html"><![CDATA[<h2 id="06-07-08"><a href="#06-07-08" class="headerlink" title="06 07 08"></a>06 07 08</h2><h3 id="一、理解“万事万物皆对象”"><a href="#一、理解“万事万物皆对象”" class="headerlink" title="一、理解“万事万物皆对象”"></a>一、理解“万事万物皆对象”</h3><p>1.在Java语言范畴中，我们都将功能、结构等封装到类中，通过类的实例化，来调用具体的功能结构</p><p>Scanner,String等</p><p>文件：File</p><p>网络资源：URL</p><p>2.涉及到Java语言与前段Html、后端的数据库交互时，前后端的结构在Java层面交互时，都体现为类、对象</p><h3 id="二、内存解析的说明"><a href="#二、内存解析的说明" class="headerlink" title="二、内存解析的说明"></a>二、内存解析的说明</h3><p>1.引用类型的变量，只可能存储两类值：null 或 地址值（含变量的类型）</p><h3 id="三、匿名对象的使用"><a href="#三、匿名对象的使用" class="headerlink" title="三、匿名对象的使用"></a>三、匿名对象的使用</h3><p>1.理解：我们创建的对象，没有显式的赋值变量名，即为匿名对象</p><p>2.特征：匿名对象只能调用一次</p><p>3.使用：如下</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">PhoneMall mall = <span class="hljs-keyword">new</span> PhoneMall();<br>mall.show(<span class="hljs-keyword">new</span> Phone());<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PhoneMall</span> </span>&#123;<br>  <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">show</span> <span class="hljs-params">(Phone phone)</span> </span>&#123;<br>        phone.sendEmail();<br>        phone.playGame();<br>    &#125;<br><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Phone</span> </span>&#123;<br>    ...<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="10-11"><a href="#10-11" class="headerlink" title="10 11"></a>10 11</h2><h3 id="方法的重载（overload）"><a href="#方法的重载（overload）" class="headerlink" title="方法的重载（overload）"></a>方法的重载（overload）</h3><p>1.定义：在同一个类中，允许存在一个以上的同名方法，只要它们的参数个数或者参数类型不同（参数顺序不同也算）</p><p>2.跟方法的权限修饰符、返回值类型、形参变量名、方法体都没有关系</p><p>调用方法传参遵循类型自动提升规则</p><h2 id="14"><a href="#14" class="headerlink" title="14"></a>14</h2><h3 id="可变个数形参的方法"><a href="#可变个数形参的方法" class="headerlink" title="可变个数形参的方法"></a>可变个数形参的方法</h3><p>1.jdk 5新增内容</p><p>2.具体使用</p><p>​        2.1可变个数形参的格式：<code>数据类型... 变量名</code></p><p>​        2.2当调用可变个数形参的方法时，传入的参数个数可以是：0个，1个，2个…</p><p>​        2.3可变个数形参的方法与本类中方法名相同，形参不同的方法之间构成重载</p><p>​        2.4可变个数形参的方法与本类中方法名相同，形参类型也相同的数组不能共存，这是旧特性可变个数形参的方法</p><p>​        2.5可变个数形参在方法的形参中，必须声明在末尾，数组形式的形参可以处于形参列表的任意位置，但是个数可变的形参只能处于形参列表的最后位置。</p><p>​        2.6可变个数形参在方法的形参中，最多只能声明一个可变形参</p><h2 id="15"><a href="#15" class="headerlink" title="15"></a>15</h2><p>如果变量是基本数据类型，此时赋值的是变量所保存的数据值</p><p>如果变量是引用数据类型，此时赋值的是变量所保存的数据的地址值</p><h2 id="16-17"><a href="#16-17" class="headerlink" title="16 17"></a>16 17</h2><h3 id="方法的形参的传递机制：值传递"><a href="#方法的形参的传递机制：值传递" class="headerlink" title="方法的形参的传递机制：值传递"></a>方法的形参的传递机制：值传递</h3><p>1.形参：方法定义时：声明的小括号内的参数<br>   实参：方法调用时，实际传递给形参的数据</p><p>2.值传递机制：<br>如果参数是基本数据类型，此时实参赋给形参的是，实参真实存储的数据值</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">int</span> m = <span class="hljs-number">10</span>;<br><span class="hljs-keyword">int</span> n = <span class="hljs-number">20</span>;<br>sysout;<br>test.swap(m, n);<br><span class="hljs-comment">//10 20</span><br>sysout;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(<span class="hljs-keyword">int</span> m, <span class="hljs-keyword">int</span> n)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> temp = m;<br>    m = n;<br>    n = temp;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>如果参数时引用数据类型，此时实参赋给形参的是，实参存储数据的地址值</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">Data data = <span class="hljs-keyword">new</span> Data();<br>data.m = <span class="hljs-number">10</span>;<br>data.n = <span class="hljs-number">20</span>;<br>sysout;<br>test.swap(data);<br><span class="hljs-comment">//20 10</span><br>sysout;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Data</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> m;<br>    <span class="hljs-keyword">int</span> n;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(Data data)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> temp = data.m;<br>    data.m = data.n;<br>    data.n = temp;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="19"><a href="#19" class="headerlink" title="19"></a>19</h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[]&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;;<br><span class="hljs-comment">//地址值</span><br>sysout(arr);<br><span class="hljs-keyword">char</span>[] arr1 = <span class="hljs-keyword">new</span> <span class="hljs-keyword">char</span>[]&#123;<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>&#125;;<br><span class="hljs-comment">//abc</span><br>sysout(arr1);<br></code></pre></div></td></tr></table></figure><h2 id="21"><a href="#21" class="headerlink" title="21"></a>21</h2><h3 id="递归方法：一个方法体内调用它自身"><a href="#递归方法：一个方法体内调用它自身" class="headerlink" title="递归方法：一个方法体内调用它自身"></a>递归方法：一个方法体内调用它自身</h3><p>包含了一种隐式的循环，它会重复执行某段代码，但这种重复执行无须循环控制</p><p>一定要向已知方向递归，否则这种递归就变成了无穷递归，类似于死循环</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//计算n!</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getSum</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span> </span>&#123;<br>    <br>  <span class="hljs-comment">//已知方向</span><br>    <span class="hljs-keyword">if</span> (n == <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        rerturn n * getSum(n - <span class="hljs-number">1</span>);<br>    &#125;<br>  <br>&#125;<br><br><span class="hljs-comment">//已知数列：f(0) = 1, f(1) = 4, f(n + 2) = 2 * f(n + 1) + f(n)，n&gt;0整数，求f(n)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">f</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span> </span>&#123;<br>    <br>    <span class="hljs-keyword">if</span> (n == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br>  <br>    <span class="hljs-keyword">if</span> (n == <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">4</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">2</span> * f(n - <span class="hljs-number">1</span>) + f(n - <span class="hljs-number">2</span>);<br>    &#125;<br>  <br>&#125;<br><br><span class="hljs-comment">//斐波那契(Fibonacci)数列 规律：一个数等于前两个数之和 要求：计算第n个值，将整个数列打印出来</span><br><span class="hljs-comment">//汉诺塔问题</span><br><span class="hljs-comment">//快速排序</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java核心基础30days笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java核心基础day08笔记</title>
    <link href="/2021/03/02/day08/"/>
    <url>/2021/03/02/day08/</url>
    
    <content type="html"><![CDATA[<h2 id="03"><a href="#03" class="headerlink" title="03"></a>03</h2><h3 id="Java面向对象学习的三条主线"><a href="#Java面向对象学习的三条主线" class="headerlink" title="Java面向对象学习的三条主线"></a>Java面向对象学习的三条主线</h3><p>1.Java类及类的成员：属性、方法、构造器；代码块、内部类（后两者较少）</p><p>2.面向对象的三大特征：封装性、继承性、多态性、（抽象性）</p><p>3.其他关键字：this、super、static、final、abstract、interface、package、import等</p><h2 id="04"><a href="#04" class="headerlink" title="04"></a>04</h2><p>“人把大象装进冰箱”</p><p>面向过程：强调的是功能行为，以函数为最小单位，考虑怎么做</p><p>1.把冰箱门打开</p><p>2.抬起大象，塞进冰箱</p><p>3.把冰箱门关闭</p><p>面向对象：强调具备了功能的对象，以类/对象为最小单位，考虑谁来做</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">人 &#123;<br>    <br>    打开(冰箱) &#123;<br>        冰箱.开开();<br>    &#125;<br>    <br>    抬起(大象) &#123;<br>        大象.进入(冰箱);<br>    &#125;<br>    <br>    关闭(冰箱) &#123;<br>        冰箱.闭合();<br>    &#125;<br>    <br>&#125;<br><br>冰箱 &#123;<br>    <br>    开开() &#123;&#125;<br>    <br>    闭合() &#123;&#125;<br>    <br>&#125;<br><br>大象 &#123;<br>    <br>    进入 (冰箱) &#123;&#125;<br>    <br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="05"><a href="#05" class="headerlink" title="05"></a>05</h2><p><strong>类(class)<strong>：是对一类事物的描述，是</strong>抽象的</strong>、概念上的定义</p><p><strong>对象(object)<strong>：是</strong>实际存在</strong>的该事物的每个个体，因而也称为<strong>实例</strong>(instance)</p><h2 id="06-07-08-09-10"><a href="#06-07-08-09-10" class="headerlink" title="06 07 08 09 10"></a>06 07 08 09 10</h2><h3 id="一、设计类，其实就是设计类的成员"><a href="#一、设计类，其实就是设计类的成员" class="headerlink" title="一、设计类，其实就是设计类的成员"></a>一、设计类，其实就是设计类的成员</h3><p>属性==成员变量==field==域、字段</p><p>方法==成员方法==method</p><p>创建类的对象==类的实例化==实例化类</p><h3 id="二、类和对象的使用（面向对象思想落地的实现）"><a href="#二、类和对象的使用（面向对象思想落地的实现）" class="headerlink" title="二、类和对象的使用（面向对象思想落地的实现）"></a>二、类和对象的使用（面向对象思想落地的实现）</h3><p>1.创建类，设计类的成员</p><p>2.创建类的对象</p><p>3.通过“对象.属性”或“对象.方法”调用对象的结构</p><h3 id="三、如果创建了一个类的多个对象，则每个对象都独立的拥有一套类的属性（非static的），意味着：如果我们修改一个对象的属性a，则不影响另外一个对象属性a的值"><a href="#三、如果创建了一个类的多个对象，则每个对象都独立的拥有一套类的属性（非static的），意味着：如果我们修改一个对象的属性a，则不影响另外一个对象属性a的值" class="headerlink" title="三、如果创建了一个类的多个对象，则每个对象都独立的拥有一套类的属性（非static的），意味着：如果我们修改一个对象的属性a，则不影响另外一个对象属性a的值"></a>三、如果创建了一个类的多个对象，则每个对象都独立的拥有一套类的属性（非static的），意味着：如果我们修改一个对象的属性a，则不影响另外一个对象属性a的值</h3><h3 id="四、对象的内存解析"><a href="#四、对象的内存解析" class="headerlink" title="四、对象的内存解析"></a>四、对象的内存解析</h3><p>堆（Heap）：存放对象实例（对象.属性）</p><p>栈（Stack）：存储局部变量</p><p>方法区（Method Area）：存储类信息、常量、静态变量、即时编译器编译后的代码</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//测试类</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PersonTest</span> </span>&#123;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//创建Person类的对象==类的实例化==实例化类</span><br>        Person p1 = <span class="hljs-keyword">new</span> Person();<br>        <span class="hljs-comment">//Scanner scan = new Scanner(System.in);</span><br>        <span class="hljs-comment">//调用对象的结构：属性、方法</span><br>        <span class="hljs-comment">//调用属性：“对象.属性”</span><br>        p1.name = <span class="hljs-string">&quot;Tom&quot;</span>;<br>        p1.isMale = <span class="hljs-keyword">true</span>;<br>        System.out.println(p1.name);<br>        <span class="hljs-comment">//调用方法：“对象.方法”</span><br>        p1.eat();<br>        p1.sleep();<br>        p1.talk(<span class="hljs-string">&quot;Chinese&quot;</span>);<br>        <br>        Person p2 = <span class="hljs-keyword">new</span> Person();<br>        <span class="hljs-comment">//null</span><br>        System.out.println(p2.name);<br>        <span class="hljs-comment">//flase</span><br>        System.out.println(p2.isMale);<br>        <br>        <span class="hljs-comment">//p1对象的地址赋值给p3，导致p1和p3指向了堆空间中的同一个对象实体</span><br>        Person p3 = p1;<br>        <span class="hljs-comment">//Tom</span><br>        System.out.println(p3.name);<br>        p3.age = <span class="hljs-number">10</span>;<br>        <span class="hljs-comment">//10</span><br>        System.out.println(p1.age);<br>    &#125;<br>    <br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> </span>&#123;<br>    <br>    <span class="hljs-comment">//属性</span><br>    String name;<br>    <span class="hljs-keyword">int</span> age = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">boolean</span> isMale;<br>   <br>    <span class="hljs-comment">//方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">eat</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;人可以吃饭&quot;</span>);<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sleep</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;人可以睡觉&quot;</span>);<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">talk</span><span class="hljs-params">(String language)</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;人可以说话，使用的是：&quot;</span> + language);<br>    &#125;<br>    <br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="11-12"><a href="#11-12" class="headerlink" title="11 12"></a>11 12</h2><h3 id="属性（成员变量）vs-局部变量"><a href="#属性（成员变量）vs-局部变量" class="headerlink" title="属性（成员变量）vs  局部变量"></a>属性（成员变量）vs  局部变量</h3><p>相同点：</p><p><strong>定义变量的格式：数据类型 变量名 = 变量值</strong></p><p><strong>先声明，后使用</strong></p><p><strong>都有其对应的作用域</strong></p><p>不同点：</p><p><strong>在类中声明的位置不同</strong></p><p>属性：直接定义在类的一对{}中</p><p>局部变量：声明在方法内、方法形参、代码块内、构造器形参、构造器内部的变量</p><p><strong>关于权限修饰符的不同</strong></p><p>属性：可以在声明属性时，指明其权限，使用权限修饰符</p><p>常用的权限修饰符：private、public、缺省、protected（封装性）</p><p>局部变量：不可以使用权限修饰符</p><p><strong>默认初始化值的情况</strong></p><p>属性：类的属性，根据其类型，都有默认初始化值</p><p>整型（byte、short、int、long）：0</p><p>浮点型（float、double）：0.0</p><p>字符型（char）：0（或’\u0000’）</p><p>布尔型（boolean）：false</p><p>引用数据类型（类、数组、接口）：null</p><p>局部变量：没有默认初始化值。意味着，我们在调用局部变量之前，一定要显式赋值。特别地，形参在调用时赋值</p><h2 id="13-14"><a href="#13-14" class="headerlink" title="13 14"></a>13 14</h2><h3 id="类中方法的声明和使用"><a href="#类中方法的声明和使用" class="headerlink" title="类中方法的声明和使用"></a>类中方法的声明和使用</h3><p>方法：描述类应该具有的功能</p><p>比如</p><p>Math类：sqrt()\random()...</p><p>Scanner类：next()\nextXxx()…</p><p>Arrays类：sort()\binarySearch()\toString()\equals()…</p><p>方法的声明：</p><p>权限修饰符 返回值类型 方法名(形参列表) {</p><p>​    方法体;</p><p>}</p><p>如果方法有返回值，则必须在方法声明时，指定返回值的类型。同时，方法中，需要使用return关键字来返回指定类型的变量或常量</p><p>如果方法没有返回值，则方法声明时，使用void来表示。通常，没有返回值的方法中，就不需要使用return。但是，如果使用的话，只能”return;”表示结束此方法</p><p>形参列表：方法可声明&gt;=0个形参</p><p>格式：数据类型1 形参1, 数据类型2 形参2…</p><p>方法的使用中，可以调用当前类的属性或方法</p><p>方法中，不可以定义方法</p><h2 id="21-22"><a href="#21-22" class="headerlink" title="21 22"></a>21 22</h2><h3 id="对象数组题目"><a href="#对象数组题目" class="headerlink" title="对象数组题目"></a>对象数组题目</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.exer;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 对象数组题目：</span><br><span class="hljs-comment"> * 定义Student，包含三个属性：学号number(int)，年级state(int)，成绩score(int)</span><br><span class="hljs-comment"> * 创建20个学生对象，学号为1到20，年级和成绩都由随机数确定</span><br><span class="hljs-comment"> * 问题一：打印出3年级（state值为3）的学生信息</span><br><span class="hljs-comment"> * 问题二：使用冒泡排序按学生成绩排序，并遍历所有学生信息</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * 提示：</span><br><span class="hljs-comment"> * 1）生成随机数：Math.random()，返回值类型double</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * 此代码是对StudentTest.java的改进：将操作数组的功能封装到方法中</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">StudentTest1</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//声明Student类型的数组</span><br>        Student1[] stus = <span class="hljs-keyword">new</span> Student1[<span class="hljs-number">20</span>];<br>        <br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; stus.length; i++) &#123;<br>            <span class="hljs-comment">//给数组元素赋值</span><br>            stus[i] = <span class="hljs-keyword">new</span> Student1();<br>            <span class="hljs-comment">//给Student对象属性赋值</span><br>            stus[i].number = i + <span class="hljs-number">1</span>;<br>            <span class="hljs-comment">//年级：[1,6]</span><br>            stus[i].state = (<span class="hljs-keyword">int</span>)(Math.random() * (<span class="hljs-number">6</span> - <span class="hljs-number">1</span> + <span class="hljs-number">1</span>) + <span class="hljs-number">1</span>);<br>            <span class="hljs-comment">//成绩：[0,100]</span><br>            stus[i].score = (<span class="hljs-keyword">int</span>)(Math.random() * (<span class="hljs-number">100</span> - <span class="hljs-number">0</span> + <span class="hljs-number">1</span>) + <span class="hljs-number">0</span>);<br>        &#125;<br>        <br>        StudentTest1 test = <span class="hljs-keyword">new</span> StudentTest1();<br>        <br>        <span class="hljs-comment">//遍历学生数组</span><br>        test.print(stus);<br>          <br>        System.out.println(<span class="hljs-string">&quot;*****************&quot;</span>);<br>        <br>        <span class="hljs-comment">//问题一：打印3年级的学生信息</span><br>        test.searchState(stus, <span class="hljs-number">3</span>);<br>        <br>        System.out.println(<span class="hljs-string">&quot;*****************&quot;</span>);<br>        <br>        <span class="hljs-comment">//问题二：使用冒泡排序按学生成绩排序，并遍历</span><br>        test.sort(stus);<br>        test.print(stus);<br>        <br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">print</span><span class="hljs-params">(Student1[] stus)</span> </span>&#123;<br>        <br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; stus.length; i++) &#123;<br>            System.out.println(stus[i].info());<br>        &#125;<br>        <br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">searchState</span><span class="hljs-params">(Student1[] stus, <span class="hljs-keyword">int</span> state)</span> </span>&#123;<br>        <br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; stus.length; i++) &#123;<br>            <br>            <span class="hljs-keyword">if</span> (stus[i].state == state) &#123;<br>                System.out.println(stus[i].info());<br>            &#125;<br>            <br>        &#125;<br>        <br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sort</span><span class="hljs-params">(Student1[] stus)</span> </span>&#123;<br>        <br>      <span class="hljs-comment">//问题二：使用冒泡排序按学生成绩排序，并遍历所有学生信息</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; stus.length - <span class="hljs-number">1</span>; i++) &#123;<br>            <br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; stus.length - <span class="hljs-number">1</span> - i; j++) &#123;<br>                <br>                <span class="hljs-keyword">if</span> (stus[j].score &gt; stus[j + <span class="hljs-number">1</span>].score) &#123;<br>                    <span class="hljs-comment">//如果需要换序，交换的是数组的元素：Student对象</span><br>                    Student1 temp = stus[j];<br>                    stus[j] = stus[j + <span class="hljs-number">1</span>];<br>                    stus[j + <span class="hljs-number">1</span>] = temp;<br>                &#125;<br>                <br>            &#125;<br>            <br>        &#125;<br>    &#125;<br>    <br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student1</span> </span>&#123;<br>    <br>    <span class="hljs-keyword">int</span> number;<br>    <span class="hljs-keyword">int</span> state;<br>    <span class="hljs-keyword">int</span> score;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">info</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;学号：&quot;</span> + number + <span class="hljs-string">&quot;，年级：&quot;</span> + state + <span class="hljs-string">&quot;，成绩：&quot;</span> + score;<br>    &#125;<br>    <br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java核心基础30days笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java核心基础day07笔记</title>
    <link href="/2021/03/01/day07/"/>
    <url>/2021/03/01/day07/</url>
    
    <content type="html"><![CDATA[<h2 id="09"><a href="#09" class="headerlink" title="09"></a>09</h2><h3 id="数组的复制"><a href="#数组的复制" class="headerlink" title="数组的复制"></a>数组的复制</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//不能称作数组的复制，只是赋值了地址，都指向了堆空间的唯一的一个数组实体</span><br>array2 = array1;<br><span class="hljs-comment">//数组的复制</span><br>array2 = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[array1.length];<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; array2.length; i++) &#123;<br>array2[i] = array1[i];<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="13"><a href="#13" class="headerlink" title="13"></a>13</h2><h3 id="二分法查找"><a href="#二分法查找" class="headerlink" title="二分法查找"></a>二分法查找</h3> <figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//二分法查找</span><br><span class="hljs-comment">//前提：所要查找的数组必须有序</span><br><span class="hljs-keyword">int</span>[] arr2 = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[]&#123;-<span class="hljs-number">98</span>,-<span class="hljs-number">34</span>,<span class="hljs-number">2</span>,<span class="hljs-number">34</span>,<span class="hljs-number">54</span>,<span class="hljs-number">66</span>,<span class="hljs-number">79</span>,<span class="hljs-number">105</span>,<span class="hljs-number">210</span>,<span class="hljs-number">333</span>&#125;;<br><span class="hljs-keyword">int</span> dest1 = -<span class="hljs-number">34</span>;<br><span class="hljs-keyword">int</span> head = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">int</span> end = arr.length -<span class="hljs-number">1</span>;<br><span class="hljs-keyword">boolean</span> isFlag = <span class="hljs-keyword">false</span>;<br><br><span class="hljs-keyword">while</span> (head &lt;= end) &#123;<br>  <span class="hljs-keyword">int</span> middle = (head + end) / <span class="hljs-number">2</span>;<br>  <br>  <span class="hljs-keyword">if</span> (dest1 == arr2[middle]) &#123;<br>      System.out.println(<span class="hljs-string">&quot;找到了指定的元素，位置为：&quot;</span> + middle);<br>      isFlag = <span class="hljs-keyword">true</span>;<br>      <span class="hljs-keyword">break</span>;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (arr2[middle] &gt; dest1) &#123;<br>    end = middle - <span class="hljs-number">1</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      head = middle + <span class="hljs-number">1</span>;<br>    &#125;<br>          <br>&#125;<br><br><span class="hljs-keyword">if</span> (isFlag == <span class="hljs-keyword">false</span>) &#123;<br>  System.out.println(<span class="hljs-string">&quot;很遗憾，没有找到&quot;</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="14"><a href="#14" class="headerlink" title="14"></a>14</h2><h3 id="衡量排序算法的优劣"><a href="#衡量排序算法的优劣" class="headerlink" title="衡量排序算法的优劣"></a>衡量排序算法的优劣</h3><p>1.时间复杂度：分析关键字的比较次数和记录的移动次数</p><p>2.空间复杂度：分析排序算法中需要多少辅助内存</p><p>3.稳定性：若两个记录A和B的关键字值相等，但排序后A、B的先后次序保持不变，则称这种排序算法是稳定的</p><h2 id="15"><a href="#15" class="headerlink" title="15"></a>15</h2><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.java;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BubbleSortTest</span> </span>&#123;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[]&#123;<span class="hljs-number">43</span>,<span class="hljs-number">32</span>,<span class="hljs-number">76</span>,-<span class="hljs-number">98</span>,<span class="hljs-number">0</span>,<span class="hljs-number">64</span>,<span class="hljs-number">33</span>,-<span class="hljs-number">21</span>,<span class="hljs-number">32</span>,<span class="hljs-number">99</span>&#125;;<br>        <br>        <span class="hljs-comment">//冒泡排序</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; arr.length - <span class="hljs-number">1</span>; i++) &#123;<br>            <br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; arr.length - <span class="hljs-number">1</span> - i; j++) &#123;<br>                <br>                <span class="hljs-keyword">if</span> (arr[j] &gt; arr[j + <span class="hljs-number">1</span>]) &#123;<br>                    <span class="hljs-keyword">int</span> temp = arr[j];<br>                    arr[j] = arr[j + <span class="hljs-number">1</span>];<br>                    arr[j + <span class="hljs-number">1</span>] = temp;<br>                &#125;<br>                <br>            &#125;<br>            <br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; arr.length; j++) &#123;<br>                System.out.print(arr[j] + <span class="hljs-string">&quot;    &quot;</span>);<br>            &#125;<br>            <br>            System.out.println();<br>            <br>        &#125;<br>        <br>    &#125;<br>    <br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="18"><a href="#18" class="headerlink" title="18"></a>18</h2><h3 id="Arrays数组工具类中的方法"><a href="#Arrays数组工具类中的方法" class="headerlink" title="Arrays数组工具类中的方法"></a>Arrays数组工具类中的方法</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.java;<br><br><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * java.util.Arrays:操作数组的工具类，里面定义了很多操作数组的方法</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ArraysTest</span> </span>&#123;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span>[] arr1 = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[]&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>&#125;;<br>        <span class="hljs-keyword">int</span>[] arr2 = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[]&#123;<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">4</span>&#125;;<br>        <span class="hljs-comment">//判断两个数组是否相等</span><br>        <span class="hljs-keyword">boolean</span> isEquals = Arrays.equals(arr1, arr2);<br>        System.out.println(isEquals);<br>        <br>        <span class="hljs-comment">//输出数组信息</span><br>        System.out.println(Arrays.toString(arr1));<br>        <br>        <span class="hljs-comment">//将指定值填充到数组之中</span><br>        Arrays.fill(arr1, <span class="hljs-number">10</span>);<br>        System.out.println(Arrays.toString(arr1));<br>        <br>        <span class="hljs-comment">//对数组进行排序</span><br>        Arrays.sort(arr2);<br>        System.out.println(Arrays.toString(arr2));<br>        <br>        <span class="hljs-keyword">int</span>[] arr3 = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[]&#123;-<span class="hljs-number">98</span>, -<span class="hljs-number">34</span>, <span class="hljs-number">2</span>, <span class="hljs-number">34</span>, <span class="hljs-number">54</span>, <span class="hljs-number">66</span>, <span class="hljs-number">79</span>, <span class="hljs-number">105</span>, <span class="hljs-number">210</span>, <span class="hljs-number">333</span>&#125;;<br>        <span class="hljs-comment">//二分查找，正数找到，负数没找到</span><br>        <span class="hljs-keyword">int</span> index = Arrays.binarySearch(arr3, <span class="hljs-number">211</span>);<br>        System.out.println(index);<br>    &#125;    <br>      <br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java核心基础30days笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java核心基础day06笔记</title>
    <link href="/2021/02/28/day06/"/>
    <url>/2021/02/28/day06/</url>
    
    <content type="html"><![CDATA[<h2 id="05"><a href="#05" class="headerlink" title="05"></a>05</h2><p>package名逆序，如com.alibaba.ai.util</p><p>在包里的java文件第一行要写包的来源，如：package com.alibaba.ai.util;</p><h2 id="06"><a href="#06" class="headerlink" title="06"></a>06</h2><p>Eclipse:Comment for created types</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Swish Email:swh524457@163.com</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@data</span> $&#123;date&#125;$&#123;time&#125;</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br></code></pre></div></td></tr></table></figure><p>Eclipse:Comment for non-overriding methods</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Swish Email:swh524457@163.com</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@data</span> $&#123;date&#125;$&#123;time&#125;</span><br><span class="hljs-comment"> * $&#123;tags&#125;</span><br><span class="hljs-comment"> */</span><br></code></pre></div></td></tr></table></figure><h2 id="07-08"><a href="#07-08" class="headerlink" title="07 08"></a>07 08</h2><p>数组属于引用数据类型的变量，而数组中的元素可以是任意数据类型</p><p>创建数组会在内存中开辟一整块连续的空间</p><p>数组的长度一旦确定，就不能修改</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">int</span>[] ids;<span class="hljs-comment">//声明</span><br><span class="hljs-comment">//1.1静态初始化：数组的初始化和数组元素的赋值操作同时进行</span><br>ids = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[]&#123;<span class="hljs-number">1001</span>,<span class="hljs-number">1002</span>,<span class="hljs-number">1003</span>,<span class="hljs-number">1004</span>&#125;;<br><span class="hljs-comment">//1.2动态初始化：数组的初始化和数组元素的赋值操作分开进行</span><br>String[] names = <span class="hljs-keyword">new</span> String[<span class="hljs-number">5</span>];<br></code></pre></div></td></tr></table></figure><h2 id="10"><a href="#10" class="headerlink" title="10"></a>10</h2><p>xxx.length</p><h2 id="11"><a href="#11" class="headerlink" title="11"></a>11</h2><p>数组元素默认初始化值</p><p>数组元素是整型：0</p><p>数组元素是浮点型：0.0</p><p>数组元素是char型：0（不是’0’）</p><p>数组元素是boolean型：false</p><p>数组元素是引用数据类型：null</p><h2 id="12"><a href="#12" class="headerlink" title="12"></a>12</h2><p>内存的简化结构</p><p>栈(stack)：局部变量</p><p>堆(heap)：对象、数组（new出来的结构）</p><p>方法区：常量池、静态域</p><h2 id="15"><a href="#15" class="headerlink" title="15"></a>15</h2><p>eclipse按住shift+enter换下一行</p><h2 id="16-19"><a href="#16-19" class="headerlink" title="16 19"></a>16 19</h2><h3 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//静态初始化。外层元素的初始化值为：地址值。内层元素的初始化值为：与一维数组初始化情况相同</span><br><span class="hljs-keyword">int</span>[][] arr1 = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span> [][]&#123;&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;,&#123;<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;,&#123;<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>&#125;&#125;;<br><span class="hljs-comment">//动态初始化，可以不用写列。外层元素的初始化值为：null。内层元素的初始化值为：不能调用，否则报错</span><br><span class="hljs-keyword">int</span>[][] arr3 = <span class="hljs-keyword">new</span> String[<span class="hljs-number">3</span>][];<br>arr3[<span class="hljs-number">1</span>] = <span class="hljs-keyword">new</span> String[<span class="hljs-number">4</span>];<br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">int</span>[][] arr = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">4</span>][<span class="hljs-number">3</span>];<br><span class="hljs-comment">//[I@15db9742地址值</span><br>System.out.println(arr[<span class="hljs-number">0</span>]);<br><span class="hljs-comment">//0</span><br>System.out.println(arr[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]);<br><span class="hljs-comment">//[[I@6d06d69c地址值</span><br>System.out.println(arr);<br><span class="hljs-keyword">double</span>[][] arr3 = <span class="hljs-keyword">new</span> <span class="hljs-keyword">double</span>[<span class="hljs-number">4</span>][];<br><span class="hljs-comment">//null，因为arr3[1]是一维数组，是引用类型，没有赋过值</span><br>System.out.println(arr3[<span class="hljs-number">1</span>]);<br><span class="hljs-comment">//报错</span><br>System.out.println(arr3[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>]);<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java核心基础30days笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java核心基础day05笔记</title>
    <link href="/2021/02/27/day05/"/>
    <url>/2021/02/27/day05/</url>
    
    <content type="html"><![CDATA[<h2 id="05"><a href="#05" class="headerlink" title="05"></a>05</h2><h3 id="While循环结构的使用"><a href="#While循环结构的使用" class="headerlink" title="While循环结构的使用"></a>While循环结构的使用</h3><p>一、循环结构的4个要素</p><p>1⃣️初始化条件</p><p>2⃣️循环条件（boolean类型）</p><p>3⃣️循环体</p><p>4⃣️迭代条件</p><p>二、while循环的结构</p><figure class="highlight abnf"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs abnf"><span class="hljs-number">1</span>⃣️<br>while (<span class="hljs-number">2</span>⃣️) &#123;<br><span class="hljs-number">3</span>⃣️<span class="hljs-comment">;</span><br><span class="hljs-number">4</span>⃣️<span class="hljs-comment">;</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p>三、do-while循环结构</p><figure class="highlight abnf"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs abnf"><span class="hljs-number">1</span>⃣️<br>do &#123;<br><span class="hljs-number">3</span>⃣️<span class="hljs-comment">;</span><br><span class="hljs-number">4</span>⃣️<span class="hljs-comment">;</span><br>&#125; while (<span class="hljs-number">2</span>⃣️)<span class="hljs-comment">;</span><br></code></pre></div></td></tr></table></figure><h2 id="12-13"><a href="#12-13" class="headerlink" title="12 13"></a>12 13</h2><h3 id="输出100以内的质数"><a href="#输出100以内的质数" class="headerlink" title="输出100以内的质数"></a>输出100以内的质数</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">输出100以内的质数</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PrimeNumber</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt;= <span class="hljs-number">100</span>; i++) &#123;<br>            <span class="hljs-comment">//flag为true，为质数</span><br>            <span class="hljs-keyword">boolean</span> flag = <span class="hljs-keyword">true</span>;<br><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">2</span>; j&lt;= Math.sqrt(i); j++) &#123;<br><br>                <span class="hljs-keyword">if</span> (i % j == <span class="hljs-number">0</span>) &#123;<br>                    flag = <span class="hljs-keyword">false</span>;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br><br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (flag == <span class="hljs-keyword">true</span>) &#123;<br>                System.out.println(i);<br>            &#125;<br><br>        &#125;<br>        <br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//获取当前时间距离1970-01-01 00:00:00的毫秒数(UTC协调世界时)</span><br><span class="hljs-keyword">long</span> time = System.currentTimeMillis();<br></code></pre></div></td></tr></table></figure><p>开方：Math.sqrt(i)</p><h2 id="14"><a href="#14" class="headerlink" title="14"></a>14</h2><p>break:结束当前循环</p><p>continue:结束当次循环</p><h2 id="15"><a href="#15" class="headerlink" title="15"></a>15</h2><h3 id="label关键字"><a href="#label关键字" class="headerlink" title="label关键字"></a>label关键字</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">label:<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">4</span>; i++) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j&lt;= <span class="hljs-number">10</span>; j++) &#123;<br>        <span class="hljs-keyword">if</span> (j % <span class="hljs-number">4</span> == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-comment">//结束指定标识的一层循环结构</span><br>            <span class="hljs-keyword">break</span> label;<br>            <span class="hljs-comment">//结束指定标识的一层循环的当次循环</span><br>            <span class="hljs-keyword">continue</span> label;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-comment">//用label找质数代码更简单</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java核心基础30days笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java核心基础day04笔记</title>
    <link href="/2021/02/26/day04/"/>
    <url>/2021/02/26/day04/</url>
    
    <content type="html"><![CDATA[<h2 id="05"><a href="#05" class="headerlink" title="05"></a>05</h2><h3 id="用Scanner从键盘获取不同类型的变量"><a href="#用Scanner从键盘获取不同类型的变量" class="headerlink" title="用Scanner从键盘获取不同类型的变量"></a>用Scanner从键盘获取不同类型的变量</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">如何从键盘获取不同类型的变量</span><br><span class="hljs-comment">具体实现步骤：</span><br><span class="hljs-comment">1.导包：import java.util.Scanner;</span><br><span class="hljs-comment">2.Scanner的实例化：Scanner scan = new Scanner(System.in);</span><br><span class="hljs-comment">3.调用Scanner类的相关方法，来获取指定类型的变量</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">import</span> java.util.Scanner;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ScannerTest</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Scanner scan = <span class="hljs-keyword">new</span> Scanner(System.in);<br>        <span class="hljs-keyword">int</span> num = scan.nextInt();<br>        System.out.println(num);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ScannerTest</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Scanner scan = <span class="hljs-keyword">new</span> Scanner(System.in);<br>        String name = scan.next();<br>        <span class="hljs-keyword">double</span> weight = scan.nextDouble();<br>        <span class="hljs-keyword">boolean</span> isLove = scan.nextBoolean();<br>        <span class="hljs-comment">//对于char型的获取，Scanner没有提供相关的方法。只能获取一个字符串</span><br>        String gender = scan.next();<br>        <span class="hljs-comment">//获取索引为0位置上的字符</span><br>        <span class="hljs-keyword">char</span> genderchar = gender.charAt(<span class="hljs-number">0</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="09"><a href="#09" class="headerlink" title="09"></a>09</h2><p>if-else就近原则配对</p><h2 id="11"><a href="#11" class="headerlink" title="11"></a>11</h2><p>Math.random()随机[0.0,1.0)</p><p>公式：随机[a,b]：Math.random() * (b - a + 1) + a</p><p>推理：[0.0,1.0) * (b - a + 1) = [0.0,b-a] [0.0,b-a] + a =[a,b]</p><h2 id="12"><a href="#12" class="headerlink" title="12"></a>12</h2><p>string.equals(“asd”)</p><h2 id="13-16"><a href="#13-16" class="headerlink" title="13 16"></a>13 16</h2><h3 id="switch-case结构的使用"><a href="#switch-case结构的使用" class="headerlink" title="switch-case结构的使用"></a>switch-case结构的使用</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">【强制】在一个 switch 块内，每个 case 要么通过 continue/break/return 等来终止，要么</span><br><span class="hljs-comment">注释说明程序将继续执行到哪一个 case 为止；在一个switch块内，都必须包含一个default 语句并且放在最后，即使它什么代码也没有。</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">根据switch表达式中的值，依次匹配各个case中的常量。一旦匹配成功，则进入相应case结构中，调用其执行语句。当调用完执行语句以后，则仍然继续向下执行其他case结构中的执行语句，直到遇到break关键字或此switch-case结构末尾为止结束为止</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">switch结构中的表达式，只能是如下6种数据类型之一：byte、short、char、int、枚举类型(jdk5.0新增)、String类型(jdk7.0新增)</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">case之后只能声明常量，不能声明范围</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">default相当于if-else结构中的else，阿里开发手册中强制</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">int</span> number = <span class="hljs-number">2</span>;<br><span class="hljs-keyword">switch</span> (number) &#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br>        语句<span class="hljs-number">1</span>;<br>        <span class="hljs-comment">//break;</span><br>    ...<br>    <span class="hljs-keyword">default</span>:<br>        <span class="hljs-comment">//语句;</span><br>        <span class="hljs-comment">//break;</span><br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//给出2019某月某天，输出该日是2019年的第多少天</span><br><span class="hljs-keyword">switch</span> (month) &#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">12</span>:<br>  ...<br>  <span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br>    sumDays += <span class="hljs-number">31</span>;<br>  <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>    sumDays += <span class="hljs-number">28</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>    sumDays += <span class="hljs-number">31</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>        sumDays += day;<br>    <span class="hljs-keyword">default</span>:<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="19"><a href="#19" class="headerlink" title="19"></a>19</h2><h3 id="For循环结构的使用"><a href="#For循环结构的使用" class="headerlink" title="For循环结构的使用"></a>For循环结构的使用</h3><p>一、循环结构的4个要素</p><p>1⃣️初始化条件</p><p>2⃣️循环条件（boolean类型）</p><p>3⃣️循环体</p><p>4⃣️迭代条件</p><p>二、for循环的结构</p><figure class="highlight abnf"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs abnf">for (<span class="hljs-number">1</span>⃣️<span class="hljs-comment">; 2⃣️; 4⃣️) &#123;</span><br><span class="hljs-number">3</span>⃣️<span class="hljs-comment">;</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p>1⃣️4⃣️中多句用逗号连接</p>]]></content>
    
    
    <categories>
      
      <category>Java核心基础30days笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java核心基础day03笔记</title>
    <link href="/2021/02/25/day03/"/>
    <url>/2021/02/25/day03/</url>
    
    <content type="html"><![CDATA[<h2 id="03"><a href="#03" class="headerlink" title="03"></a>03</h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">Char c2=<span class="hljs-number">97</span>;<span class="hljs-comment">//不报错</span><br></code></pre></div></td></tr></table></figure><h2 id="05"><a href="#05" class="headerlink" title="05"></a>05</h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">int</span> num1 = <span class="hljs-number">12</span>;<br><span class="hljs-keyword">int</span> num2 = <span class="hljs-number">5</span>;<br><span class="hljs-keyword">double</span> result5 = num1 / (num2 + <span class="hljs-number">0.0</span>);<span class="hljs-comment">//2.4</span><br><span class="hljs-keyword">double</span> result5 = (num1 + <span class="hljs-number">0.0</span>) / num2;<span class="hljs-comment">//2.4</span><br><span class="hljs-keyword">double</span> result6 = (<span class="hljs-keyword">double</span>)num1 / num2;<span class="hljs-comment">//2.4</span><br><span class="hljs-keyword">double</span> result6 = num1 / (<span class="hljs-keyword">double</span>)num2;<span class="hljs-comment">//2.4</span><br></code></pre></div></td></tr></table></figure><p>%取余运算结果的符号与被模数的符号相同</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">short</span> s1 = <span class="hljs-number">10</span>;<br>s1++;<span class="hljs-comment">//不报错，自增1不会改变本身变量的数据类型</span><br><span class="hljs-keyword">byte</span> bb1 = <span class="hljs-number">127</span>;<br>bb1++;<br>System.out.println(<span class="hljs-string">&quot;bb1 =&quot;</span> + bb1);<span class="hljs-comment">//-128</span><br></code></pre></div></td></tr></table></figure><h2 id="07"><a href="#07" class="headerlink" title="07"></a>07</h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">练习：随意给出一个三位数的整数，打印显示它的个位数，十位数，百位数的值。</span><br><span class="hljs-comment">格式如下：</span><br><span class="hljs-comment">数字153的情况如下：</span><br><span class="hljs-comment">个位数：1</span><br><span class="hljs-comment">十位数：5</span><br><span class="hljs-comment">百位数：3</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AriExer</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> num = <span class="hljs-number">187</span>;<br>        <span class="hljs-keyword">int</span> bai = num / <span class="hljs-number">100</span>;<br>        <span class="hljs-keyword">int</span> shi = num % <span class="hljs-number">100</span> / <span class="hljs-number">10</span>;<br>        <span class="hljs-keyword">int</span> ge = num % <span class="hljs-number">10</span>;<br>        System.out.println(<span class="hljs-string">&quot;百位为：&quot;</span> + bai);<br>        System.out.println(<span class="hljs-string">&quot;十位为：&quot;</span> + shi);<br>        System.out.println(<span class="hljs-string">&quot;个位为：&quot;</span> + ge);<br>    &#125;<br></code></pre></div></td></tr></table></figure><h2 id="09"><a href="#09" class="headerlink" title="09"></a>09</h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">short</span> s1 = <span class="hljs-number">10</span>;<br>s1 = s1 + <span class="hljs-number">2</span>;<span class="hljs-comment">//编译失败</span><br>s1 += <span class="hljs-number">2</span>;<span class="hljs-comment">//不会改变变量本身数据类型</span><br></code></pre></div></td></tr></table></figure><h2 id="10"><a href="#10" class="headerlink" title="10"></a>10</h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">int</span> n1 = <span class="hljs-number">10</span>;<br>n1 += (n1++) + (++n);<span class="hljs-comment">//10 + 10 + 12 = 32</span><br></code></pre></div></td></tr></table></figure><h2 id="11"><a href="#11" class="headerlink" title="11"></a>11</h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">boolean</span> b1 = <span class="hljs-keyword">true</span>;<br><span class="hljs-keyword">boolean</span> b2 = <span class="hljs-keyword">false</span>;<br>System.out.println(b2 == b1);<span class="hljs-comment">//false</span><br>System.out.println(b2 = b1);<span class="hljs-comment">//true</span><br></code></pre></div></td></tr></table></figure><h2 id="13"><a href="#13" class="headerlink" title="13"></a>13</h2><p>逻辑运算符操作的都是boolean类型的变量</p><p>区分&amp;(逻辑与)和&amp;&amp;(短路与)：当符号左边是false时，&amp;继续执行符号右边的运算，&amp;&amp;不再执行符号右边的运算</p><p>区分|(逻辑或)和||(短路或)：当符号左边是ture时，|继续执行符号右边的运算，而||不再执行符号右边的运算</p><p>开发中，推荐使用短路</p><h2 id="15"><a href="#15" class="headerlink" title="15"></a>15</h2><p>位运算是直接对整数的二进制进行运算</p><p>‘’&lt;&lt;’：在一定范围内，每向左移1位，相当于*2</p><p>‘&gt;&gt;’：在一定范围内，每向右移1位，相当于/2</p><h2 id="19"><a href="#19" class="headerlink" title="19"></a>19</h2><p>如果程序既可以使用三元运算符，又可以使用if-self结构，那么优先选择三元运算符。原因：简介、执行效率高</p>]]></content>
    
    
    <categories>
      
      <category>Java核心基础30days笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java核心基础day02笔记</title>
    <link href="/2021/02/24/day02/"/>
    <url>/2021/02/24/day02/</url>
    
    <content type="html"><![CDATA[<h2 id="01"><a href="#01" class="headerlink" title="01"></a>01</h2><p>JDK = JRE + Java开发工具(javac,java,javadoc…)</p><p>JRE = JVM + Java核心类库</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">创建如下的类，使得运行的话可以输出：</span><br><span class="hljs-comment">姓名：习大大</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">性别：男</span><br><span class="hljs-comment">家庭住址：北京中南海</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">x</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;姓名：习大大&quot;</span>);<br>        System.out.println();<br>        System.out.println(<span class="hljs-string">&quot;性别：男&quot;</span>);<br>      System.out.print(<span class="hljs-string">&quot;家庭住址：北京中南海&quot;</span>);<br>      <span class="hljs-comment">//System.out.print(&quot;姓名：习大大\n\n性别：男\n家庭住址：北京中南海&quot;);</span><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="02"><a href="#02" class="headerlink" title="02"></a>02</h2><p>Pascal之父Nicklaus Wirth: “Algorithms + Data Structures=Programs”</p><p>健壮性：1.去除了C语言中的指针 2.自动的垃圾回收机制(仍然会出现内存溢出、内存泄漏)</p><h2 id="05"><a href="#05" class="headerlink" title="05"></a>05</h2><p>凡是自己可以起名字的地方都叫标识符</p><h2 id="08"><a href="#08" class="headerlink" title="08"></a>08</h2><p>变量都定义在其作用域(大括号)内。在作用域内，它是有效的。</p><h2 id="09"><a href="#09" class="headerlink" title="09"></a>09</h2><p>基本数据类型：</p><p>整形：byte \ short \ int \ long</p><p>浮点数：float \ double</p><p>字符型：char</p><p>布尔型：boolean</p><p>引用数据类型：</p><p>类(class)</p><p>接口(interface)</p><p>数组(array)</p><h2 id="10"><a href="#10" class="headerlink" title="10"></a>10</h2><p>声明long型变量，必须以”l”或”L”结尾</p><h2 id="11"><a href="#11" class="headerlink" title="11"></a>11</h2><p>float和double中aEb是a*(10^b)</p><p> 声明float型变量，必须以”f”或”F”结尾</p><p>通常，声明浮点型变量时，使用double型</p><h2 id="12"><a href="#12" class="headerlink" title="12"></a>12</h2><p>字符型：char(1字符=2字节) 声明时通常使用一对’a’ 可声明转义字符、unicode</p><h2 id="15-16-17-18"><a href="#15-16-17-18" class="headerlink" title="15 16 17 18"></a>15 16 17 18</h2><p>基本数据类型之间的运算规则(不包含boolean)：</p><p>自动类型提升：</p><p>当容量小的数据类型的变量与容量大的数据类型的变量做运算时，结果自动提升为容量大的数据类型</p><p>说明：这里容量大小指表示数的范围大小，不是占字节多少</p><p>byte、char、short(任意两者或同种做运算结果是int) &lt; int &lt; long &lt; float &lt; double</p><p>java在做运算时，如果操作数均在int范围内，那么一律在int的空间内运算</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">long</span> l = <span class="hljs-number">123123</span>;<br><span class="hljs-comment">//不报错，因为123123是int型，自动类型提升成long</span><br><span class="hljs-keyword">long</span> l = <span class="hljs-number">21332423235234123</span>;<br><span class="hljs-comment">//报错，因为21332423235234123是long型</span><br><span class="hljs-keyword">byte</span> b = <span class="hljs-number">12</span>;<br><span class="hljs-keyword">byte</span> b1 = b + <span class="hljs-number">1</span>;<br><span class="hljs-comment">//报错，b+1是int型，因为1被看作常量；整型常量，默认类型为int型；浮点型常量，默认类型为double型</span><br></code></pre></div></td></tr></table></figure><p>强制类型转换(自动类型提升运算的逆运算)：</p><p>需要使用强转符(type)</p><p>可能导致精度损失</p><h2 id="19"><a href="#19" class="headerlink" title="19"></a>19</h2><p>声明String类型变量时，使用一对”a”，可为空</p><p>String和8种基本数据类型变量只能做连接运算，结果仍然是String类型</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">int</span> number = <span class="hljs-number">1001</span>;<br>String numberStr = <span class="hljs-string">&quot;学号：&quot;</span>;<br>String info = numberStr + number;<br><span class="hljs-comment">//输出学号：1001</span><br><span class="hljs-keyword">boolean</span> b1 = ture;<br>String info1 = info + b1;<br><span class="hljs-comment">//输出学号：1001true</span><br></code></pre></div></td></tr></table></figure><h2 id="20-21"><a href="#20-21" class="headerlink" title="20 21"></a>20 21</h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">char</span> c = <span class="hljs-string">&#x27;a&#x27;</span>;<span class="hljs-comment">//97</span><br><span class="hljs-keyword">int</span> num = <span class="hljs-number">10</span>;<br>String str = <span class="hljs-string">&quot;hello&quot;</span>;<br>System.out.println(c + num + str);<span class="hljs-comment">//107hello</span><br>System.out.println(c + str + num);<span class="hljs-comment">//ahello10</span><br>System.out.println(c + (str + num));<span class="hljs-comment">//ahello10</span><br>System.out.println((c + num) + str);<span class="hljs-comment">//107hello</span><br>System.out.println(str + num + c);<span class="hljs-comment">//hello10a</span><br>System.out.println(<span class="hljs-string">&#x27;*&#x27;</span> + <span class="hljs-string">&#x27;\t&#x27;</span> + <span class="hljs-string">&#x27;*&#x27;</span>);<span class="hljs-comment">//93</span><br>System.out.println(<span class="hljs-string">&#x27;*&#x27;</span> + <span class="hljs-string">&quot;\t&quot;</span> + <span class="hljs-string">&#x27;*&#x27;</span>);<span class="hljs-comment">//**</span><br>System.out.println(<span class="hljs-string">&#x27;*&#x27;</span> + <span class="hljs-string">&#x27;\t&#x27;</span> + <span class="hljs-string">&quot;*&quot;</span>);<span class="hljs-comment">//51*</span><br>System.out.println(<span class="hljs-string">&#x27;*&#x27;</span> + (<span class="hljs-string">&#x27;\t&#x27;</span> + <span class="hljs-string">&quot;*&quot;</span>));<span class="hljs-comment">//**</span><br>String str2 = <span class="hljs-number">3.5f</span> + <span class="hljs-string">&quot;&quot;</span>;<span class="hljs-comment">//不报错</span><br>System.out.println(str2);<span class="hljs-comment">//3.5</span><br></code></pre></div></td></tr></table></figure><h2 id="23"><a href="#23" class="headerlink" title="23"></a>23</h2><p>正数的原码、反码、补码都相同</p><p>原码：直接将一个数值换成二进制数，最高位是符号位置</p><p>负数的反码：是对原码按位取反，最高位(符号位)为1不变</p><p>负数的补码：其反码+1</p><p>计算机底层都以补码的方式来存储数据</p>]]></content>
    
    
    <categories>
      
      <category>Java核心基础30days笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java核心基础day01笔记</title>
    <link href="/2021/02/23/day01/"/>
    <url>/2021/02/23/day01/</url>
    
    <content type="html"><![CDATA[<h2 id="17"><a href="#17" class="headerlink" title="17"></a>17</h2><p>.java文件(源文件)通过javac编译成.class文件(字节码文件)通过java运行出结果(不需要后缀.class)</p><p>源文件名必须和源文件公共类名相同</p><h2 id="21"><a href="#21" class="headerlink" title="21"></a>21</h2><p>文档注释可以被JDK提供的工具javadoc所解析，生成一套以网页文件形式体现的该程序的说明文档</p><p>javadoc -d mydoc -author -version HelloWorld.java</p><p>mydoc：文件夹名</p><p>多行注释不可嵌套</p><h2 id="24"><a href="#24" class="headerlink" title="24"></a>24</h2><p>在一个java源文件中可以声明多个class，但是最多只能有一个class声明为public，此类名与源文件名必须相同</p><p>程序的入口是main()方法，格式是固定的(args可变 []也可放在args后面)</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span><br></code></pre></div></td></tr></table></figure><p>编译以后，会生成一个或多个字节码文件。字节码文件名与java源文件中类名相同，有几个类就有几个字节码文件</p>]]></content>
    
    
    <categories>
      
      <category>Java核心基础30days笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
